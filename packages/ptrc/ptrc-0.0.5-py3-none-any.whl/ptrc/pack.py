# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/13_pack.ipynb.

# %% auto 0
__all__ = ['nonzerosfrom', 'unpadded_len', 'pack_padded', 'sort_sequences', 'pad', 'pack', 'unpack']

# %% ../nbs/13_pack.ipynb 6
import functools

# %% ../nbs/13_pack.ipynb 8
#| export


# %% ../nbs/13_pack.ipynb 10
#| export


# %% ../nbs/13_pack.ipynb 12
#| export


# %% ../nbs/13_pack.ipynb 14
try: import torch
except: ...

# %% ../nbs/13_pack.ipynb 15
try: from torch.nn.utils.rnn import pad_sequence, pack_padded_sequence, pad_packed_sequence, PackedSequence
except: ...

# %% ../nbs/13_pack.ipynb 17
from atyp import (Tensor, IntTensor, IntTensorQ)
from chck import isnone

# %% ../nbs/13_pack.ipynb 19
#| export


# %% ../nbs/13_pack.ipynb 21
def nonzerosfrom(t: Tensor, axis: int = 1) -> IntTensor:
    '''
    Count the number of non-zero elements in each sequence along a specified axis.

    Parameters
    ----------
    t : Tensor
        The input tensor containing sequences.
    axis : int, optional
        The axis along which to count non-zero elements, default is 1.

    Returns
    -------
    IntTensor
        An integer tensor indicating the count of non-zero elements in each sequence.

    Examples
    --------
    >>> nonzerosfrom(torch.tensor([[1, 2, 0], [3, 0, 0]]))
    tensor([2, 1])
    '''
    return functools.reduce(lambda t, _: t.count_nonzero(-1), t.shape[axis:], t)

# %% ../nbs/13_pack.ipynb 22
def unpadded_len(t: Tensor, lens: IntTensorQ = None) -> IntTensor:
    '''
    Determine the unpadded length of each sequence in a batch of sequences.

    Parameters
    ----------
    t : Tensor
        The tensor containing sequences, possibly with padding.
    lens : IntTensorQ, optional
        Precomputed lengths of the sequences, defaults to None.

    Returns
    -------
    IntTensor
        An integer tensor representing the length of each sequence.

    Examples
    --------
    >>> unpadded_len(torch.tensor([[1, 2, 0], [3, 0, 0]]))
    tensor([2, 1])
    '''
    return nonzerosfrom(t, axis=1) if isnone(lens) else lens


# %% ../nbs/13_pack.ipynb 23
def pack_padded(p: Tensor, lens: IntTensorQ = None) -> PackedSequence:
    '''
    Convert a batch of padded sequences to a PackedSequence.

    Parameters
    ----------
    p : Tensor
        The batch of padded sequences.
    lens : IntTensorQ, optional
        The lengths of each sequence in the batch, defaults to None.

    Returns
    -------
    PackedSequence
        The packed sequence.

    Examples
    --------
    >>> p = torch.tensor([[1, 2, 0], [3, 4, 0]])
    >>> pack_padded(p)
    PackedSequence(...)
    '''
    lens = unpadded_len(p, lens).clone().cpu()
    return pack_padded_sequence(p, lens, batch_first=True)

# %% ../nbs/13_pack.ipynb 24
def sort_sequences(t: Tensor, lens: IntTensorQ = None) -> (Tensor, IntTensor, IntTensor):
    '''
    Sort a batch of sequences by their lengths in descending order.

    Parameters
    ----------
    t : Tensor
        The batch of sequences.
    lens : IntTensorQ, optional
        The lengths of each sequence in the batch, defaults to None.

    Returns
    -------
    Tensor
        The sorted sequences.
    IntTensor
        The lengths of the sorted sequences.
    IntTensor
        The indices that sort the batch.

    Examples
    --------
    >>> t = torch.tensor([[1, 2, 0], [3, 4, 5]])
    >>> sorted_t, sorted_lens, sorted_idx = sort_sequences(t)
    '''
    lens = unpadded_len(t, lens)
    sorted_lens, sorted_idx = lens.sort(descending=True)
    sorted_t = t[sorted_idx]
    return sorted_t, sorted_lens, sorted_idx


# %% ../nbs/13_pack.ipynb 25
def pad(t: Tensor, batch_first: bool = True, value: float = 0) -> Tensor:
    '''
    Pad a batch of variable-length sequences to the same length with a specified value.

    This function uses `torch.nn.utils.rnn.pad_sequence` to pad a batch of sequences. 
    It's useful when dealing with batches of sequences of varying lengths, 
    particularly in preparation for neural network inputs like RNNs.

    Parameters
    ----------
    t : Tensor
        A tensor or a list of tensors representing sequences of varying lengths.
    batch_first : bool, optional
        If True, the output tensor will have the batch dimension as the first dimension, 
        otherwise the sequence length dimension will be first. Defaults to True.
    value : float, optional
        The padding value to use to fill the sequences to match the longest sequence. Defaults to 0.

    Returns
    -------
    Tensor
        The padded tensor with sequences of the same length.

    Examples
    --------
    >>> seqs = [torch.tensor([1, 2]), torch.tensor([3, 4, 5])]
    >>> pad(seqs)
    tensor([[1, 2, 0],
            [3, 4, 5]])
    '''
    return pad_sequence(t, batch_first=batch_first, padding_value=value)

# %% ../nbs/13_pack.ipynb 26
def pack(t: Tensor, lens: IntTensorQ = None) -> (PackedSequence, IntTensor):
    '''
    Packs a batch of sequences, sorting them by length in descending order.

    Parameters
    ----------
    t : Tensor
        The batch of sequences to pack.
    lens : IntTensorQ, optional
        The lengths of each sequence in the batch, defaults to None.

    Returns
    -------
    PackedSequence
        The packed sequence.
    IntTensor
        The indices that sort the batch.

    Examples
    --------
    >>> t = torch.tensor([[1, 2, 0], [3, 4, 5]])
    >>> packed, sorted_idx = pack(t)
    '''
    sorted_x, sorted_lens, sorted_idx = sort_sequences(t, lens)
    packed = pack_padded(sorted_x, sorted_lens)
    return packed, sorted_idx

# %% ../nbs/13_pack.ipynb 27
def unpack(p: PackedSequence) -> (Tensor, IntTensor):
    '''
    Converts a PackedSequence back to a padded sequence.

    Parameters
    ----------
    p : PackedSequence
        The packed sequence.

    Returns
    -------
    Tensor
        The padded sequence tensor.
    IntTensor
        The lengths of each sequence in the padded tensor.

    Examples
    --------
    >>> p = pack(torch.tensor([[1, 2, 0], [3, 4, 5]]))[0]
    >>> padded, lens = unpack(p)
    '''
    padded, lens = pad_packed_sequence(p, batch_first=True)
    return padded, lens  


# %% ../nbs/13_pack.ipynb 28
#| export



