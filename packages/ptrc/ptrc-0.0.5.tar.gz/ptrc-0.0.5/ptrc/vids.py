# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/23_vids.ipynb.

# %% auto 0
__all__ = ['fcs', 'fce', 'frs', 'fre', 'getbbox', 'vidpxs', 'subpxs']

# %% ../nbs/23_vids.ipynb 6
#| export


# %% ../nbs/23_vids.ipynb 8
#| export


# %% ../nbs/23_vids.ipynb 11
try: import cv2
except: ...

# %% ../nbs/23_vids.ipynb 13
#| export


# %% ../nbs/23_vids.ipynb 15
#| export


# %% ../nbs/23_vids.ipynb 17
#| export


# %% ../nbs/23_vids.ipynb 19
from atyp import (VidCap, PathLike, BBox, Rect)
from chck import ispathlike

# %% ../nbs/23_vids.ipynb 21
from .enum import SliceFormat

# %% ../nbs/23_vids.ipynb 24
def fcs(col: int, width: int)  -> int: 
    '''
    Calculate the starting pixel column for a frame in a grid layout.

    Parameters
    ----------
    col : int
        Column index of the frame in the grid.
    width : int
        Width of each frame in the grid.

    Returns
    -------
    int
        Starting pixel column for the specified frame.

    Examples
    --------
    >>> fcs(1, 100)  # Start column for the second frame in a grid with 100px wide frames
    100
    '''
    return (col + 0) * width

def fce(col: int, width: int)  -> int: 
    '''
    Calculate the ending pixel column for a frame in a grid layout.

    Parameters
    ----------
    col : int
        Column index of the frame in the grid.
    width : int
        Width of each frame in the grid.

    Returns
    -------
    int
        Ending pixel column for the specified frame.

    Examples
    --------
    >>> fce(1, 100)  # End column for the second frame in a grid with 100px wide frames
    200
    '''
    return (col + 1) * width

def frs(row: int, height: int) -> int: 
    '''
    Calculate the starting pixel row for a frame in a grid layout.

    Parameters
    ----------
    row : int
        Row index of the frame in the grid.
    height : int
        Height of each frame in the grid.

    Returns
    -------
    int
        Starting pixel row for the specified frame.

    Examples
    --------
    >>> frs(1, 50)  # Start row for the second frame in a grid with 50px high frames
    50
    '''
    return (row + 0) * height

def fre(row: int, height: int) -> int: 
    '''
    Calculate the ending pixel row for a frame in a grid layout.

    Parameters
    ----------
    row : int
        Row index of the frame in the grid.
    height : int
        Height of each frame in the grid.

    Returns
    -------
    int
        Ending pixel row for the specified frame.

    Examples
    --------
    >>> fre(1, 50)  # End row for the second frame in a grid with 50px high frames
    100
    '''
    return (row + 1) * height

# %% ../nbs/23_vids.ipynb 26
def getbbox(row: int, col: int, width: int, height: int, fmt: SliceFormat = SliceFormat.coord) -> BBox:
    '''
    Calculate the bounding box for a subframe in a grid layout (defaults in position format)

    Parameters
    ----------
    row : int
        Row index of the subframe in the grid.

    col : int
        Column index of the subframe in the grid.

    width : int
        Width of each frame in the grid.

    height : int
        Height of each frame in the grid.

    fmt : SliceFormat, optional
        Format for the bounding box, defaults to `SliceFormat.coord`.

    Returns
    -------
    BBox
        Bounding box for the specified subframe.

    Examples
    --------
    >>> getbbox(2, 3, 200, 400)
    ((800, 600), (1200, 800)) # ((x0, y0), (x1, y1))

    >>> getbbox(1, 1, 100, 50, SliceFormat.slice)
    ((800, 1200), (600, 800)) # ((x0, x1), (y0, y1))
    '''
    bbox = (frs(row, height), fcs(col, width)), (fre(row, height), fce(col, width))
    return SliceFormat.flip(*bbox) if fmt == SliceFormat.slice else bbox

# %% ../nbs/23_vids.ipynb 29
def vidpxs(mov: VidCap | PathLike) -> Rect:
    '''
    Get the width and height (in pixels) of a video.

    Parameters
    ----------
    mov : VidCap | PathLike
        Video capture object or path to the video file.

    Returns
    -------
    Rect
        The width and height of the video in pixels.

    Examples
    --------
    >>> vidpxs('/path/to/video.avi')  # Returns the width and height of the video
    (1920, 1080)

    >>> vidpxs(cv2.VideoCapture('/path/to/video.avi')) 
    (1920, 1080)
    '''
    if ispathlike(mov): mov = cv2.VideoCapture(str(mov))
    pxs = int(mov.get(cv2.CAP_PROP_FRAME_WIDTH)), (int(mov.get(cv2.CAP_PROP_FRAME_HEIGHT)))
    mov.release()
    return pxs

# %% ../nbs/23_vids.ipynb 30
def subpxs(width: int, height: int, rows: int, cols: int) -> Rect:
    '''
    Calculate the pixel dimensions for each subframe in a grid layout.

    Parameters
    ----------
    width : int
        Total width of the video or image.
    height : int
        Total height of the video or image.
    rows : int
        Number of rows in the grid.
    cols : int
        Number of columns in the grid.

    Returns
    -------
    Rect
        The width and height of each subframe in the grid.

    Examples
    --------
    >>> subpxs(1920, 1080, 2, 3)  # Subframe dimensions in a 2x3 grid
    (640, 540)
    '''
    return (width // cols, height // rows)

# %% ../nbs/23_vids.ipynb 32
#| export
