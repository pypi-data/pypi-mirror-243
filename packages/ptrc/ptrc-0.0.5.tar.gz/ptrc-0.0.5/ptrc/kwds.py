# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_kwds.ipynb.

# %% auto 0
__all__ = ['recurrent_kwds', 'recurrent_encoder_kwds', 'recurrent_decoder_kwds']

# %% ../nbs/20_kwds.ipynb 6
#| export


# %% ../nbs/20_kwds.ipynb 8
from typing import TypedDict

# %% ../nbs/20_kwds.ipynb 11
#| export

# %% ../nbs/20_kwds.ipynb 13
#| export


# %% ../nbs/20_kwds.ipynb 15
try: import torch, torch.nn as nn
except ImportError: ...

# %% ../nbs/20_kwds.ipynb 17
#| export


# %% ../nbs/20_kwds.ipynb 19
from atyp import DTypeQ, DeviceQ

# %% ../nbs/20_kwds.ipynb 21
from .atyp import (RecurrentAutoEncoderKeywords)
from .enum import NonLinearity, RecurrentLayer

# %% ../nbs/20_kwds.ipynb 23
def recurrent_kwds(
    input_size: int, hidden_size: int, num_layers: int = 1, 
    bias: bool = True, batch_first: bool = True, dropout: float = 0.2, 
    bidirectional: bool = False, proj_size: int = 0, 
    nonlinearity: NonLinearity = NonLinearity.Tanh, 
    device: DeviceQ = None,  dtype: DTypeQ = None, 
    kind: RecurrentLayer = RecurrentLayer.LSTM,
):
    '''
    Generate keyword arguments for initializing a recurrent neural network layer.

    Parameters
    ----------
    input_size, hidden_size, num_layers, bias, batch_first, dropout, bidirectional, proj_size, nonlinearity, device, dtype, kind : 
        Parameters for defining the RNN layer properties.

    Returns
    -------
    dict
        A dictionary of keyword arguments for RNN layer initialization.

    Examples
    --------
    >>> recurrent_kwds(10, 20, num_layers=2, bidirectional=True)
    # Returns keyword arguments for a bidirectional RNN with 2 layers.
    '''
    params = dict(
        input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, bias=bias, 
        batch_first=batch_first, dropout=dropout, bidirectional=bidirectional,
        proj_size=proj_size, nonlinearity=nonlinearity, device=device, dtype=dtype,
    )
    
    if RecurrentLayer(kind) != RecurrentLayer.RNN:  params.pop('nonlinearity', None)
    if RecurrentLayer(kind) != RecurrentLayer.LSTM: params.pop('proj_size', None)

    return params

# %% ../nbs/20_kwds.ipynb 26
def recurrent_encoder_kwds(**kwargs: RecurrentAutoEncoderKeywords):
    '''
    Generate keyword arguments for initializing an encoder in a recurrent autoencoder.

    Parameters
    ----------
    kwargs : RecurrentAutoEncoderKeywords
        Keyword arguments specific to the encoder.

    Returns
    -------
    dict
        A dictionary of keyword arguments for encoder initialization.

    Examples
    --------
    >>> recurrent_encoder_kwds(input_size=10, hidden_size=20)
    # Returns keyword arguments for an encoder.
    '''
    result, params = dict(), kwargs.copy()
    input_size  = params.pop('input_size',  None)
    hidden_size = params.pop('hidden_size', None)
    output_size = params.pop('output_size', None)
    result.setdefault('input_size',  input_size or hidden_size)
    result.setdefault('hidden_size', output_size or hidden_size)
    return {**result, **params}

# %% ../nbs/20_kwds.ipynb 28
def recurrent_decoder_kwds(**kwargs: RecurrentAutoEncoderKeywords):
    '''
    Generate keyword arguments for initializing a decoder in a recurrent autoencoder.

    Parameters
    ----------
    kwargs : RecurrentAutoEncoderKeywords
        Keyword arguments specific to the decoder.

    Returns
    -------
    dict
        A dictionary of keyword arguments for decoder initialization.

    Examples
    --------
    >>> recurrent_decoder_kwds(input_size=10, hidden_size=20)
    # Returns keyword arguments for a decoder.
    '''
    result, params = dict(), kwargs.copy()
    input_size  = params.pop('input_size',  None)
    hidden_size = params.pop('hidden_size', None)
    output_size = params.pop('output_size', None)
    result.setdefault('hidden_size', input_size  or hidden_size)
    result.setdefault('output_size', output_size or hidden_size)
    return {**result, **params}
