from typing import overload
import euklid.vector

class BSplineCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> BSplineCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> BSplineCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_curvature(self, num: int = ...) -> euklid.vector.Interpolation: ...
    def get_derivate(self) -> LinSplineCurve: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> BSplineCurve: ...
    def __deepcopy__(self, memo: dict) -> BSplineCurve: ...
    def __json__(self) -> dict: ...

class BezierCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> BezierCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> BezierCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> BezierCurve: ...
    def __deepcopy__(self, memo: dict) -> BezierCurve: ...
    def __json__(self) -> dict: ...

class CubicBSplineCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> CubicBSplineCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> CubicBSplineCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_curvature(self, num: int = ...) -> euklid.vector.Interpolation: ...
    def get_derivate(self) -> BSplineCurve: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> CubicBSplineCurve: ...
    def __deepcopy__(self, memo: dict) -> CubicBSplineCurve: ...
    def __json__(self) -> dict: ...

class LinSplineCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> LinSplineCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> LinSplineCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_curvature(self, num: int = ...) -> euklid.vector.Interpolation: ...
    def get_derivate(self) -> LinSplineCurve: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> LinSplineCurve: ...
    def __deepcopy__(self, memo: dict) -> LinSplineCurve: ...
    def __json__(self) -> dict: ...

class QuadBSplineCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> QuadBSplineCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> QuadBSplineCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_curvature(self, num: int = ...) -> euklid.vector.Interpolation: ...
    def get_derivate(self) -> CubicBSplineCurve: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> QuadBSplineCurve: ...
    def __deepcopy__(self, memo: dict) -> QuadBSplineCurve: ...
    def __json__(self) -> dict: ...

class SymmetricBSplineCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> SymmetricBSplineCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> SymmetricBSplineCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_curvature(self, arg0: int) -> euklid.vector.Interpolation: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> SymmetricBSplineCurve: ...
    def __deepcopy__(self, memo: dict) -> SymmetricBSplineCurve: ...
    def __json__(self) -> dict: ...

class SymmetricBezierCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> SymmetricBezierCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> SymmetricBezierCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> SymmetricBezierCurve: ...
    def __deepcopy__(self, memo: dict) -> SymmetricBezierCurve: ...
    def __json__(self) -> dict: ...

class SymmetricCubicBSplineCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> SymmetricCubicBSplineCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> SymmetricCubicBSplineCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_curvature(self, arg0: int) -> euklid.vector.Interpolation: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> SymmetricCubicBSplineCurve: ...
    def __deepcopy__(self, memo: dict) -> SymmetricCubicBSplineCurve: ...
    def __json__(self) -> dict: ...

class SymmetricQuadBSplineCurve:
    controlpoints: euklid.vector.PolyLine2D
    numpoints: int
    @overload
    def __init__(self, controlpoints: list) -> None: ...
    @overload
    def __init__(self, arg0: euklid.vector.PolyLine2D) -> None: ...
    def copy(self) -> SymmetricQuadBSplineCurve: ...
    @classmethod
    def fit(cls, curve: euklid.vector.PolyLine2D, numpoints: int) -> SymmetricQuadBSplineCurve: ...
    def get(self, arg0: float) -> euklid.vector.Vector2D: ...
    def get_curvature(self, arg0: int) -> euklid.vector.Interpolation: ...
    def get_sequence(self, num: int) -> euklid.vector.PolyLine2D: ...
    def __copy__(self) -> SymmetricQuadBSplineCurve: ...
    def __deepcopy__(self, memo: dict) -> SymmetricQuadBSplineCurve: ...
    def __json__(self) -> dict: ...
