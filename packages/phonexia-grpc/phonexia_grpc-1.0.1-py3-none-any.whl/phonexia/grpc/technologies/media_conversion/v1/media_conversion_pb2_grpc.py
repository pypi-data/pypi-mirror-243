# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from phonexia.grpc.technologies.media_conversion.v1 import media_conversion_pb2 as phonexia_dot_grpc_dot_technologies_dot_media__conversion_dot_v1_dot_media__conversion__pb2


class MediaConversionStub(object):
    """Service that implements media conversion to optimal format for other
    Phonexia's microservices.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Convert = channel.stream_stream(
                '/phonexia.grpc.technologies.media_conversion.v1.MediaConversion/Convert',
                request_serializer=phonexia_dot_grpc_dot_technologies_dot_media__conversion_dot_v1_dot_media__conversion__pb2.ConvertRequest.SerializeToString,
                response_deserializer=phonexia_dot_grpc_dot_technologies_dot_media__conversion_dot_v1_dot_media__conversion__pb2.ConvertResponse.FromString,
                )


class MediaConversionServicer(object):
    """Service that implements media conversion to optimal format for other
    Phonexia's microservices.
    """

    def Convert(self, request_iterator, context):
        """Performs synchronous format conversion. Returns a result after completely
        sent and processed audio.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaConversionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Convert': grpc.stream_stream_rpc_method_handler(
                    servicer.Convert,
                    request_deserializer=phonexia_dot_grpc_dot_technologies_dot_media__conversion_dot_v1_dot_media__conversion__pb2.ConvertRequest.FromString,
                    response_serializer=phonexia_dot_grpc_dot_technologies_dot_media__conversion_dot_v1_dot_media__conversion__pb2.ConvertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'phonexia.grpc.technologies.media_conversion.v1.MediaConversion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MediaConversion(object):
    """Service that implements media conversion to optimal format for other
    Phonexia's microservices.
    """

    @staticmethod
    def Convert(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/phonexia.grpc.technologies.media_conversion.v1.MediaConversion/Convert',
            phonexia_dot_grpc_dot_technologies_dot_media__conversion_dot_v1_dot_media__conversion__pb2.ConvertRequest.SerializeToString,
            phonexia_dot_grpc_dot_technologies_dot_media__conversion_dot_v1_dot_media__conversion__pb2.ConvertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
