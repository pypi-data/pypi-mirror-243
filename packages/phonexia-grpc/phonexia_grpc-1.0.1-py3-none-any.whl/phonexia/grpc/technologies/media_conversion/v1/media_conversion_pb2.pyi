"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Phonexia s.r.o.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Phonexia Media Conversion gRPC API.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import phonexia.grpc.common.core_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ConvertRequest(google.protobuf.message.Message):
    """The top-level message sent by the client for the <code>Convert</code> method."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUDIO_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    @property
    def audio(self) -> phonexia.grpc.common.core_pb2.Audio:
        """Audio to be converted."""
    @property
    def config(self) -> global___ConvertConfig:
        """Media conversion convert configuration."""
    def __init__(
        self,
        *,
        audio: phonexia.grpc.common.core_pb2.Audio | None = ...,
        config: global___ConvertConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["audio", b"audio", "config", b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio", b"audio", "config", b"config"]) -> None: ...

global___ConvertRequest = ConvertRequest

@typing_extensions.final
class ConvertConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _ChannelMode:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ChannelModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ConvertConfig._ChannelMode.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        MIX: ConvertConfig._ChannelMode.ValueType  # 0
        """Mix channels into a single mono audio stream."""
        SPLIT: ConvertConfig._ChannelMode.ValueType  # 1
        """Separate channels into mono audio streams."""

    class ChannelMode(_ChannelMode, metaclass=_ChannelModeEnumTypeWrapper):
        """<code>ChannelMode</code> specifies how multichannel audio will be treated
        during the conversion process.
        """

    MIX: ConvertConfig.ChannelMode.ValueType  # 0
    """Mix channels into a single mono audio stream."""
    SPLIT: ConvertConfig.ChannelMode.ValueType  # 1
    """Separate channels into mono audio streams."""

    CHANNEL_MODE_FIELD_NUMBER: builtins.int
    KEEP_CHANNELS_FIELD_NUMBER: builtins.int
    channel_mode: global___ConvertConfig.ChannelMode.ValueType
    """Channel mode to be used during the conversion."""
    @property
    def keep_channels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """If an array of channels is provided, the microservice will ignore those
        that are not listed.
        All channels are processed if this field is not set.
        """
    def __init__(
        self,
        *,
        channel_mode: global___ConvertConfig.ChannelMode.ValueType = ...,
        keep_channels: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["channel_mode", b"channel_mode", "keep_channels", b"keep_channels"]) -> None: ...

global___ConvertConfig = ConvertConfig

@typing_extensions.final
class ConvertResult(google.protobuf.message.Message):
    """A conversion result."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AUDIO_FIELD_NUMBER: builtins.int
    CHANNEL_TAG_FIELD_NUMBER: builtins.int
    @property
    def audio(self) -> phonexia.grpc.common.core_pb2.Audio:
        """Converted audio."""
    channel_tag: builtins.int
    """Channel number in the input audio from which the result audio was
    converted.
    """
    def __init__(
        self,
        *,
        audio: phonexia.grpc.common.core_pb2.Audio | None = ...,
        channel_tag: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["audio", b"audio"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio", b"audio", "channel_tag", b"channel_tag"]) -> None: ...

global___ConvertResult = ConvertResult

@typing_extensions.final
class ConvertResponse(google.protobuf.message.Message):
    """Message returned to the client by the <code>Convert</code> method.
    It contains the result as one or more <code>ConvertResult</code> messages.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESULTS_FIELD_NUMBER: builtins.int
    @property
    def results(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConvertResult]:
        """*
        List of results containing converted and seperated audio streams.
        """
    def __init__(
        self,
        *,
        results: collections.abc.Iterable[global___ConvertResult] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["results", b"results"]) -> None: ...

global___ConvertResponse = ConvertResponse
