"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1 (v1)
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bimdata_api_client.api_client import ApiClient, Endpoint as _Endpoint
from bimdata_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bimdata_api_client.model.building import Building
from bimdata_api_client.model.building_model_plan_request import BuildingModelPlanRequest
from bimdata_api_client.model.classification import Classification
from bimdata_api_client.model.classification_request import ClassificationRequest
from bimdata_api_client.model.create_building_by_name_request import CreateBuildingByNameRequest
from bimdata_api_client.model.create_model_request import CreateModelRequest
from bimdata_api_client.model.create_multi_page_model_request import CreateMultiPageModelRequest
from bimdata_api_client.model.document import Document
from bimdata_api_client.model.document_with_element_list import DocumentWithElementList
from bimdata_api_client.model.element import Element
from bimdata_api_client.model.element_classification_relation import ElementClassificationRelation
from bimdata_api_client.model.element_classification_relation_request import ElementClassificationRelationRequest
from bimdata_api_client.model.element_property_set_relation_request import ElementPropertySetRelationRequest
from bimdata_api_client.model.element_request import ElementRequest
from bimdata_api_client.model.ifc_access_token import IfcAccessToken
from bimdata_api_client.model.ifc_access_token_request import IfcAccessTokenRequest
from bimdata_api_client.model.ifc_export_request import IfcExportRequest
from bimdata_api_client.model.ifc_merge_request import IfcMergeRequest
from bimdata_api_client.model.ifc_optimize_request import IfcOptimizeRequest
from bimdata_api_client.model.layer import Layer
from bimdata_api_client.model.layer_request import LayerRequest
from bimdata_api_client.model.material import Material
from bimdata_api_client.model.model import Model
from bimdata_api_client.model.model_errors import ModelErrors
from bimdata_api_client.model.model_errors_request import ModelErrorsRequest
from bimdata_api_client.model.model_files import ModelFiles
from bimdata_api_client.model.model_property import ModelProperty
from bimdata_api_client.model.patched_element_request import PatchedElementRequest
from bimdata_api_client.model.patched_ifc_access_token_request import PatchedIfcAccessTokenRequest
from bimdata_api_client.model.patched_layer_request import PatchedLayerRequest
from bimdata_api_client.model.patched_model_request import PatchedModelRequest
from bimdata_api_client.model.patched_positioning_plan_request import PatchedPositioningPlanRequest
from bimdata_api_client.model.patched_processor_handler_request import PatchedProcessorHandlerRequest
from bimdata_api_client.model.patched_property_definition_request import PatchedPropertyDefinitionRequest
from bimdata_api_client.model.patched_property_request import PatchedPropertyRequest
from bimdata_api_client.model.patched_property_set_request import PatchedPropertySetRequest
from bimdata_api_client.model.patched_space_request import PatchedSpaceRequest
from bimdata_api_client.model.patched_storey_building_request import PatchedStoreyBuildingRequest
from bimdata_api_client.model.patched_system_request import PatchedSystemRequest
from bimdata_api_client.model.patched_unit_request import PatchedUnitRequest
from bimdata_api_client.model.patched_zone_request import PatchedZoneRequest
from bimdata_api_client.model.patched_zone_space_request import PatchedZoneSpaceRequest
from bimdata_api_client.model.positioning_plan import PositioningPlan
from bimdata_api_client.model.processor_handler import ProcessorHandler
from bimdata_api_client.model.property_definition import PropertyDefinition
from bimdata_api_client.model.property_definition_request import PropertyDefinitionRequest
from bimdata_api_client.model.property_request import PropertyRequest
from bimdata_api_client.model.property_set import PropertySet
from bimdata_api_client.model.property_set_request import PropertySetRequest
from bimdata_api_client.model.raw_elements import RawElements
from bimdata_api_client.model.raw_elements_request import RawElementsRequest
from bimdata_api_client.model.simple_element import SimpleElement
from bimdata_api_client.model.space import Space
from bimdata_api_client.model.space_request import SpaceRequest
from bimdata_api_client.model.storey import Storey
from bimdata_api_client.model.storey_building_request import StoreyBuildingRequest
from bimdata_api_client.model.storey_model_plan_request import StoreyModelPlanRequest
from bimdata_api_client.model.system import System
from bimdata_api_client.model.system_request import SystemRequest
from bimdata_api_client.model.unit import Unit
from bimdata_api_client.model.unit_request import UnitRequest
from bimdata_api_client.model.xkt_file import XktFile
from bimdata_api_client.model.zone import Zone
from bimdata_api_client.model.zone_request import ZoneRequest
from bimdata_api_client.model.zone_space import ZoneSpace
from bimdata_api_client.model.zone_space_relation_request import ZoneSpaceRelationRequest
from bimdata_api_client.model.zone_space_request import ZoneSpaceRequest


class IfcApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_ifc_errors_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ModelErrors,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/errors',
                'operation_id': 'add_ifc_errors_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'model_errors_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'model_errors_request':
                        (ModelErrorsRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'model_errors_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.add_zone_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ZoneSpace,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/add',
                'operation_id': 'add_zone_space_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                    'zone_space_relation_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                    'zone_space_relation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'zone_pk':
                        (int,),
                    'zone_space_relation_request':
                        (ZoneSpaceRelationRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'zone_pk': 'zone_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'zone_pk': 'path',
                    'zone_space_relation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_delete_ifc_classifications_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy',
                'operation_id': 'bulk_delete_ifc_classifications_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'classification_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'classification_request':
                        (ClassificationRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'classification_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_delete_ifc_properties_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy',
                'operation_id': 'bulk_delete_ifc_properties_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_delete_ifc_property_definitions_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy',
                'operation_id': 'bulk_delete_ifc_property_definitions_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_delete_ifc_units_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy',
                'operation_id': 'bulk_delete_ifc_units_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_delete_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy',
                'operation_id': 'bulk_delete_property_set_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_full_update_elements_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Element],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update',
                'operation_id': 'bulk_full_update_elements_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_request',
                    'classification',
                    'classification__notation',
                    'type',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'element_request':
                        ([ElementRequest],),
                    'classification':
                        (str,),
                    'classification__notation':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'classification': 'classification',
                    'classification__notation': 'classification__notation',
                    'type': 'type',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'element_request': 'body',
                    'classification': 'query',
                    'classification__notation': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_full_update_ifc_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([ModelProperty],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update',
                'operation_id': 'bulk_full_update_ifc_property_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_request':
                        ([PropertyRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_remove_classifications_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy',
                'operation_id': 'bulk_remove_classifications_of_element_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_remove_documents_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/bulk_destroy',
                'operation_id': 'bulk_remove_documents_of_element_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_remove_elements_from_classification_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/bulk_destroy',
                'operation_id': 'bulk_remove_elements_from_classification_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'model_classification_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'model_classification_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'model_classification_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'model_classification_pk': 'model_classification_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'model_classification_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_update_elements_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Element],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update',
                'operation_id': 'bulk_update_elements_deprecated',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_request',
                    'classification',
                    'classification__notation',
                    'type',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'element_request':
                        ([ElementRequest],),
                    'classification':
                        (str,),
                    'classification__notation':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'classification': 'classification',
                    'classification__notation': 'classification__notation',
                    'type': 'type',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'element_request': 'body',
                    'classification': 'query',
                    'classification__notation': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.bulk_update_ifc_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([ModelProperty],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update',
                'operation_id': 'bulk_update_ifc_property_deprecated',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_request':
                        ([PropertyRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_access_token_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (IfcAccessToken,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token',
                'operation_id': 'create_access_token_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'ifc_access_token_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'ifc_access_token_request':
                        (IfcAccessTokenRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'ifc_access_token_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_building_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Building,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building',
                'operation_id': 'create_building_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_building_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_building_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'storey_building_request':
                        (StoreyBuildingRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'storey_building_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_building_plan_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Building,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/add',
                'operation_id': 'create_building_plan_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_uuid',
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'building_model_plan_request',
                ],
                'required': [
                    'building_uuid',
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'building_model_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_uuid':
                        (str,),
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'building_model_plan_request':
                        (BuildingModelPlanRequest,),
                },
                'attribute_map': {
                    'building_uuid': 'building_uuid',
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'building_uuid': 'path',
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'building_model_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_classification_element_relations_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element',
                'operation_id': 'create_classification_element_relations_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_classification_relation_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_classification_relation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'element_classification_relation_request':
                        ([ElementClassificationRelationRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'element_classification_relation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_classifications_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Classification],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification',
                'operation_id': 'create_classifications_of_element_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'classification_request',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'classification_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'classification_request':
                        ([ClassificationRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'classification_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Element],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element',
                'operation_id': 'create_element_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_request',
                    'classification',
                    'classification__notation',
                    'type',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'element_request':
                        ([ElementRequest],),
                    'classification':
                        (str,),
                    'classification__notation':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'classification': 'classification',
                    'classification__notation': 'classification__notation',
                    'type': 'type',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'element_request': 'body',
                    'classification': 'query',
                    'classification__notation': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_element_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertySet,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset',
                'operation_id': 'create_element_property_set_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_set_request',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_set_request':
                        (PropertySetRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_set_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_element_property_set_property_definition_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertyDefinition,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition',
                'operation_id': 'create_element_property_set_property_definition_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                    'property_definition_request',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                    'property_definition_request':
                        (PropertyDefinitionRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertyset_pk': 'path',
                    'property_definition_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_element_property_set_property_definition_unit_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Unit,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit',
                'operation_id': 'create_element_property_set_property_definition_unit_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                    'unit_request',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                    'unit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertydefinition_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                    'unit_request':
                        (UnitRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertydefinition_pk': 'propertydefinition_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertydefinition_pk': 'path',
                    'propertyset_pk': 'path',
                    'unit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_element_property_set_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ModelProperty,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property',
                'operation_id': 'create_element_property_set_property_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                    'property_request',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                    'property_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                    'property_request':
                        (PropertyRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'propertyset_pk': 'path',
                    'property_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Model,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/create-model',
                'operation_id': 'create_ifc_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'create_model_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'create_model_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'create_model_request':
                        (CreateModelRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'create_model_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_ifc_property_definition_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([PropertyDefinition],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition',
                'operation_id': 'create_ifc_property_definition_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_definition_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_definition_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_definition_request':
                        ([PropertyDefinitionRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_definition_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_ifc_unit_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Unit],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit',
                'operation_id': 'create_ifc_unit_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'unit_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'unit_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'unit_request':
                        ([UnitRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'unit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_layer_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Layer,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer',
                'operation_id': 'create_layer_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'layer_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'layer_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'layer_request':
                        (LayerRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'layer_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_meta_building_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Model,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/create-metabuilding',
                'operation_id': 'create_meta_building_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'create_building_by_name_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'create_building_by_name_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'create_building_by_name_request':
                        (CreateBuildingByNameRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'create_building_by_name_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_multi_page_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Model,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/create-multipage-model',
                'operation_id': 'create_multi_page_ifc_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'create_multi_page_model_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'create_multi_page_model_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'create_multi_page_model_request':
                        (CreateMultiPageModelRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'create_multi_page_model_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([PropertySet],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset',
                'operation_id': 'create_property_set_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_set_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'property_set_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_set_request':
                        ([PropertySetRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_set_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_property_set_element_relations_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element',
                'operation_id': 'create_property_set_element_relations_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_property_set_relation_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'element_property_set_relation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'element_property_set_relation_request':
                        ([ElementPropertySetRelationRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'element_property_set_relation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_raw_elements_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw',
                'operation_id': 'create_raw_elements_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'raw_elements_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'raw_elements_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'raw_elements_request':
                        (RawElementsRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'raw_elements_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Space],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space',
                'operation_id': 'create_space_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'space_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'space_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'space_request':
                        ([SpaceRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'space_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_storey_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Storey,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey',
                'operation_id': 'create_storey_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_building_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_building_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'storey_building_request':
                        (StoreyBuildingRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'storey_building_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_storey_plan_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Storey,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/add',
                'operation_id': 'create_storey_plan_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                    'storey_model_plan_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                    'storey_model_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'storey_uuid':
                        (str,),
                    'storey_model_plan_request':
                        (StoreyModelPlanRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'storey_uuid': 'storey_uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'storey_uuid': 'path',
                    'storey_model_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_system_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (System,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system',
                'operation_id': 'create_system_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'system_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'system_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'system_request':
                        (SystemRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'system_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_tileset_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/tileset',
                'operation_id': 'create_tileset_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_xkt_file_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (XktFile,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/xkt-file',
                'operation_id': 'create_xkt_file_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'version',
                    'file',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'version',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'version',
                ]
            },
            root_map={
                'validations': {
                    ('version',): {

                        'inclusive_maximum': 2147483647,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'version':
                        (int,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'version': 'version',
                    'file': 'file',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'version': 'form',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.create_zone_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Zone],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone',
                'operation_id': 'create_zone_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_request',
                    'color',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'zone_request':
                        ([ZoneRequest],),
                    'color':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'color': 'color',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'zone_request': 'body',
                    'color': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_zone_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ZoneSpace,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space',
                'operation_id': 'create_zone_space_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                    'zone_space_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                    'zone_space_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'zone_pk':
                        (int,),
                    'zone_space_request':
                        (ZoneSpaceRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'zone_pk': 'zone_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'zone_pk': 'path',
                    'zone_space_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.delete_access_token_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}',
                'operation_id': 'delete_access_token_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'token',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'token': 'token',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_building_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}',
                'operation_id': 'delete_building_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_building_plan_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}',
                'operation_id': 'delete_building_plan_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_uuid',
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'building_uuid',
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_uuid':
                        (str,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'building_uuid': 'building_uuid',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'building_uuid': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}',
                'operation_id': 'delete_element_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}',
                'operation_id': 'delete_ifc_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_ifc_property_definition_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}',
                'operation_id': 'delete_ifc_property_definition_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_ifc_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}',
                'operation_id': 'delete_ifc_property_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_ifc_unit_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}',
                'operation_id': 'delete_ifc_unit_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_ifc_without_doc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/delete-model',
                'operation_id': 'delete_ifc_without_doc_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_layer_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}',
                'operation_id': 'delete_layer_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}',
                'operation_id': 'delete_property_set_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}',
                'operation_id': 'delete_space_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_storey_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}',
                'operation_id': 'delete_storey_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_storey_plan_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}',
                'operation_id': 'delete_storey_plan_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'storey_uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'storey_uuid': 'storey_uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'storey_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_system_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}',
                'operation_id': 'delete_system_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_zone_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}',
                'operation_id': 'delete_zone_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_zone_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}',
                'operation_id': 'delete_zone_space_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'zone_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'zone_pk': 'zone_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'zone_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.export_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export',
                'operation_id': 'export_ifc_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ifc_export_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ifc_export_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'ifc_export_request':
                        (IfcExportRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'ifc_export_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.full_update_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Element,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}',
                'operation_id': 'full_update_element_deprecated',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                    'element_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                    'element_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                    'element_request':
                        (ElementRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                    'element_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.get_access_token_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (IfcAccessToken,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}',
                'operation_id': 'get_access_token_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'token',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'token': 'token',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_access_tokens_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([IfcAccessToken],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token',
                'operation_id': 'get_access_tokens_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_building_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Building,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}',
                'operation_id': 'get_building_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_building_plan_positioning_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PositioningPlan,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning',
                'operation_id': 'get_building_plan_positioning_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_uuid',
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'building_uuid',
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_uuid':
                        (str,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'building_uuid': 'building_uuid',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'building_uuid': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_buildings_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Building],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building',
                'operation_id': 'get_buildings_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_classifications_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Classification],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification',
                'operation_id': 'get_classifications_of_element_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_documents_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Document],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents',
                'operation_id': 'get_documents_of_element_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Element,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}',
                'operation_id': 'get_element_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_linked_documents_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([DocumentWithElementList],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/documents',
                'operation_id': 'get_element_linked_documents_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'classification',
                    'classification__notation',
                    'type',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'classification':
                        (str,),
                    'classification__notation':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'classification': 'classification',
                    'classification__notation': 'classification__notation',
                    'type': 'type',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'classification': 'query',
                    'classification__notation': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertySet,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}',
                'operation_id': 'get_element_property_set_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_set_properties_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([ModelProperty],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property',
                'operation_id': 'get_element_property_set_properties_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_set_property_definition_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertyDefinition,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}',
                'operation_id': 'get_element_property_set_property_definition_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_set_property_definition_unit_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Unit,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}',
                'operation_id': 'get_element_property_set_property_definition_unit_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertydefinition_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertydefinition_pk': 'propertydefinition_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertydefinition_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_set_property_definition_units_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Unit],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit',
                'operation_id': 'get_element_property_set_property_definition_units_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertydefinition_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertydefinition_pk': 'propertydefinition_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertydefinition_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_set_property_definitions_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([PropertyDefinition],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition',
                'operation_id': 'get_element_property_set_property_definitions_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_set_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ModelProperty,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}',
                'operation_id': 'get_element_property_set_property_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_element_property_sets_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([PropertySet],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset',
                'operation_id': 'get_element_property_sets_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_elements_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Element],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element',
                'operation_id': 'get_elements_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'classification',
                    'classification__notation',
                    'type',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'classification':
                        (str,),
                    'classification__notation':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'classification': 'classification',
                    'classification__notation': 'classification__notation',
                    'type': 'type',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'classification': 'query',
                    'classification__notation': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_elements_from_classification_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Element],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element',
                'operation_id': 'get_elements_from_classification_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'model_classification_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'model_classification_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'model_classification_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'model_classification_pk': 'model_classification_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'model_classification_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_classifications_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Classification],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification',
                'operation_id': 'get_ifc_classifications_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Model,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}',
                'operation_id': 'get_ifc_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_material_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Material,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material/{id}',
                'operation_id': 'get_ifc_material_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_materials_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Material],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material',
                'operation_id': 'get_ifc_materials_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_properties_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([ModelProperty],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property',
                'operation_id': 'get_ifc_properties_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_property_definition_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertyDefinition,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}',
                'operation_id': 'get_ifc_property_definition_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_property_definitions_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([PropertyDefinition],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition',
                'operation_id': 'get_ifc_property_definitions_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ModelProperty,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}',
                'operation_id': 'get_ifc_property_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_unit_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Unit,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}',
                'operation_id': 'get_ifc_unit_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifc_units_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Unit],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit',
                'operation_id': 'get_ifc_units_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ifcs_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Model],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc',
                'operation_id': 'get_ifcs_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'source',
                    'status',
                    'type',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                    'source',
                    'status',
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('source',): {

                        "EXPORT": "EXPORT",
                        "MERGE": "MERGE",
                        "OPTIMIZED": "OPTIMIZED",
                        "SPLIT": "SPLIT",
                        "UPLOAD": "UPLOAD"
                    },
                    ('status',): {

                        "C": "C",
                        "D": "D",
                        "E": "E",
                        "I": "I",
                        "P": "P",
                        "W": "W",
                        "X": "X"
                    },
                    ('type',): {

                        "DWG": "DWG",
                        "DXF": "DXF",
                        "GLTF": "GLTF",
                        "IFC": "IFC",
                        "JPEG": "JPEG",
                        "METABUILDING": "METABUILDING",
                        "OBJ": "OBJ",
                        "PDF": "PDF",
                        "PNG": "PNG",
                        "POINT_CLOUD": "POINT_CLOUD"
                    },
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'source':
                        (str,),
                    'status':
                        ([str],),
                    'type':
                        ([str],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'source': 'source',
                    'status': 'status',
                    'type': 'type',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'source': 'query',
                    'status': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                    'status': 'multi',
                    'type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_layer_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Layer,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}',
                'operation_id': 'get_layer_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_layers_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Layer],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer',
                'operation_id': 'get_layers_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_material_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Material,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material/{id}',
                'operation_id': 'get_material_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_materials_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Material],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material',
                'operation_id': 'get_materials_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_processor_handler_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorHandler,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}',
                'operation_id': 'get_processor_handler_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_processor_handlers_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([ProcessorHandler],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler',
                'operation_id': 'get_processor_handlers_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertySet,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}',
                'operation_id': 'get_property_set_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_property_sets_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([PropertySet],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset',
                'operation_id': 'get_property_sets_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_raw_elements_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (RawElements,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw',
                'operation_id': 'get_raw_elements_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_simple_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (SimpleElement,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}/simple',
                'operation_id': 'get_simple_element_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_simple_elements_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (SimpleElement,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/simple',
                'operation_id': 'get_simple_elements_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Space,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}',
                'operation_id': 'get_space_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_spaces_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Space],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space',
                'operation_id': 'get_spaces_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_storey_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Storey,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}',
                'operation_id': 'get_storey_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_storey_plan_positioning_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PositioningPlan,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning',
                'operation_id': 'get_storey_plan_positioning_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'storey_uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'storey_uuid': 'storey_uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'storey_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_storeys_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Storey],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey',
                'operation_id': 'get_storeys_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_system_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (System,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}',
                'operation_id': 'get_system_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_systems_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([System],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system',
                'operation_id': 'get_systems_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tileset_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/tileset',
                'operation_id': 'get_tileset_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'tile_format',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                    'tile_format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('tile_format',): {

                        "PNTS": "pnts",
                        "XKT": "xkt"
                    },
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'tile_format':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'tile_format': 'tile_format',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'tile_format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_zone_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Zone,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}',
                'operation_id': 'get_zone_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_zone_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ZoneSpace,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}',
                'operation_id': 'get_zone_space_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'zone_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'zone_pk': 'zone_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'zone_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_zone_spaces_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([ZoneSpace],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space',
                'operation_id': 'get_zone_spaces_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'zone_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'zone_pk': 'zone_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'zone_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_zones_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Zone],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone',
                'operation_id': 'get_zones_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'color',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'color':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'color': 'color',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'color': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.link_documents_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Document],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents',
                'operation_id': 'link_documents_of_element_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.list_classification_element_relations_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([ElementClassificationRelation],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element',
                'operation_id': 'list_classification_element_relations_deprecated',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.merge_ifcs_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/merge',
                'operation_id': 'merge_ifcs_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'ifc_merge_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'ifc_merge_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'ifc_merge_request':
                        (IfcMergeRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'ifc_merge_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.optimize_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/optimize',
                'operation_id': 'optimize_ifc_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'ifc_optimize_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'ifc_optimize_request':
                        (IfcOptimizeRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'ifc_optimize_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.remove_all_element_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/all',
                'operation_id': 'remove_all_element_property_set_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_classification_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}',
                'operation_id': 'remove_classification_of_element_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_document_of_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/{id}',
                'operation_id': 'remove_document_of_element_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_element_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}',
                'operation_id': 'remove_element_property_set_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_element_property_set_property_definition_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}',
                'operation_id': 'remove_element_property_set_property_definition_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_element_property_set_property_definition_unit_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}',
                'operation_id': 'remove_element_property_set_property_definition_unit_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'property_pk',
                    'propertydefinition_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'property_pk':
                        (int,),
                    'propertydefinition_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'property_pk': 'property_pk',
                    'propertydefinition_pk': 'propertydefinition_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'property_pk': 'path',
                    'propertydefinition_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_element_property_set_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}',
                'operation_id': 'remove_element_property_set_property_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'propertyset_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_elements_from_classification_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/{uuid}',
                'operation_id': 'remove_elements_from_classification_deprecated',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'model_classification_pk',
                    'project_pk',
                    'uuid',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'model_classification_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'model_classification_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'model_classification_pk': 'model_classification_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'model_classification_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.reprocess_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/reprocess',
                'operation_id': 'reprocess_ifc_deprecated',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_access_token_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (IfcAccessToken,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}',
                'operation_id': 'update_access_token_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'token',
                    'patched_ifc_access_token_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'token':
                        (str,),
                    'patched_ifc_access_token_request':
                        (PatchedIfcAccessTokenRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'token': 'token',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'token': 'path',
                    'patched_ifc_access_token_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_building_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Building,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}',
                'operation_id': 'update_building_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                    'patched_storey_building_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                    'patched_storey_building_request':
                        (PatchedStoreyBuildingRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                    'patched_storey_building_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_building_plan_positioning_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PositioningPlan,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning',
                'operation_id': 'update_building_plan_positioning_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_uuid',
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_positioning_plan_request',
                ],
                'required': [
                    'building_uuid',
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_uuid':
                        (str,),
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_positioning_plan_request':
                        (PatchedPositioningPlanRequest,),
                },
                'attribute_map': {
                    'building_uuid': 'building_uuid',
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'building_uuid': 'path',
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_positioning_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_element_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Element,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}',
                'operation_id': 'update_element_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                    'patched_element_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                    'patched_element_request':
                        (PatchedElementRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                    'patched_element_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_element_property_set_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ModelProperty,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}',
                'operation_id': 'update_element_property_set_property_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                    'patched_property_request',
                ],
                'required': [
                    'cloud_pk',
                    'element_uuid',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'propertyset_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'element_uuid':
                        (str,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'propertyset_pk':
                        (int,),
                    'patched_property_request':
                        (PatchedPropertyRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'element_uuid': 'element_uuid',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'propertyset_pk': 'propertyset_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'element_uuid': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'propertyset_pk': 'path',
                    'patched_property_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_ifc_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Model,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}',
                'operation_id': 'update_ifc_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_model_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_model_request':
                        (PatchedModelRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_model_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_ifc_files_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ModelFiles,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files',
                'operation_id': 'update_ifc_files_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'structure_file',
                    'systems_file',
                    'map_file',
                    'gltf_file',
                    'preview_file',
                    'xkt_file',
                    'binary_2d_file',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                    'structure_file',
                    'systems_file',
                    'map_file',
                    'gltf_file',
                    'preview_file',
                    'xkt_file',
                    'binary_2d_file',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'structure_file':
                        (file_type, none_type,),
                    'systems_file':
                        (file_type, none_type,),
                    'map_file':
                        (file_type, none_type,),
                    'gltf_file':
                        (file_type, none_type,),
                    'preview_file':
                        (file_type, none_type,),
                    'xkt_file':
                        (file_type, none_type,),
                    'binary_2d_file':
                        (file_type, none_type,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'structure_file': 'structure_file',
                    'systems_file': 'systems_file',
                    'map_file': 'map_file',
                    'gltf_file': 'gltf_file',
                    'preview_file': 'preview_file',
                    'xkt_file': 'xkt_file',
                    'binary_2d_file': 'binary_2d_file',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'structure_file': 'form',
                    'systems_file': 'form',
                    'map_file': 'form',
                    'gltf_file': 'form',
                    'preview_file': 'form',
                    'xkt_file': 'form',
                    'binary_2d_file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.update_ifc_property_definition_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertyDefinition,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}',
                'operation_id': 'update_ifc_property_definition_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_property_definition_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_property_definition_request':
                        (PatchedPropertyDefinitionRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_property_definition_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_ifc_property_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ModelProperty,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}',
                'operation_id': 'update_ifc_property_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_property_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_property_request':
                        (PatchedPropertyRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_property_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_ifc_unit_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Unit,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}',
                'operation_id': 'update_ifc_unit_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_unit_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_unit_request':
                        (PatchedUnitRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_unit_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_layer_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Layer,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}',
                'operation_id': 'update_layer_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_layer_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_layer_request':
                        (PatchedLayerRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_layer_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_order_building_plan_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Storey,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/order',
                'operation_id': 'update_order_building_plan_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'building_uuid',
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'building_uuid',
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'building_uuid':
                        (str,),
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'building_uuid': 'building_uuid',
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'building_uuid': 'path',
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_order_storey_plan_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Storey,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/order',
                'operation_id': 'update_order_storey_plan_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'storey_uuid':
                        (str,),
                    'request_body':
                        ([int],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'storey_uuid': 'storey_uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'storey_uuid': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_order_storeys_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': ([Storey],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/order',
                'operation_id': 'update_order_storeys_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'request_body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'request_body':
                        ([str],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'request_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_processor_handler_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ProcessorHandler,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}',
                'operation_id': 'update_processor_handler_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_processor_handler_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_processor_handler_request':
                        (PatchedProcessorHandlerRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_processor_handler_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_property_set_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PropertySet,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}',
                'operation_id': 'update_property_set_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_property_set_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_property_set_request':
                        (PatchedPropertySetRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_property_set_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Space,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}',
                'operation_id': 'update_space_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_space_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_space_request':
                        (PatchedSpaceRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_space_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_storey_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Storey,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}',
                'operation_id': 'update_storey_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                    'patched_storey_building_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                    'patched_storey_building_request':
                        (PatchedStoreyBuildingRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                    'patched_storey_building_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_storey_plan_positioning_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (PositioningPlan,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning',
                'operation_id': 'update_storey_plan_positioning_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                    'patched_positioning_plan_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'storey_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'storey_uuid':
                        (str,),
                    'patched_positioning_plan_request':
                        (PatchedPositioningPlanRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'storey_uuid': 'storey_uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'storey_uuid': 'path',
                    'patched_positioning_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_system_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (System,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}',
                'operation_id': 'update_system_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                    'patched_system_request',
                ],
                'required': [
                    'cloud_pk',
                    'ifc_pk',
                    'project_pk',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'uuid':
                        (str,),
                    'patched_system_request':
                        (PatchedSystemRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'uuid': 'path',
                    'patched_system_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_zone_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (Zone,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}',
                'operation_id': 'update_zone_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'patched_zone_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_zone_request':
                        (PatchedZoneRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'patched_zone_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_zone_space_deprecated_endpoint = _Endpoint(
            settings={
                'response_type': (ZoneSpace,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}',
                'operation_id': 'update_zone_space_deprecated',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                    'patched_zone_space_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'ifc_pk',
                    'project_pk',
                    'zone_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'ifc_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'zone_pk':
                        (int,),
                    'patched_zone_space_request':
                        (PatchedZoneSpaceRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'ifc_pk': 'ifc_pk',
                    'project_pk': 'project_pk',
                    'zone_pk': 'zone_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'ifc_pk': 'path',
                    'project_pk': 'path',
                    'zone_pk': 'path',
                    'patched_zone_space_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def add_ifc_errors_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Add errors to model  # noqa: E501

        Model errors are warnings and errors during model process. They alert about missing elements or malformed files  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_ifc_errors_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            model_errors_request (ModelErrorsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ModelErrors
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.add_ifc_errors_deprecated_endpoint.call_with_http_info(**kwargs)

    def add_zone_space_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        zone_pk,
        zone_space_relation_request,
        **kwargs
    ):
        """Add a space to a zone  # noqa: E501

        Add a space to a zone. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_zone_space_deprecated(cloud_pk, ifc_pk, project_pk, zone_pk, zone_space_relation_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            zone_pk (int): A unique integer value identifying this zone.
            zone_space_relation_request (ZoneSpaceRelationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ZoneSpace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['zone_pk'] = \
            zone_pk
        kwargs['zone_space_relation_request'] = \
            zone_space_relation_request
        return self.add_zone_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_delete_ifc_classifications_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Remove all classifications from model's elements  # noqa: E501

        Delete relation between filtered classifications (eg. /classifications?name=untec) and all mode's elements. No classification will be deleted on this endpoint, only the relation between model's elements and their classification.  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_ifc_classifications_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int):
            project_pk (int):

        Keyword Args:
            classification_request (ClassificationRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.bulk_delete_ifc_classifications_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_delete_ifc_properties_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Delete many Property of a model  # noqa: E501

         Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_ifc_properties_deprecated(cloud_pk, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.bulk_delete_ifc_properties_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_delete_ifc_property_definitions_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Delete many PropertyDefinitions of a model  # noqa: E501

         Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_ifc_property_definitions_deprecated(cloud_pk, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.bulk_delete_ifc_property_definitions_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_delete_ifc_units_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Delete many Units of a model  # noqa: E501

         Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_ifc_units_deprecated(cloud_pk, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.bulk_delete_ifc_units_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_delete_property_set_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Delete many PropertySet of a model  # noqa: E501

         Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_delete_property_set_deprecated(cloud_pk, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.bulk_delete_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_full_update_elements_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        element_request,
        **kwargs
    ):
        """Update many elements at once (only changing fields may be defined)  # noqa: E501

         Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_full_update_elements_deprecated(cloud_pk, ifc_pk, project_pk, element_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            element_request ([ElementRequest]):

        Keyword Args:
            classification (str): [optional]
            classification__notation (str): [optional]
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Element]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['element_request'] = \
            element_request
        return self.bulk_full_update_elements_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_full_update_ifc_property_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        property_request,
        **kwargs
    ):
        """Update some fields of many properties of a model  # noqa: E501

         Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_full_update_ifc_property_deprecated(cloud_pk, ifc_pk, project_pk, property_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_request ([PropertyRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ModelProperty]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_request'] = \
            property_request
        return self.bulk_full_update_ifc_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_remove_classifications_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Remove many classifications from an element  # noqa: E501

         Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_remove_classifications_of_element_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.bulk_remove_classifications_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_remove_documents_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Remove many documents from an element  # noqa: E501

         Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_remove_documents_of_element_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.bulk_remove_documents_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_remove_elements_from_classification_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        model_classification_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Remove the classifications from all elements  # noqa: E501

         Bulk delete. You must send a list of ids in the body. These ids (or relations with these ids in case of many-to-many relation deletion) will be deleted   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_remove_elements_from_classification_deprecated(cloud_pk, ifc_pk, model_classification_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int): A unique integer value identifying this model.
            model_classification_pk (int): A unique integer value identifying this classification.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['model_classification_pk'] = \
            model_classification_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.bulk_remove_elements_from_classification_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_update_elements_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        element_request,
        **kwargs
    ):
        """Update many elements at once (all field must be defined)  # noqa: E501

         Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_update_elements_deprecated(cloud_pk, ifc_pk, project_pk, element_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            element_request ([ElementRequest]):

        Keyword Args:
            classification (str): [optional]
            classification__notation (str): [optional]
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Element]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['element_request'] = \
            element_request
        return self.bulk_update_elements_deprecated_endpoint.call_with_http_info(**kwargs)

    def bulk_update_ifc_property_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        property_request,
        **kwargs
    ):
        """Update all fields of many properties of a model  # noqa: E501

         Bulk update. Similar to update, but the body should be a list of objects to patch or put The response will be a list (in the same order) of updated objects or of errors if any If at least one update succeeded, the status code will be 200. If every update failed, the status code we'll be 400 with the list of errors   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_update_ifc_property_deprecated(cloud_pk, ifc_pk, project_pk, property_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_request ([PropertyRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ModelProperty]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_request'] = \
            property_request
        return self.bulk_update_ifc_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_access_token_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Create a token for this model  # noqa: E501

        DEPECRATED: Use ProjectAccessToken instead  Required scopes: ifc:token_manage, model:token_manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_access_token_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            ifc_access_token_request (IfcAccessTokenRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            IfcAccessToken
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.create_access_token_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_building_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        storey_building_request,
        **kwargs
    ):
        """Create a building of a model  # noqa: E501

        Create a building of a model.  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_building_deprecated(cloud_pk, ifc_pk, project_pk, storey_building_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            storey_building_request (StoreyBuildingRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Building
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['storey_building_request'] = \
            storey_building_request
        return self.create_building_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_building_plan_deprecated(
        self,
        building_uuid,
        cloud_pk,
        ifc_pk,
        project_pk,
        building_model_plan_request,
        **kwargs
    ):
        """Create a relation between a 2d model and a building  # noqa: E501

        Create a relation between a 2d model and a building. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG')  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_building_plan_deprecated(building_uuid, cloud_pk, ifc_pk, project_pk, building_model_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            building_uuid (str):
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            building_model_plan_request (BuildingModelPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Building
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['building_uuid'] = \
            building_uuid
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['building_model_plan_request'] = \
            building_model_plan_request
        return self.create_building_plan_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_classification_element_relations_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        element_classification_relation_request,
        **kwargs
    ):
        """Create association between existing classification and existing element  # noqa: E501

        Create association between existing classification and existing element  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_classification_element_relations_deprecated(cloud_pk, ifc_pk, project_pk, element_classification_relation_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            element_classification_relation_request ([ElementClassificationRelationRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['element_classification_relation_request'] = \
            element_classification_relation_request
        return self.create_classification_element_relations_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_classifications_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        classification_request,
        **kwargs
    ):
        """Create one or many classifications to an element  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors If classification created already exists, it will just be added to item's classifications and will not be duplicated  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_classifications_of_element_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, classification_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            classification_request ([ClassificationRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Classification]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['classification_request'] = \
            classification_request
        return self.create_classifications_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_element_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        element_request,
        **kwargs
    ):
        """Create an element in the model  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_element_deprecated(cloud_pk, ifc_pk, project_pk, element_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            element_request ([ElementRequest]):

        Keyword Args:
            classification (str): [optional]
            classification__notation (str): [optional]
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Element]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['element_request'] = \
            element_request
        return self.create_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_element_property_set_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Create a PropertySets to an element  # noqa: E501

        Create a PropertySets that will be automatically linked to the element  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_element_property_set_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int):
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            property_set_request (PropertySetRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertySet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.create_element_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_element_property_set_property_definition_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        property_pk,
        propertyset_pk,
        **kwargs
    ):
        """Create a Definition to a Property  # noqa: E501

        Create a Definition to a Property  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_element_property_set_property_definition_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, property_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            property_definition_request (PropertyDefinitionRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertyDefinition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.create_element_property_set_property_definition_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_element_property_set_property_definition_unit_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        property_pk,
        propertydefinition_pk,
        propertyset_pk,
        unit_request,
        **kwargs
    ):
        """Create a Unit to a Definition  # noqa: E501

        Create a Unit to a Definition  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_element_property_set_property_definition_unit_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, property_pk, propertydefinition_pk, propertyset_pk, unit_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertydefinition_pk (int): A unique integer value identifying this property definition.
            propertyset_pk (int): A unique integer value identifying this property set.
            unit_request (UnitRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Unit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertydefinition_pk'] = \
            propertydefinition_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        kwargs['unit_request'] = \
            unit_request
        return self.create_element_property_set_property_definition_unit_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_element_property_set_property_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        propertyset_pk,
        property_request,
        **kwargs
    ):
        """Create a property to a PropertySet  # noqa: E501

        Create a property to a PropertySet  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_element_property_set_property_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, propertyset_pk, property_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            propertyset_pk (int): A unique integer value identifying this property set.
            property_request (PropertyRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ModelProperty
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        kwargs['property_request'] = \
            property_request
        return self.create_element_property_set_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_ifc_deprecated(
        self,
        cloud_pk,
        project_pk,
        create_model_request,
        **kwargs
    ):
        """Make a PDF or Image file a Model  # noqa: E501

        Make a PDF or Image file a Model to be used in BIMData services. If a model already exists, this route does nothing and returns a 201 with the model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_ifc_deprecated(cloud_pk, project_pk, create_model_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):
            create_model_request (CreateModelRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Model
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['create_model_request'] = \
            create_model_request
        return self.create_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_ifc_property_definition_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        property_definition_request,
        **kwargs
    ):
        """Create a PropertyDefinition on the model  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_ifc_property_definition_deprecated(cloud_pk, ifc_pk, project_pk, property_definition_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_definition_request ([PropertyDefinitionRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PropertyDefinition]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_definition_request'] = \
            property_definition_request
        return self.create_ifc_property_definition_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_ifc_unit_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        unit_request,
        **kwargs
    ):
        """Create a Unit on a model  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_ifc_unit_deprecated(cloud_pk, ifc_pk, project_pk, unit_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            unit_request ([UnitRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Unit]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['unit_request'] = \
            unit_request
        return self.create_ifc_unit_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_layer_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        layer_request,
        **kwargs
    ):
        """Create a layer in the model  # noqa: E501

        The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_layer_deprecated(cloud_pk, ifc_pk, project_pk, layer_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            layer_request (LayerRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Layer
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['layer_request'] = \
            layer_request
        return self.create_layer_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_meta_building_deprecated(
        self,
        cloud_pk,
        project_pk,
        create_building_by_name_request,
        **kwargs
    ):
        """Create an empty 3D Model  # noqa: E501

        Create an empty 3D Model to be used in BIMData services  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_meta_building_deprecated(cloud_pk, project_pk, create_building_by_name_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):
            create_building_by_name_request (CreateBuildingByNameRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Model
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['create_building_by_name_request'] = \
            create_building_by_name_request
        return self.create_meta_building_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_multi_page_ifc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        create_multi_page_model_request,
        **kwargs
    ):
        """Create a multi page model  # noqa: E501

        Create a multi page model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_multi_page_ifc_deprecated(cloud_pk, id, project_pk, create_multi_page_model_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):
            create_multi_page_model_request (CreateMultiPageModelRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Model
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['create_multi_page_model_request'] = \
            create_multi_page_model_request
        return self.create_multi_page_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_property_set_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        property_set_request,
        **kwargs
    ):
        """Create one or many PropertySet  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_property_set_deprecated(cloud_pk, ifc_pk, project_pk, property_set_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_set_request ([PropertySetRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PropertySet]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_set_request'] = \
            property_set_request
        return self.create_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_property_set_element_relations_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        element_property_set_relation_request,
        **kwargs
    ):
        """Create association between PropertySet and element  # noqa: E501

        Create association between PropertySet and element  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_property_set_element_relations_deprecated(cloud_pk, ifc_pk, project_pk, element_property_set_relation_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            element_property_set_relation_request ([ElementPropertySetRelationRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['element_property_set_relation_request'] = \
            element_property_set_relation_request
        return self.create_property_set_element_relations_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_raw_elements_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        raw_elements_request,
        **kwargs
    ):
        """Create elements in an optimized format  # noqa: E501

        Create many elements in an optimized format to reduce JSON size and avoid redudancy. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. You can use the same optimized structure to post multiple elements, property_sets, properties, definitions and units at once. For performance reasons, we do not check the validity of the json. If the json is malformed, an error 500 without more explaination may be returned instead of a 400.  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_raw_elements_deprecated(cloud_pk, ifc_pk, project_pk, raw_elements_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            raw_elements_request (RawElementsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['raw_elements_request'] = \
            raw_elements_request
        return self.create_raw_elements_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_space_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        space_request,
        **kwargs
    ):
        """Create a space in the model  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_space_deprecated(cloud_pk, ifc_pk, project_pk, space_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            space_request ([SpaceRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Space]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['space_request'] = \
            space_request
        return self.create_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_storey_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        storey_building_request,
        **kwargs
    ):
        """Create a storey of a model  # noqa: E501

        Create a storey of a model.  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_storey_deprecated(cloud_pk, ifc_pk, project_pk, storey_building_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            storey_building_request (StoreyBuildingRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Storey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['storey_building_request'] = \
            storey_building_request
        return self.create_storey_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_storey_plan_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        storey_uuid,
        storey_model_plan_request,
        **kwargs
    ):
        """Create a relation between a 2d model and a storey  # noqa: E501

        Create a relation between a 2d model and a storey. The model type must be one of : ('DWG', 'DXF', 'PDF', 'JPEG', 'PNG')  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_storey_plan_deprecated(cloud_pk, ifc_pk, project_pk, storey_uuid, storey_model_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            storey_uuid (str):
            storey_model_plan_request (StoreyModelPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Storey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['storey_uuid'] = \
            storey_uuid
        kwargs['storey_model_plan_request'] = \
            storey_model_plan_request
        return self.create_storey_plan_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_system_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        system_request,
        **kwargs
    ):
        """Create a system in the model  # noqa: E501

        The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_system_deprecated(cloud_pk, ifc_pk, project_pk, system_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            system_request (SystemRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            System
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['system_request'] = \
            system_request
        return self.create_system_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_tileset_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Create the tileset of the model and upload all files  # noqa: E501

        This route is internaly used by BIMData, you probably don't want to use it  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tileset_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.create_tileset_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_xkt_file_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        version,
        file,
        **kwargs
    ):
        """Create an xkt file for the model. Overrides existing file with same version  # noqa: E501

        This route does not accept JSON, only files as x-www-form-urlencoded  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_xkt_file_deprecated(cloud_pk, id, project_pk, version, file, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):
            version (int):
            file (file_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            XktFile
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['version'] = \
            version
        kwargs['file'] = \
            file
        return self.create_xkt_file_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_zone_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        zone_request,
        **kwargs
    ):
        """Create a zone in the model  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_zone_deprecated(cloud_pk, ifc_pk, project_pk, zone_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            zone_request ([ZoneRequest]):

        Keyword Args:
            color (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Zone]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['zone_request'] = \
            zone_request
        return self.create_zone_deprecated_endpoint.call_with_http_info(**kwargs)

    def create_zone_space_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        zone_pk,
        zone_space_request,
        **kwargs
    ):
        """Create a space in a zone  # noqa: E501

        The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_zone_space_deprecated(cloud_pk, ifc_pk, project_pk, zone_pk, zone_space_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            zone_pk (int): A unique integer value identifying this zone.
            zone_space_request (ZoneSpaceRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ZoneSpace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['zone_pk'] = \
            zone_pk
        kwargs['zone_space_request'] = \
            zone_space_request
        return self.create_zone_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_access_token_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        token,
        **kwargs
    ):
        """Delete a token  # noqa: E501

        DEPECRATED: Use ProjectAccessToken instead  Required scopes: ifc:token_manage, model:token_manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_access_token_deprecated(cloud_pk, ifc_pk, project_pk, token, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['token'] = \
            token
        return self.delete_access_token_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_building_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Delete a building of a model  # noqa: E501

        Delete a building of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_building_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.delete_building_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_building_plan_deprecated(
        self,
        building_uuid,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete the relation between a 2d model and a building  # noqa: E501

        Delete the relation between a 2d model and a building  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_building_plan_deprecated(building_uuid, cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            building_uuid (str):
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this element.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['building_uuid'] = \
            building_uuid
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_building_plan_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_element_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Delete an element of a model  # noqa: E501

        The IFC file will not be updated. The remaining elements are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_element_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.delete_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_ifc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a model  # noqa: E501

        It will also delete the related document  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ifc_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_ifc_property_definition_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete a PropertyDefinitions of a model  # noqa: E501

        Delete a PropertyDefinitions of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ifc_property_definition_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property definition.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_ifc_property_definition_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_ifc_property_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete a Property of a model  # noqa: E501

        Delete a Property of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ifc_property_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_ifc_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_ifc_unit_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete a Unit of a model  # noqa: E501

        Delete a Unit of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ifc_unit_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this unit.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_ifc_unit_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_ifc_without_doc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete the Model without deleting the related document  # noqa: E501

        Delete the Model without deleting the related document  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_ifc_without_doc_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_ifc_without_doc_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_layer_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete a layer of a model  # noqa: E501

        The IFC file will not be updated. The remaining layers are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_layer_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this layer.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_layer_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_property_set_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete a PropertySet of a model  # noqa: E501

        Delete a PropertySet of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_property_set_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property set.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_space_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete a space  # noqa: E501

        It will not delete related zones. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_space_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this space.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_storey_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Delete a storey of a model  # noqa: E501

        Delete a storey of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_storey_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.delete_storey_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_storey_plan_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        storey_uuid,
        **kwargs
    ):
        """Delete the relation between a 2d model and a storey  # noqa: E501

        Delete the relation between a 2d model and a storey  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_storey_plan_deprecated(cloud_pk, id, ifc_pk, project_pk, storey_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this element.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            storey_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['storey_uuid'] = \
            storey_uuid
        return self.delete_storey_plan_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_system_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Delete a system of a model  # noqa: E501

        The IFC file will not be updated. The remaining systems are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_system_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.delete_system_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_zone_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Delete a zone of a model  # noqa: E501

        The IFC file will not be updated. The remaining zones are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_zone_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this zone.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_zone_deprecated_endpoint.call_with_http_info(**kwargs)

    def delete_zone_space_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        zone_pk,
        **kwargs
    ):
        """Delete the relation between a space and a zone  # noqa: E501

        Delete the relation between a space and a zone. The IFC file will not be updated. The remaining spaces are available in API and will be available when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_zone_space_deprecated(cloud_pk, id, ifc_pk, project_pk, zone_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this space.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            zone_pk (int): A unique integer value identifying this zone.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['zone_pk'] = \
            zone_pk
        return self.delete_zone_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def export_ifc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        ifc_export_request,
        **kwargs
    ):
        """Export IFC  # noqa: E501

        Only works for IFC files. Export IFC as requested in parameters. When the export is finished, a new IFC file with will be created in the same folder than the original IFC. You can query the folder or subscribe to the new document webhook to retrieve the result  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_ifc_deprecated(cloud_pk, id, project_pk, ifc_export_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):
            ifc_export_request (IfcExportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['ifc_export_request'] = \
            ifc_export_request
        return self.export_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def full_update_element_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        element_request,
        **kwargs
    ):
        """Update all fields of an element  # noqa: E501

        Update all fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.full_update_element_deprecated(cloud_pk, ifc_pk, project_pk, uuid, element_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):
            element_request (ElementRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Element
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        kwargs['element_request'] = \
            element_request
        return self.full_update_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_access_token_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        token,
        **kwargs
    ):
        """Retrieve one token created for this model  # noqa: E501

        DEPECRATED: Use ProjectAccessToken instead  Required scopes: ifc:token_manage, model:token_manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_access_token_deprecated(cloud_pk, ifc_pk, project_pk, token, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            IfcAccessToken
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['token'] = \
            token
        return self.get_access_token_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_access_tokens_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all tokens created for this model  # noqa: E501

        DEPECRATED: Use ProjectAccessToken instead  Required scopes: ifc:token_manage, model:token_manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_access_tokens_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [IfcAccessToken]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_access_tokens_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_building_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Retrieve a building of a model  # noqa: E501

        Retrieve a building of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_building_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Building
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.get_building_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_building_plan_positioning_deprecated(
        self,
        building_uuid,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve the postioning of the plan in the building  # noqa: E501

        Retrieve the postioning of the plan in the building  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_building_plan_positioning_deprecated(building_uuid, cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            building_uuid (str):
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this element.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PositioningPlan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['building_uuid'] = \
            building_uuid
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_building_plan_positioning_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_buildings_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all buildings of a model  # noqa: E501

        Retrieve all buildings of a model.  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_buildings_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Building]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_buildings_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_classifications_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all classifications of an element  # noqa: E501

        Retrieve all classifications of an element  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_classifications_of_element_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Classification]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_classifications_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_documents_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all documents of an element  # noqa: E501

        Retrieve all documents of an element  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_documents_of_element_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Document]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_documents_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Retrieve an element of a model  # noqa: E501

        Retrieve an element of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Element
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.get_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_linked_documents_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all documents linked to any element  # noqa: E501

        Retrieve all documents linked to any element with the list of uuids  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_linked_documents_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            classification (str): [optional]
            classification__notation (str): [optional]
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [DocumentWithElementList]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_element_linked_documents_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_set_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a PropertySet of an element  # noqa: E501

        Retrieve a PropertySet of an element  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_set_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this property set.
            ifc_pk (int):
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertySet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_element_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_set_properties_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        propertyset_pk,
        **kwargs
    ):
        """Retrieve all Properties of a PropertySet  # noqa: E501

        Retrieve all Properties of a PropertySet  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_set_properties_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ModelProperty]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.get_element_property_set_properties_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_set_property_definition_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        property_pk,
        propertyset_pk,
        **kwargs
    ):
        """Retrieve a Definition of a Property  # noqa: E501

        Retrieve a Definition of a Property  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_set_property_definition_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, property_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this property definition.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertyDefinition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.get_element_property_set_property_definition_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_set_property_definition_unit_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        property_pk,
        propertydefinition_pk,
        propertyset_pk,
        **kwargs
    ):
        """Retrieve a Unit of a Definition  # noqa: E501

        Retrieve a Unit of a Definition  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_set_property_definition_unit_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, property_pk, propertydefinition_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this unit.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertydefinition_pk (int): A unique integer value identifying this property definition.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Unit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertydefinition_pk'] = \
            propertydefinition_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.get_element_property_set_property_definition_unit_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_set_property_definition_units_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        property_pk,
        propertydefinition_pk,
        propertyset_pk,
        **kwargs
    ):
        """Retrieve all Units of a Definition  # noqa: E501

        Retrieve all Units of a Definition  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_set_property_definition_units_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, property_pk, propertydefinition_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertydefinition_pk (int): A unique integer value identifying this property definition.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Unit]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertydefinition_pk'] = \
            propertydefinition_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.get_element_property_set_property_definition_units_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_set_property_definitions_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        property_pk,
        propertyset_pk,
        **kwargs
    ):
        """Retrieve all Definitions of a PropertySet  # noqa: E501

        Retrieve all Definitions of a PropertySet  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_set_property_definitions_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, property_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PropertyDefinition]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.get_element_property_set_property_definitions_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_set_property_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        propertyset_pk,
        **kwargs
    ):
        """Retrieve a Property of a PropertySet  # noqa: E501

        Retrieve a Property of a PropertySet  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_set_property_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this property.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ModelProperty
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.get_element_property_set_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_element_property_sets_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all PropertySets of an element  # noqa: E501

        Retrieve all PropertySets of an element  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_element_property_sets_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int):
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PropertySet]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_element_property_sets_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_elements_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all elements of a model  # noqa: E501

        Retrieve all elements of a model. If not filtered, the json may be very large. To efficently retrieve all elements and their data, see getRawElements  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_elements_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            classification (str): [optional]
            classification__notation (str): [optional]
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Element]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_elements_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_elements_from_classification_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        model_classification_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all elements with the classification  # noqa: E501

        Retrieve all elements with the classification  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_elements_from_classification_deprecated(cloud_pk, ifc_pk, model_classification_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int): A unique integer value identifying this model.
            model_classification_pk (int): A unique integer value identifying this classification.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Element]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['model_classification_pk'] = \
            model_classification_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_elements_from_classification_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_classifications_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all classifications in a model  # noqa: E501

        Retrieve all classifications in a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_classifications_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int):
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Classification]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_classifications_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve one model  # noqa: E501

        Retrieve one model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Model
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_material_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a material of a model  # noqa: E501

        Retrieve a material of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_material_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this material.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Material
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_material_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_materials_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all materials of a model  # noqa: E501

        Retrieve all materials of a model.  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_materials_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Material]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_materials_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_properties_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all Properties of a model  # noqa: E501

        Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_properties_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ModelProperty]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_properties_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_property_definition_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a PropertyDefinition of a model  # noqa: E501

        Retrieve a PropertyDefinition of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_property_definition_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property definition.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertyDefinition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_property_definition_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_property_definitions_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all PropertyDefinitions of a model  # noqa: E501

        Retrieve all PropertyDefinitions of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_property_definitions_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PropertyDefinition]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_property_definitions_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_property_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a Property of a model  # noqa: E501

        Retrieve a Property of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_property_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ModelProperty
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_unit_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a Unit of a model  # noqa: E501

        Retrieve a Unit of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_unit_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this unit.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Unit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_unit_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifc_units_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all Units of a model  # noqa: E501

        Retrieve all Units of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifc_units_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Unit]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifc_units_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_ifcs_deprecated(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all models  # noqa: E501

        Retrieve all models. The field `type` allows you to discriminate which kind of model it is.  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ifcs_deprecated(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):

        Keyword Args:
            source (str): * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED. [optional]
            status ([str]): * `C` - completed * `D` - deleted * `P` - pending * `W` - waiting * `I` - in process * `E` - errored * `X` - won't fix. [optional]
            type ([str]): * `IFC` - IFC * `DWG` - DWG * `DXF` - DXF * `GLTF` - GLTF * `PDF` - PDF * `JPEG` - JPEG * `PNG` - PNG * `OBJ` - OBJ * `POINT_CLOUD` - POINT_CLOUD * `METABUILDING` - METABUILDING. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Model]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_ifcs_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_layer_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a layer of a model  # noqa: E501

        Retrieve a layer of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_layer_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this layer.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Layer
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_layer_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_layers_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all layers of a model  # noqa: E501

        Retrieve all layers of a model.  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_layers_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Layer]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_layers_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_material_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a material of a model  # noqa: E501

        Retrieve a material of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_material_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this material.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Material
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_material_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_materials_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all materials of a model  # noqa: E501

        Retrieve all materials of a model.  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_materials_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Material]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_materials_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_processor_handler_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a processor handler  # noqa: E501

        Retrieve a processor handler  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_processor_handler_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this processor handler.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorHandler
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_processor_handler_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_processor_handlers_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Get all processor handlers  # noqa: E501

        Get all processor handlers  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_processor_handlers_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ProcessorHandler]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_processor_handlers_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_property_set_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve a PropertySet of a model  # noqa: E501

        Retrieve a PropertySet of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_property_set_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property set.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertySet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_property_sets_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all PropertySets of a model  # noqa: E501

        Retrieve all PropertySets of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_property_sets_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [PropertySet]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_property_sets_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_raw_elements_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all elements in a optimized format  # noqa: E501

        Instead of a nested representation, this route respond with a flat structure and indices pointing to related object. The IFC file will not be updated. The created elements will be accessible over the API and when exporting an IFC file. Returns elements, property_sets, properties, definitions and units in a JSON optimized structure  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_raw_elements_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RawElements
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_raw_elements_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_simple_element_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Retrieve an element of a model with a simple value representation  # noqa: E501

        Retrieve an element of a model with a simple value representation  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_simple_element_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SimpleElement
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.get_simple_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_simple_elements_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all elements of a model with a simple value representation  # noqa: E501

        Retrieve all elements of a model with a simple value representation  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_simple_elements_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SimpleElement
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_simple_elements_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_space_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve one space of the model  # noqa: E501

        Retrieve one space of the model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_space_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this space.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Space
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_spaces_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all spaces of the model  # noqa: E501

        Retrieve all spaces of the model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_spaces_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Space]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_spaces_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_storey_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Retrieve a storey of a model  # noqa: E501

        Retrieve a storey of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_storey_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Storey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.get_storey_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_storey_plan_positioning_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        storey_uuid,
        **kwargs
    ):
        """Retrieve the postioning of the plan in the storey  # noqa: E501

        Retrieve the postioning of the plan in the storey  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_storey_plan_positioning_deprecated(cloud_pk, id, ifc_pk, project_pk, storey_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this element.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            storey_uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PositioningPlan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['storey_uuid'] = \
            storey_uuid
        return self.get_storey_plan_positioning_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_storeys_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all storeys of a model  # noqa: E501

        Retrieve all storeys of a model.  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_storeys_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Storey]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_storeys_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_system_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Retrieve a system of a model  # noqa: E501

        Retrieve a system of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            System
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.get_system_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_systems_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all systems of a model  # noqa: E501

        Retrieve all systems of a model.  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_systems_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [System]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_systems_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_tileset_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve the tileset of the model  # noqa: E501

        This is only availble if the model is a POINT_CLOUD  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tileset_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            tile_format (str): [optional] if omitted the server will use the default value of "pnts"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_tileset_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_zone_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve one zone of a model  # noqa: E501

        Retrieve one zone of a model  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_zone_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this zone.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Zone
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_zone_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_zone_space_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        zone_pk,
        **kwargs
    ):
        """Retrieve one space of a zone  # noqa: E501

        Retrieve one space of a zone  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_zone_space_deprecated(cloud_pk, id, ifc_pk, project_pk, zone_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this space.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            zone_pk (int): A unique integer value identifying this zone.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ZoneSpace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['zone_pk'] = \
            zone_pk
        return self.get_zone_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_zone_spaces_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        zone_pk,
        **kwargs
    ):
        """Retrieve all spaces of a zone  # noqa: E501

        Retrieve all spaces of a zone  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_zone_spaces_deprecated(cloud_pk, ifc_pk, project_pk, zone_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            zone_pk (int): A unique integer value identifying this zone.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ZoneSpace]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['zone_pk'] = \
            zone_pk
        return self.get_zone_spaces_deprecated_endpoint.call_with_http_info(**kwargs)

    def get_zones_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve zones of a model  # noqa: E501

        Retrieve parent zones of a model. Children zones we'll be in the 'zones' field  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_zones_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            color (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Zone]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_zones_deprecated_endpoint.call_with_http_info(**kwargs)

    def link_documents_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Link one or many documents to an element  # noqa: E501

         Bulk relation create available. You can either post an id or a list of ids. Is you post a list, the response will be a list (in the same order) of created relation or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors   Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.link_documents_of_element_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Document]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.link_documents_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def list_classification_element_relations_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """List all associations between classifications and elements  # noqa: E501

        List all associations between classifications and elements  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_classification_element_relations_deprecated(cloud_pk, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ElementClassificationRelation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.list_classification_element_relations_deprecated_endpoint.call_with_http_info(**kwargs)

    def merge_ifcs_deprecated(
        self,
        cloud_pk,
        project_pk,
        ifc_merge_request,
        **kwargs
    ):
        """Merge IFC files  # noqa: E501

        Only works for IFC files. Merge IFC files. The merged IFC file will be put in the same folder that the first IFC of the list  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.merge_ifcs_deprecated(cloud_pk, project_pk, ifc_merge_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):
            ifc_merge_request (IfcMergeRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['ifc_merge_request'] = \
            ifc_merge_request
        return self.merge_ifcs_deprecated_endpoint.call_with_http_info(**kwargs)

    def optimize_ifc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Optimize the IFC  # noqa: E501

        Only works for IFC files. Optimize the IFC. A new optimized IFC file will be put in the same folder that the original IFC  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.optimize_ifc_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            ifc_optimize_request (IfcOptimizeRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.optimize_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_all_element_property_set_deprecated(
        self,
        cloud_pk,
        element_uuid,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Remove all property sets from element  # noqa: E501

        Remove all property sets from element. Property Sets will not be deleted, just detached from element  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_all_element_property_set_deprecated(cloud_pk, element_uuid, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            ifc_pk (int):
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.remove_all_element_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_classification_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Remove a classification from an element  # noqa: E501

        The classification will not be deleted  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_classification_of_element_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this classification.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.remove_classification_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_document_of_element_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Remove a documents from an element  # noqa: E501

        The document will not be deleted  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_document_of_element_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this document.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.remove_document_of_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_element_property_set_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Remove a PropertySet from an element  # noqa: E501

        Delete the relation between the element and the property set. Does not delete any object  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_element_property_set_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this property set.
            ifc_pk (int):
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.remove_element_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_element_property_set_property_definition_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        property_pk,
        propertyset_pk,
        **kwargs
    ):
        """Delete a Definition to a Property  # noqa: E501

        Delete a Definition to a Property  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_element_property_set_property_definition_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, property_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this property definition.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.remove_element_property_set_property_definition_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_element_property_set_property_definition_unit_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        property_pk,
        propertydefinition_pk,
        propertyset_pk,
        **kwargs
    ):
        """Remove a Unit from a Definition  # noqa: E501

        Remove a Unit from a Definition  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_element_property_set_property_definition_unit_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, property_pk, propertydefinition_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this unit.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            property_pk (int): A unique integer value identifying this property.
            propertydefinition_pk (int): A unique integer value identifying this property definition.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['property_pk'] = \
            property_pk
        kwargs['propertydefinition_pk'] = \
            propertydefinition_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.remove_element_property_set_property_definition_unit_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_element_property_set_property_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        propertyset_pk,
        **kwargs
    ):
        """Remove a property from a PropertySet  # noqa: E501

        Remove a property from a PropertySet  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_element_property_set_property_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this property.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.remove_element_property_set_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def remove_elements_from_classification_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        model_classification_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Remove the classification from all elements  # noqa: E501

        Remove the classification from all elements. No element nor classification will be deleted  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_elements_from_classification_deprecated(cloud_pk, ifc_pk, model_classification_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            ifc_pk (int): A unique integer value identifying this model.
            model_classification_pk (int): A unique integer value identifying this classification.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['model_classification_pk'] = \
            model_classification_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.remove_elements_from_classification_deprecated_endpoint.call_with_http_info(**kwargs)

    def reprocess_ifc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Reprocess Model file  # noqa: E501

        Reprocess the model. All data that are not in the original model files will be lost  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reprocess_ifc_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.reprocess_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_access_token_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        token,
        **kwargs
    ):
        """Update some fields of a token  # noqa: E501

        DEPECRATED: Use ProjectAccessToken instead  Required scopes: ifc:token_manage, model:token_manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_access_token_deprecated(cloud_pk, ifc_pk, project_pk, token, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            token (str):

        Keyword Args:
            patched_ifc_access_token_request (PatchedIfcAccessTokenRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            IfcAccessToken
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['token'] = \
            token
        return self.update_access_token_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_building_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Update some fields of a building  # noqa: E501

        Update some fields of a building  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_building_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            patched_storey_building_request (PatchedStoreyBuildingRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Building
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.update_building_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_building_plan_positioning_deprecated(
        self,
        building_uuid,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update the postioning of the plan in the building  # noqa: E501

        Update the postioning of the plan in the building  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_building_plan_positioning_deprecated(building_uuid, cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            building_uuid (str):
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this element.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_positioning_plan_request (PatchedPositioningPlanRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PositioningPlan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['building_uuid'] = \
            building_uuid
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_building_plan_positioning_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_element_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Update some fields of an element  # noqa: E501

        Update some fields of an element. The IFC file will not be updated. The created element will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_element_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            patched_element_request (PatchedElementRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Element
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.update_element_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_element_property_set_property_deprecated(
        self,
        cloud_pk,
        element_uuid,
        id,
        ifc_pk,
        project_pk,
        propertyset_pk,
        **kwargs
    ):
        """Update a property from an element  # noqa: E501

        Update a property value from an element. If the element is the only one to have this property, the property will be update in place. If many elements share this property, a new property will be created to replace the property for this element. Keeping the property for all other elements. If you want to update the property of all elements, see updateIfcProperty  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_element_property_set_property_deprecated(cloud_pk, element_uuid, id, ifc_pk, project_pk, propertyset_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            element_uuid (str):
            id (int): A unique integer value identifying this property.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            propertyset_pk (int): A unique integer value identifying this property set.

        Keyword Args:
            patched_property_request (PatchedPropertyRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ModelProperty
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['element_uuid'] = \
            element_uuid
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['propertyset_pk'] = \
            propertyset_pk
        return self.update_element_property_set_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_ifc_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of a model  # noqa: E501

        Update some fields of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ifc_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            patched_model_request (PatchedModelRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Model
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_ifc_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_ifc_files_deprecated(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update models file (gltf, svg, structure, etc)  # noqa: E501

        This route does not accept JSON, only files as x-www-form-urlencoded  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ifc_files_deprecated(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this model.
            project_pk (int):

        Keyword Args:
            structure_file (file_type, none_type): [optional]
            systems_file (file_type, none_type): [optional]
            map_file (file_type, none_type): [optional]
            gltf_file (file_type, none_type): [optional]
            preview_file (file_type, none_type): [optional]
            xkt_file (file_type, none_type): DEPRECATED. xkt file url is now in xkt_files field with its version number. [optional]
            binary_2d_file (file_type, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ModelFiles
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_ifc_files_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_ifc_property_definition_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of many PropertyDefinitions of a model  # noqa: E501

        Update some fields of many PropertyDefinitions of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ifc_property_definition_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property definition.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_property_definition_request (PatchedPropertyDefinitionRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertyDefinition
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_ifc_property_definition_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_ifc_property_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a Property  # noqa: E501

        Update some fields of a Property  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ifc_property_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_property_request (PatchedPropertyRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ModelProperty
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_ifc_property_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_ifc_unit_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a Unit of a model  # noqa: E501

        Update some fields of a Unit of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_ifc_unit_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this unit.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_unit_request (PatchedUnitRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Unit
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_ifc_unit_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_layer_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a layer  # noqa: E501

        Update some fields of a layer. The IFC file will not be updated. The created layer will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_layer_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this layer.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_layer_request (PatchedLayerRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Layer
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_layer_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_order_building_plan_deprecated(
        self,
        building_uuid,
        cloud_pk,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Update order of all plan of a building  # noqa: E501

        Update order of all plan of a building  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_order_building_plan_deprecated(building_uuid, cloud_pk, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            building_uuid (str):
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Storey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['building_uuid'] = \
            building_uuid
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.update_order_building_plan_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_order_storey_plan_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        storey_uuid,
        request_body,
        **kwargs
    ):
        """Update order of all plan of a storey  # noqa: E501

        Update order of all plan of a storey  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_order_storey_plan_deprecated(cloud_pk, ifc_pk, project_pk, storey_uuid, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            storey_uuid (str):
            request_body ([int]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Storey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['storey_uuid'] = \
            storey_uuid
        kwargs['request_body'] = \
            request_body
        return self.update_order_storey_plan_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_order_storeys_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        request_body,
        **kwargs
    ):
        """Update order of all storey of a model  # noqa: E501

        Update order of all storey of a model  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_order_storeys_deprecated(cloud_pk, ifc_pk, project_pk, request_body, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            request_body ([str]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Storey]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['request_body'] = \
            request_body
        return self.update_order_storeys_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_processor_handler_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update the status of a processor handler  # noqa: E501

        Update the status of a processor handler  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_processor_handler_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this processor handler.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_processor_handler_request (PatchedProcessorHandlerRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProcessorHandler
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_processor_handler_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_property_set_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a PropertySet  # noqa: E501

        Update some fields of a PropertySet  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_property_set_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this property set.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_property_set_request (PatchedPropertySetRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PropertySet
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_property_set_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_space_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a space  # noqa: E501

        Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_space_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this space.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_space_request (PatchedSpaceRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Space
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_space_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_storey_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Update some fields of a storey  # noqa: E501

        Update some fields of a storey  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_storey_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            patched_storey_building_request (PatchedStoreyBuildingRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Storey
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.update_storey_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_storey_plan_positioning_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        storey_uuid,
        **kwargs
    ):
        """Update the postioning of the plan in the storey  # noqa: E501

        Update the postioning of the plan in the storey  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_storey_plan_positioning_deprecated(cloud_pk, id, ifc_pk, project_pk, storey_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this element.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            storey_uuid (str):

        Keyword Args:
            patched_positioning_plan_request (PatchedPositioningPlanRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PositioningPlan
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['storey_uuid'] = \
            storey_uuid
        return self.update_storey_plan_positioning_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_system_deprecated(
        self,
        cloud_pk,
        ifc_pk,
        project_pk,
        uuid,
        **kwargs
    ):
        """Update some fields of a system  # noqa: E501

        Update some fields of a system. The IFC file will not be updated. The created system will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_system_deprecated(cloud_pk, ifc_pk, project_pk, uuid, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            uuid (str):

        Keyword Args:
            patched_system_request (PatchedSystemRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            System
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['uuid'] = \
            uuid
        return self.update_system_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_zone_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        **kwargs
    ):
        """Update some fields of a zone  # noqa: E501

        Update some fields of a zone. The IFC file will not be updated. The created zone will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_zone_deprecated(cloud_pk, id, ifc_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this zone.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_zone_request (PatchedZoneRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Zone
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        return self.update_zone_deprecated_endpoint.call_with_http_info(**kwargs)

    def update_zone_space_deprecated(
        self,
        cloud_pk,
        id,
        ifc_pk,
        project_pk,
        zone_pk,
        **kwargs
    ):
        """Update some fields of a space  # noqa: E501

        Update some fields of a space. The IFC file will not be updated. The created space will be accessible over the API and when exporting an IFC file  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_zone_space_deprecated(cloud_pk, id, ifc_pk, project_pk, zone_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this space.
            ifc_pk (int): A unique integer value identifying this model.
            project_pk (int): A unique integer value identifying this project.
            zone_pk (int): A unique integer value identifying this zone.

        Keyword Args:
            patched_zone_space_request (PatchedZoneSpaceRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ZoneSpace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['ifc_pk'] = \
            ifc_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['zone_pk'] = \
            zone_pk
        return self.update_zone_space_deprecated_endpoint.call_with_http_info(**kwargs)

