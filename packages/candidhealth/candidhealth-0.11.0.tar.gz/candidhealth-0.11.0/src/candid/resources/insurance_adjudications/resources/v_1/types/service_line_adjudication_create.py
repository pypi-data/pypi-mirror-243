# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime
from .....service_lines.resources.v_2.types.denial_reason_content import DenialReasonContent
from .claim_adjustment_reason_code import ClaimAdjustmentReasonCode
from .remittance_advice_remark_code import RemittanceAdviceRemarkCode


class ServiceLineAdjudicationCreate(pydantic.BaseModel):
    denial_reason: typing.Optional[DenialReasonContent] = pydantic.Field(
        description="Will be treated as a denial if present"
    )
    insurance_allowed_amount_cents: typing.Optional[int]
    insurance_paid_amount_cents: typing.Optional[int]
    deductible_amount_cents: typing.Optional[int]
    coinsurance_amount_cents: typing.Optional[int]
    copay_amount_cents: typing.Optional[int]
    carcs: typing.List[ClaimAdjustmentReasonCode]
    rarcs: typing.List[RemittanceAdviceRemarkCode]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
