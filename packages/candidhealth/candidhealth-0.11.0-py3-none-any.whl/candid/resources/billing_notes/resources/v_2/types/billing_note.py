# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime
from .....commons.types.encounter_id import EncounterId
from .billing_note_base import BillingNoteBase
from .billing_note_id import BillingNoteId


class BillingNote(BillingNoteBase):
    billing_note_id: BillingNoteId
    encounter_id: EncounterId
    created_at: dt.datetime = pydantic.Field(
        description=(
            "An [RFC 3339, section 5.6 datetime](https://ijmacd.github.io/rfc3339-iso8601/).\n"
            "For example, 2017-07-21T17:32:28Z.\n"
        )
    )
    author_auth_0_id: typing.Optional[str] = pydantic.Field(alias="author_auth0_id")
    author_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
