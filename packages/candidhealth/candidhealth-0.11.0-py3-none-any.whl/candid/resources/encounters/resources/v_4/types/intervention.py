# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ......core.datetime_utils import serialize_datetime
from .intervention_category import InterventionCategory
from .lab import Lab
from .medication import Medication


class Intervention(pydantic.BaseModel):
    name: str
    category: InterventionCategory
    description: typing.Optional[str] = pydantic.Field(
        description=("\"Examples: 'Birth Control LAC', 'Tracking', 'Stress Management', 'Supplement', 'Labs'\"\n")
    )
    medication: typing.Optional[Medication] = pydantic.Field(description="Required when `type` is `allopathic`.")
    labs: typing.Optional[typing.List[Lab]] = pydantic.Field(description="Required when `type` is `tests`.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
