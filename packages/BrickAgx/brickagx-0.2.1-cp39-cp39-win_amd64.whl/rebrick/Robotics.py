# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RoboticsSwig
else:
    import _RoboticsSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _RoboticsSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RoboticsSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RoboticsSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RoboticsSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _RoboticsSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _RoboticsSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RoboticsSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RoboticsSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RoboticsSwig:
_RoboticsSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Physics3D
import rebrick.Math
import rebrick.Physics
import rebrick.Physics1D
import rebrick.DriveTrain
import rebrick.Simulation
class Robotics_Joints_FlexibleTorqueJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type j) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        __setslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type j, Robotics_Joints_FlexibleTorqueJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        __delitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleTorqueJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > > > const &

        __setitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleTorqueJoint_Vector self, Robotics_Joints_FlexibleTorqueJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleTorqueJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleTorqueJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator

        erase(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> Robotics_Joints_FlexibleTorqueJoint_Vector
        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self, Robotics_Joints_FlexibleTorqueJoint_Vector other) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > > const &

        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type size) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type

        __init__(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & value) -> Robotics_Joints_FlexibleTorqueJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleTorqueJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type

        resize(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        insert(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleTorqueJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleTorqueJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleTorqueJoint_Vector

# Register Robotics_Joints_FlexibleTorqueJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleTorqueJoint_Vector_swigregister(Robotics_Joints_FlexibleTorqueJoint_Vector)

class Robotics_Joints_FlexibleTorqueJointData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type j) -> Robotics_Joints_FlexibleTorqueJointData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type

        __setslice__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type j, Robotics_Joints_FlexibleTorqueJointData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type

        __delitem__(Robotics_Joints_FlexibleTorqueJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleTorqueJointData_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleTorqueJointData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleTorqueJointData_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleTorqueJointData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > > > const &

        __setitem__(Robotics_Joints_FlexibleTorqueJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleTorqueJointData_Vector self, Robotics_Joints_FlexibleTorqueJointData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleTorqueJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleTorqueJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator

        erase(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> Robotics_Joints_FlexibleTorqueJointData_Vector
        __init__(Robotics_Joints_FlexibleTorqueJointData_Vector self, Robotics_Joints_FlexibleTorqueJointData_Vector other) -> Robotics_Joints_FlexibleTorqueJointData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > > const &

        __init__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type size) -> Robotics_Joints_FlexibleTorqueJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type

        __init__(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & value) -> Robotics_Joints_FlexibleTorqueJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleTorqueJointData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type

        resize(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        insert(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleTorqueJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleTorqueJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleTorqueJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleTorqueJointData_Vector

# Register Robotics_Joints_FlexibleTorqueJointData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleTorqueJointData_Vector_swigregister(Robotics_Joints_FlexibleTorqueJointData_Vector)

class Robotics_Joints_FlexibleVelocityJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type j) -> Robotics_Joints_FlexibleVelocityJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type

        __setslice__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type j, Robotics_Joints_FlexibleVelocityJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type

        __delitem__(Robotics_Joints_FlexibleVelocityJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleVelocityJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleVelocityJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleVelocityJoint_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleVelocityJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > > > const &

        __setitem__(Robotics_Joints_FlexibleVelocityJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleVelocityJoint_Vector self, Robotics_Joints_FlexibleVelocityJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleVelocityJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleVelocityJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator

        erase(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> Robotics_Joints_FlexibleVelocityJoint_Vector
        __init__(Robotics_Joints_FlexibleVelocityJoint_Vector self, Robotics_Joints_FlexibleVelocityJoint_Vector other) -> Robotics_Joints_FlexibleVelocityJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > > const &

        __init__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type size) -> Robotics_Joints_FlexibleVelocityJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type

        __init__(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & value) -> Robotics_Joints_FlexibleVelocityJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleVelocityJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type

        resize(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        insert(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleVelocityJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleVelocityJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleVelocityJoint_Vector

# Register Robotics_Joints_FlexibleVelocityJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleVelocityJoint_Vector_swigregister(Robotics_Joints_FlexibleVelocityJoint_Vector)

class Robotics_Joints_FlexibleVelocityJointData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type j) -> Robotics_Joints_FlexibleVelocityJointData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type

        __setslice__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type j, Robotics_Joints_FlexibleVelocityJointData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type

        __delitem__(Robotics_Joints_FlexibleVelocityJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_FlexibleVelocityJointData_Vector self, PySliceObject * slice) -> Robotics_Joints_FlexibleVelocityJointData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_FlexibleVelocityJointData_Vector self, PySliceObject * slice, Robotics_Joints_FlexibleVelocityJointData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData >,std::allocator< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > > > const &

        __setitem__(Robotics_Joints_FlexibleVelocityJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_FlexibleVelocityJointData_Vector self, Robotics_Joints_FlexibleVelocityJointData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > > &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_FlexibleVelocityJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_FlexibleVelocityJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator

        erase(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> Robotics_Joints_FlexibleVelocityJointData_Vector
        __init__(Robotics_Joints_FlexibleVelocityJointData_Vector self, Robotics_Joints_FlexibleVelocityJointData_Vector other) -> Robotics_Joints_FlexibleVelocityJointData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > > const &

        __init__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type size) -> Robotics_Joints_FlexibleVelocityJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type

        __init__(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & value) -> Robotics_Joints_FlexibleVelocityJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_FlexibleVelocityJointData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type

        resize(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        insert(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_FlexibleVelocityJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_FlexibleVelocityJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::FlexibleVelocityJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_FlexibleVelocityJointData_Vector

# Register Robotics_Joints_FlexibleVelocityJointData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_FlexibleVelocityJointData_Vector_swigregister(Robotics_Joints_FlexibleVelocityJointData_Vector)

class Robotics_Joints_HingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_HingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type j) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type

        __setslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type j, Robotics_Joints_HingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint >,std::allocator< std::shared_ptr< Robotics::Joints::HingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type

        __delitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice, Robotics_Joints_HingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint >,std::allocator< std::shared_ptr< Robotics::Joints::HingeJoint > > > const &

        __setitem__(Robotics_Joints_HingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_HingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_HingeJoint_Vector self, Robotics_Joints_HingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_HingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_HingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator

        erase(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_HingeJoint_Vector self) -> Robotics_Joints_HingeJoint_Vector
        __init__(Robotics_Joints_HingeJoint_Vector self, Robotics_Joints_HingeJoint_Vector other) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > > const &

        __init__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type size) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type

        __init__(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & value) -> Robotics_Joints_HingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_HingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type

        resize(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        insert(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_HingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_HingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_HingeJoint_Vector

# Register Robotics_Joints_HingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_HingeJoint_Vector_swigregister(Robotics_Joints_HingeJoint_Vector)

class Robotics_Joints_HingeJointData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_HingeJointData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_HingeJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_HingeJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type j) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type

        __setslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type j, Robotics_Joints_HingeJointData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData >,std::allocator< std::shared_ptr< Robotics::Joints::HingeJointData > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type

        __delitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice, Robotics_Joints_HingeJointData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData >,std::allocator< std::shared_ptr< Robotics::Joints::HingeJointData > > > const &

        __setitem__(Robotics_Joints_HingeJointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_HingeJointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_HingeJointData_Vector self, Robotics_Joints_HingeJointData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_HingeJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_HingeJointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator

        erase(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_HingeJointData_Vector self) -> Robotics_Joints_HingeJointData_Vector
        __init__(Robotics_Joints_HingeJointData_Vector self, Robotics_Joints_HingeJointData_Vector other) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > > const &

        __init__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type size) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type

        __init__(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & value) -> Robotics_Joints_HingeJointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_HingeJointData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type

        resize(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        insert(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_HingeJointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_HingeJointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_HingeJointData_Vector

# Register Robotics_Joints_HingeJointData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_HingeJointData_Vector_swigregister(Robotics_Joints_HingeJointData_Vector)

class Robotics_Joints_HingeJointPosition_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_HingeJointPosition_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_HingeJointPosition_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_HingeJointPosition_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type j) -> Robotics_Joints_HingeJointPosition_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type

        __setslice__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type j, Robotics_Joints_HingeJointPosition_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition >,std::allocator< std::shared_ptr< Robotics::Joints::HingeJointPosition > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type

        __delitem__(Robotics_Joints_HingeJointPosition_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_HingeJointPosition_Vector self, PySliceObject * slice) -> Robotics_Joints_HingeJointPosition_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_HingeJointPosition_Vector self, PySliceObject * slice, Robotics_Joints_HingeJointPosition_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition >,std::allocator< std::shared_ptr< Robotics::Joints::HingeJointPosition > > > const &

        __setitem__(Robotics_Joints_HingeJointPosition_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_HingeJointPosition_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_HingeJointPosition_Vector self, Robotics_Joints_HingeJointPosition_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > > &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_HingeJointPosition_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_HingeJointPosition_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator

        erase(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_HingeJointPosition_Vector self) -> Robotics_Joints_HingeJointPosition_Vector
        __init__(Robotics_Joints_HingeJointPosition_Vector self, Robotics_Joints_HingeJointPosition_Vector other) -> Robotics_Joints_HingeJointPosition_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > > const &

        __init__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type size) -> Robotics_Joints_HingeJointPosition_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type

        __init__(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & value) -> Robotics_Joints_HingeJointPosition_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_HingeJointPosition_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type

        resize(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        insert(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_HingeJointPosition_Vector self, std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_HingeJointPosition_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::HingeJointPosition > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_HingeJointPosition_Vector

# Register Robotics_Joints_HingeJointPosition_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_HingeJointPosition_Vector_swigregister(Robotics_Joints_HingeJointPosition_Vector)

class Robotics_Joints_Joint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::Joint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_Joint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type j) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type

        __setslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type j, Robotics_Joints_Joint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::Joint >,std::allocator< std::shared_ptr< Robotics::Joints::Joint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type

        __delitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice, Robotics_Joints_Joint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::Joint >,std::allocator< std::shared_ptr< Robotics::Joints::Joint > > > const &

        __setitem__(Robotics_Joints_Joint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_Joint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_Joint_Vector self, Robotics_Joints_Joint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::Joint > > &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_Joint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_Joint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator

        erase(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_Joint_Vector self) -> Robotics_Joints_Joint_Vector
        __init__(Robotics_Joints_Joint_Vector self, Robotics_Joints_Joint_Vector other) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::Joint > > const &

        __init__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type size) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type

        __init__(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & value) -> Robotics_Joints_Joint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_Joint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_Joint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type

        resize(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        insert(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_Joint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_Joint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::Joint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_Joint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_Joint_Vector

# Register Robotics_Joints_Joint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_Joint_Vector_swigregister(Robotics_Joints_Joint_Vector)

class Robotics_Joints_JointData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::JointData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_JointData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_JointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_JointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type j) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type

        __setslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type j, Robotics_Joints_JointData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::JointData >,std::allocator< std::shared_ptr< Robotics::Joints::JointData > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type

        __delitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice, Robotics_Joints_JointData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::JointData >,std::allocator< std::shared_ptr< Robotics::Joints::JointData > > > const &

        __setitem__(Robotics_Joints_JointData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_JointData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_JointData_Vector self, Robotics_Joints_JointData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::JointData > > &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_JointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_JointData_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator

        erase(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_JointData_Vector self) -> Robotics_Joints_JointData_Vector
        __init__(Robotics_Joints_JointData_Vector self, Robotics_Joints_JointData_Vector other) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::JointData > > const &

        __init__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type size) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type

        __init__(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & value) -> Robotics_Joints_JointData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_JointData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_JointData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type

        resize(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        insert(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_JointData_Vector self, std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_JointData_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::JointData > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_JointData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_JointData_Vector

# Register Robotics_Joints_JointData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_JointData_Vector_swigregister(Robotics_Joints_JointData_Vector)

class Robotics_Joints_PositionHingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_PositionHingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type j) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type

        __setslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type j, Robotics_Joints_PositionHingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint >,std::allocator< std::shared_ptr< Robotics::Joints::PositionHingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type

        __delitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice, Robotics_Joints_PositionHingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint >,std::allocator< std::shared_ptr< Robotics::Joints::PositionHingeJoint > > > const &

        __setitem__(Robotics_Joints_PositionHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_PositionHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_PositionHingeJoint_Vector self, Robotics_Joints_PositionHingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_PositionHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_PositionHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator

        erase(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_PositionHingeJoint_Vector self) -> Robotics_Joints_PositionHingeJoint_Vector
        __init__(Robotics_Joints_PositionHingeJoint_Vector self, Robotics_Joints_PositionHingeJoint_Vector other) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > > const &

        __init__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type size) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type

        __init__(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & value) -> Robotics_Joints_PositionHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_PositionHingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type

        resize(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        insert(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_PositionHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_PositionHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::PositionHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_PositionHingeJoint_Vector

# Register Robotics_Joints_PositionHingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_PositionHingeJoint_Vector_swigregister(Robotics_Joints_PositionHingeJoint_Vector)

class Robotics_Joints_VelocityHingeJoint_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Joints_VelocityHingeJoint_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Joints_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Joints_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type j) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type

        __setslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type j, Robotics_Joints_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint >,std::allocator< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > > > const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type

        __delitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice, Robotics_Joints_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint >,std::allocator< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > > > const &

        __setitem__(Robotics_Joints_VelocityHingeJoint_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type i, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Joints_VelocityHingeJoint_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Joints_VelocityHingeJoint_Vector self, Robotics_Joints_VelocityHingeJoint_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > > &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Joints_VelocityHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::allocator_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Joints_VelocityHingeJoint_Vector self)"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator

        erase(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator first, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Joints_VelocityHingeJoint_Vector self) -> Robotics_Joints_VelocityHingeJoint_Vector
        __init__(Robotics_Joints_VelocityHingeJoint_Vector self, Robotics_Joints_VelocityHingeJoint_Vector other) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > > const &

        __init__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type size) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type

        __init__(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type size, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & value) -> Robotics_Joints_VelocityHingeJoint_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Joints_VelocityHingeJoint_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_front(self)

    def back(self):
        r"""back(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type

        resize(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        insert(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator pos, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type n, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Joints_VelocityHingeJoint_Vector self, std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type

        """
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Joints_VelocityHingeJoint_Vector self) -> std::vector< std::shared_ptr< Robotics::Joints::VelocityHingeJoint > >::size_type"""
        return _RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Joints_VelocityHingeJoint_Vector

# Register Robotics_Joints_VelocityHingeJoint_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Joints_VelocityHingeJoint_Vector_swigregister(Robotics_Joints_VelocityHingeJoint_Vector)

class Robotics_Links_LinkData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Links::LinkData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_LinkData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_LinkData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_LinkData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type j) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type

        __setslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type j, Robotics_Links_LinkData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Links::LinkData >,std::allocator< std::shared_ptr< Robotics::Links::LinkData > > > const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type

        __delitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice, Robotics_Links_LinkData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Links::LinkData >,std::allocator< std::shared_ptr< Robotics::Links::LinkData > > > const &

        __setitem__(Robotics_Links_LinkData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_LinkData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_LinkData_Vector self, Robotics_Links_LinkData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Links::LinkData > > &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_LinkData_Vector self)"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_LinkData_Vector self)"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator

        erase(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator first, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_LinkData_Vector self) -> Robotics_Links_LinkData_Vector
        __init__(Robotics_Links_LinkData_Vector self, Robotics_Links_LinkData_Vector other) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Links::LinkData > > const &

        __init__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type size) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type

        __init__(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type size, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & value) -> Robotics_Links_LinkData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_LinkData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_LinkData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type

        resize(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        insert(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_LinkData_Vector self, std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_LinkData_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::LinkData > >::size_type"""
        return _RoboticsSwig.Robotics_Links_LinkData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_LinkData_Vector

# Register Robotics_Links_LinkData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_LinkData_Vector_swigregister(Robotics_Links_LinkData_Vector)

class Robotics_Links_RigidBoxLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_RigidBoxLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type j) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type

        __setslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type j, Robotics_Links_RigidBoxLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink >,std::allocator< std::shared_ptr< Robotics::Links::RigidBoxLink > > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type

        __delitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice, Robotics_Links_RigidBoxLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink >,std::allocator< std::shared_ptr< Robotics::Links::RigidBoxLink > > > const &

        __setitem__(Robotics_Links_RigidBoxLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_RigidBoxLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_RigidBoxLink_Vector self, Robotics_Links_RigidBoxLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_RigidBoxLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_RigidBoxLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator

        erase(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator first, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_RigidBoxLink_Vector self) -> Robotics_Links_RigidBoxLink_Vector
        __init__(Robotics_Links_RigidBoxLink_Vector self, Robotics_Links_RigidBoxLink_Vector other) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > > const &

        __init__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type size) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type

        __init__(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type size, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & value) -> Robotics_Links_RigidBoxLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidBoxLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type

        resize(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        insert(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_RigidBoxLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_RigidBoxLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidBoxLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidBoxLink_Vector

# Register Robotics_Links_RigidBoxLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidBoxLink_Vector_swigregister(Robotics_Links_RigidBoxLink_Vector)

class Robotics_Links_RigidLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Links::RigidLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_RigidLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type j) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type

        __setslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type j, Robotics_Links_RigidLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Links::RigidLink >,std::allocator< std::shared_ptr< Robotics::Links::RigidLink > > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type

        __delitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice, Robotics_Links_RigidLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Links::RigidLink >,std::allocator< std::shared_ptr< Robotics::Links::RigidLink > > > const &

        __setitem__(Robotics_Links_RigidLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_RigidLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_RigidLink_Vector self, Robotics_Links_RigidLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Links::RigidLink > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_RigidLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_RigidLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator

        erase(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator first, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_RigidLink_Vector self) -> Robotics_Links_RigidLink_Vector
        __init__(Robotics_Links_RigidLink_Vector self, Robotics_Links_RigidLink_Vector other) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Links::RigidLink > > const &

        __init__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type size) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type

        __init__(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type size, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & value) -> Robotics_Links_RigidLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_RigidLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type

        resize(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        insert(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_RigidLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_RigidLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidLink_Vector

# Register Robotics_Links_RigidLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidLink_Vector_swigregister(Robotics_Links_RigidLink_Vector)

class Robotics_Links_RigidObjLink_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Links_RigidObjLink_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Links_RigidObjLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Links_RigidObjLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type j) -> Robotics_Links_RigidObjLink_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type

        __setslice__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type j, Robotics_Links_RigidObjLink_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink >,std::allocator< std::shared_ptr< Robotics::Links::RigidObjLink > > > const &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type

        __delitem__(Robotics_Links_RigidObjLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Links_RigidObjLink_Vector self, PySliceObject * slice) -> Robotics_Links_RigidObjLink_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Links_RigidObjLink_Vector self, PySliceObject * slice, Robotics_Links_RigidObjLink_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink >,std::allocator< std::shared_ptr< Robotics::Links::RigidObjLink > > > const &

        __setitem__(Robotics_Links_RigidObjLink_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type i, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Links_RigidObjLink_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Links_RigidObjLink_Vector self, Robotics_Links_RigidObjLink_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > > &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Links_RigidObjLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::allocator_type"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Links_RigidObjLink_Vector self)"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator

        erase(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator first, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Links_RigidObjLink_Vector self) -> Robotics_Links_RigidObjLink_Vector
        __init__(Robotics_Links_RigidObjLink_Vector self, Robotics_Links_RigidObjLink_Vector other) -> Robotics_Links_RigidObjLink_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > > const &

        __init__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type size) -> Robotics_Links_RigidObjLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type

        __init__(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type size, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & value) -> Robotics_Links_RigidObjLink_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        """
        _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Links_RigidObjLink_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_front(self)

    def back(self):
        r"""back(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type

        resize(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        insert(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator pos, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type n, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Links_RigidObjLink_Vector self, std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type

        """
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Links_RigidObjLink_Vector self) -> std::vector< std::shared_ptr< Robotics::Links::RigidObjLink > >::size_type"""
        return _RoboticsSwig.Robotics_Links_RigidObjLink_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Links_RigidObjLink_Vector

# Register Robotics_Links_RigidObjLink_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Links_RigidObjLink_Vector_swigregister(Robotics_Links_RigidObjLink_Vector)

class Robotics_Robots_Robot_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Robots::Robot > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Robots_Robot_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Robots_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Robots_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type j) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type

        __setslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type j, Robotics_Robots_Robot_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Robots::Robot >,std::allocator< std::shared_ptr< Robotics::Robots::Robot > > > const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type

        __delitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice, Robotics_Robots_Robot_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Robots::Robot >,std::allocator< std::shared_ptr< Robotics::Robots::Robot > > > const &

        __setitem__(Robotics_Robots_Robot_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Robots_Robot_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Robots_Robot_Vector self, Robotics_Robots_Robot_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Robots::Robot > > &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Robots_Robot_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::allocator_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Robots_Robot_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator

        erase(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator first, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Robots_Robot_Vector self) -> Robotics_Robots_Robot_Vector
        __init__(Robotics_Robots_Robot_Vector self, Robotics_Robots_Robot_Vector other) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Robots::Robot > > const &

        __init__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type size) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type

        __init__(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type size, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & value) -> Robotics_Robots_Robot_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        """
        _RoboticsSwig.Robotics_Robots_Robot_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Robots_Robot_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_front(self)

    def back(self):
        r"""back(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type n, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type

        resize(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        insert(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type n, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Robots_Robot_Vector self, std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type

        """
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Robots_Robot_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::Robot > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_Robot_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_Robot_Vector

# Register Robotics_Robots_Robot_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_Robot_Vector_swigregister(Robotics_Robots_Robot_Vector)

class Robotics_Robots_SerialManipulatorData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Robots_SerialManipulatorData_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Robots_SerialManipulatorData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Robots_SerialManipulatorData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type j) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type

        __setslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type j, Robotics_Robots_SerialManipulatorData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData >,std::allocator< std::shared_ptr< Robotics::Robots::SerialManipulatorData > > > const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type

        __delitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice, Robotics_Robots_SerialManipulatorData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData >,std::allocator< std::shared_ptr< Robotics::Robots::SerialManipulatorData > > > const &

        __setitem__(Robotics_Robots_SerialManipulatorData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Robots_SerialManipulatorData_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Robots_SerialManipulatorData_Vector self, Robotics_Robots_SerialManipulatorData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > > &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Robots_SerialManipulatorData_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::allocator_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Robots_SerialManipulatorData_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator

        erase(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator first, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Robots_SerialManipulatorData_Vector self) -> Robotics_Robots_SerialManipulatorData_Vector
        __init__(Robotics_Robots_SerialManipulatorData_Vector self, Robotics_Robots_SerialManipulatorData_Vector other) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > > const &

        __init__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type size) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type

        __init__(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type size, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & value) -> Robotics_Robots_SerialManipulatorData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Robots_SerialManipulatorData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_front(self)

    def back(self):
        r"""back(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type n, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type

        resize(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        insert(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type n, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Robots_SerialManipulatorData_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type

        """
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Robots_SerialManipulatorData_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SerialManipulatorData > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_SerialManipulatorData_Vector

# Register Robotics_Robots_SerialManipulatorData_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_SerialManipulatorData_Vector_swigregister(Robotics_Robots_SerialManipulatorData_Vector)

class Robotics_Robots_SixAxisSerialManipulator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type j) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        __setslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type j, Robotics_Robots_SixAxisSerialManipulator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator >,std::allocator< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > > > const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        __delitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice, Robotics_Robots_SixAxisSerialManipulator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator >,std::allocator< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > > > const &

        __setitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type i, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Robots_SixAxisSerialManipulator_Vector self, Robotics_Robots_SixAxisSerialManipulator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > > &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Robots_SixAxisSerialManipulator_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::allocator_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Robots_SixAxisSerialManipulator_Vector self)"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator

        erase(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator first, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> Robotics_Robots_SixAxisSerialManipulator_Vector
        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self, Robotics_Robots_SixAxisSerialManipulator_Vector other) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > > const &

        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type size) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type

        __init__(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type size, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & value) -> Robotics_Robots_SixAxisSerialManipulator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Robots_SixAxisSerialManipulator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_front(self)

    def back(self):
        r"""back(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type n, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type

        resize(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        insert(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator pos, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type n, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Robots_SixAxisSerialManipulator_Vector self, std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type

        """
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Robots_SixAxisSerialManipulator_Vector self) -> std::vector< std::shared_ptr< Robotics::Robots::SixAxisSerialManipulator > >::size_type"""
        return _RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Robots_SixAxisSerialManipulator_Vector

# Register Robotics_Robots_SixAxisSerialManipulator_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Robots_SixAxisSerialManipulator_Vector_swigregister(Robotics_Robots_SixAxisSerialManipulator_Vector)

class Robotics_Signals_RobotInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Signals::RobotInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotInput_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type j) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type

        __setslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type j, Robotics_Signals_RobotInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotInput >,std::allocator< std::shared_ptr< Robotics::Signals::RobotInput > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type

        __delitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice, Robotics_Signals_RobotInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotInput >,std::allocator< std::shared_ptr< Robotics::Signals::RobotInput > > > const &

        __setitem__(Robotics_Signals_RobotInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotInput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotInput_Vector self, Robotics_Signals_RobotInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotInput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotInput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator

        erase(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator first, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotInput_Vector self) -> Robotics_Signals_RobotInput_Vector
        __init__(Robotics_Signals_RobotInput_Vector self, Robotics_Signals_RobotInput_Vector other) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > > const &

        __init__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type size) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type

        __init__(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type size, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & value) -> Robotics_Signals_RobotInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotInput_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type

        resize(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        insert(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotInput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotInput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInput_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotInput_Vector

# Register Robotics_Signals_RobotInput_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotInput_Vector_swigregister(Robotics_Signals_RobotInput_Vector)

class Robotics_Signals_RobotInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotInputSignal_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type j) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type

        __setslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type j, Robotics_Signals_RobotInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal >,std::allocator< std::shared_ptr< Robotics::Signals::RobotInputSignal > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type

        __delitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice, Robotics_Signals_RobotInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal >,std::allocator< std::shared_ptr< Robotics::Signals::RobotInputSignal > > > const &

        __setitem__(Robotics_Signals_RobotInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotInputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotInputSignal_Vector self, Robotics_Signals_RobotInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotInputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotInputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator

        erase(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator first, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotInputSignal_Vector self) -> Robotics_Signals_RobotInputSignal_Vector
        __init__(Robotics_Signals_RobotInputSignal_Vector self, Robotics_Signals_RobotInputSignal_Vector other) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > > const &

        __init__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type size) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type

        __init__(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type size, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & value) -> Robotics_Signals_RobotInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type

        resize(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        insert(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotInputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotInputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotInputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotInputSignal_Vector

# Register Robotics_Signals_RobotInputSignal_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotInputSignal_Vector_swigregister(Robotics_Signals_RobotInputSignal_Vector)

class Robotics_Signals_RobotOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotOutput_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type j) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type

        __setslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type j, Robotics_Signals_RobotOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput >,std::allocator< std::shared_ptr< Robotics::Signals::RobotOutput > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type

        __delitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice, Robotics_Signals_RobotOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput >,std::allocator< std::shared_ptr< Robotics::Signals::RobotOutput > > > const &

        __setitem__(Robotics_Signals_RobotOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotOutput_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotOutput_Vector self, Robotics_Signals_RobotOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotOutput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotOutput_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator

        erase(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator first, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotOutput_Vector self) -> Robotics_Signals_RobotOutput_Vector
        __init__(Robotics_Signals_RobotOutput_Vector self, Robotics_Signals_RobotOutput_Vector other) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > > const &

        __init__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type size) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type

        __init__(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type size, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & value) -> Robotics_Signals_RobotOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type

        resize(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        insert(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotOutput_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotOutput_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutput > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutput_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotOutput_Vector

# Register Robotics_Signals_RobotOutput_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotOutput_Vector_swigregister(Robotics_Signals_RobotOutput_Vector)

class Robotics_Signals_RobotOutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_RobotOutputSignal_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type j) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type

        __setslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type j, Robotics_Signals_RobotOutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal >,std::allocator< std::shared_ptr< Robotics::Signals::RobotOutputSignal > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type

        __delitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice, Robotics_Signals_RobotOutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal >,std::allocator< std::shared_ptr< Robotics::Signals::RobotOutputSignal > > > const &

        __setitem__(Robotics_Signals_RobotOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_RobotOutputSignal_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_RobotOutputSignal_Vector self, Robotics_Signals_RobotOutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > > &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_RobotOutputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_RobotOutputSignal_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator

        erase(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator first, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_RobotOutputSignal_Vector self) -> Robotics_Signals_RobotOutputSignal_Vector
        __init__(Robotics_Signals_RobotOutputSignal_Vector self, Robotics_Signals_RobotOutputSignal_Vector other) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > > const &

        __init__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type size) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type

        __init__(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type size, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & value) -> Robotics_Signals_RobotOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_RobotOutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type

        resize(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        insert(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_RobotOutputSignal_Vector self, std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_RobotOutputSignal_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::RobotOutputSignal > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_RobotOutputSignal_Vector

# Register Robotics_Signals_RobotOutputSignal_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_RobotOutputSignal_Vector_swigregister(Robotics_Signals_RobotOutputSignal_Vector)

class Robotics_Signals_Sensor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Signals::Sensor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_Sensor_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_Sensor_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_Sensor_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type j) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type

        __setslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type j, Robotics_Signals_Sensor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Signals::Sensor >,std::allocator< std::shared_ptr< Robotics::Signals::Sensor > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type

        __delitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice, Robotics_Signals_Sensor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Signals::Sensor >,std::allocator< std::shared_ptr< Robotics::Signals::Sensor > > > const &

        __setitem__(Robotics_Signals_Sensor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_Sensor_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_Sensor_Vector self, Robotics_Signals_Sensor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Signals::Sensor > > &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_Sensor_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_Sensor_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator

        erase(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator first, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_Sensor_Vector self) -> Robotics_Signals_Sensor_Vector
        __init__(Robotics_Signals_Sensor_Vector self, Robotics_Signals_Sensor_Vector other) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Signals::Sensor > > const &

        __init__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type size) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type

        __init__(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type size, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & value) -> Robotics_Signals_Sensor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_Sensor_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_Sensor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type

        resize(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        insert(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_Sensor_Vector self, std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_Sensor_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::Sensor > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_Sensor_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_Sensor_Vector

# Register Robotics_Signals_Sensor_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_Sensor_Vector_swigregister(Robotics_Signals_Sensor_Vector)

class Robotics_Signals_SensorValues_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Robotics::Signals::SensorValues > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Robotics_Signals_SensorValues_Vector self) -> SwigPyIterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Robotics_Signals_SensorValues_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Robotics_Signals_SensorValues_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type j) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type

        __setslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type j, Robotics_Signals_SensorValues_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type
        v: std::vector< std::shared_ptr< Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< Robotics::Signals::SensorValues > > > const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type
        j: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type

        __delitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type i) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice, Robotics_Signals_SensorValues_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< Robotics::Signals::SensorValues > > > const &

        __setitem__(Robotics_Signals_SensorValues_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type i, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::difference_type
        x: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_pop(self)

    def append(self, x):
        r"""
        append(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_append(self, x)

    def empty(self):
        r"""empty(Robotics_Signals_SensorValues_Vector self) -> bool"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_empty(self)

    def size(self):
        r"""size(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Robotics_Signals_SensorValues_Vector self, Robotics_Signals_SensorValues_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > > &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_swap(self, v)

    def begin(self):
        r"""begin(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_begin(self)

    def end(self):
        r"""end(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_rbegin(self)

    def rend(self):
        r"""rend(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::reverse_iterator"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_rend(self)

    def clear(self):
        r"""clear(Robotics_Signals_SensorValues_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::allocator_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Robotics_Signals_SensorValues_Vector self)"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator pos) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator

        erase(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator first, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator last) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator
        last: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Robotics_Signals_SensorValues_Vector self) -> Robotics_Signals_SensorValues_Vector
        __init__(Robotics_Signals_SensorValues_Vector self, Robotics_Signals_SensorValues_Vector other) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > > const &

        __init__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type size) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type

        __init__(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type size, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & value) -> Robotics_Signals_SensorValues_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type
        value: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        """
        _RoboticsSwig.Robotics_Signals_SensorValues_Vector_swiginit(self, _RoboticsSwig.new_Robotics_Signals_SensorValues_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_push_back(self, x)

    def front(self):
        r"""front(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_front(self)

    def back(self):
        r"""back(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type

        resize(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type new_size, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & x) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator
        x: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        insert(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator pos, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type n, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::iterator
        n: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type
        x: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::value_type const &

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Robotics_Signals_SensorValues_Vector self, std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type

        """
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Robotics_Signals_SensorValues_Vector self) -> std::vector< std::shared_ptr< Robotics::Signals::SensorValues > >::size_type"""
        return _RoboticsSwig.Robotics_Signals_SensorValues_Vector_capacity(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robotics_Signals_SensorValues_Vector

# Register Robotics_Signals_SensorValues_Vector in _RoboticsSwig:
_RoboticsSwig.Robotics_Signals_SensorValues_Vector_swigregister(Robotics_Signals_SensorValues_Vector)

class Joints_Joint(rebrick.Physics3D.System):
    r"""Proxy of C++ Robotics::Joints::Joint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_Joint self) -> Joints_Joint"""
        _RoboticsSwig.Joints_Joint_swiginit(self, _RoboticsSwig.new_Joints_Joint())

    def mate(self):
        r"""mate(Joints_Joint self) -> std::shared_ptr< Physics3D::Interactions::Mate >"""
        return _RoboticsSwig.Joints_Joint_mate(self)

    def links(self):
        r"""links(Joints_Joint self) -> Robotics_Links_RigidLink_Vector"""
        return _RoboticsSwig.Joints_Joint_links(self)

    def actuator(self):
        r"""actuator(Joints_Joint self) -> std::shared_ptr< Physics::Interactions::Interaction >"""
        return _RoboticsSwig.Joints_Joint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_Joint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_Joint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_Joint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_Joint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_Joint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_Joint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_Joint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_Joint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_Joint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_Joint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_Joint self)"""
        return _RoboticsSwig.Joints_Joint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_Joint

# Register Joints_Joint in _RoboticsSwig:
_RoboticsSwig.Joints_Joint_swigregister(Joints_Joint)

class Joints_HingeJoint(Joints_Joint):
    r"""Proxy of C++ Robotics::Joints::HingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_HingeJoint self) -> Joints_HingeJoint"""
        _RoboticsSwig.Joints_HingeJoint_swiginit(self, _RoboticsSwig.new_Joints_HingeJoint())

    def mate(self):
        r"""mate(Joints_HingeJoint self) -> std::shared_ptr< Physics3D::Interactions::Hinge >"""
        return _RoboticsSwig.Joints_HingeJoint_mate(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_HingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_HingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_HingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_HingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_HingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_HingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_HingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_HingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_HingeJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_HingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_HingeJoint self)"""
        return _RoboticsSwig.Joints_HingeJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_HingeJoint

# Register Joints_HingeJoint in _RoboticsSwig:
_RoboticsSwig.Joints_HingeJoint_swigregister(Joints_HingeJoint)

class Joints_FlexibleTorqueJoint(Joints_HingeJoint):
    r"""Proxy of C++ Robotics::Joints::FlexibleTorqueJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_FlexibleTorqueJoint self) -> Joints_FlexibleTorqueJoint"""
        _RoboticsSwig.Joints_FlexibleTorqueJoint_swiginit(self, _RoboticsSwig.new_Joints_FlexibleTorqueJoint())

    def actuator(self):
        r"""actuator(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< DriveTrain::TorqueMotor >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_actuator(self)

    def motor_shaft(self):
        r"""motor_shaft(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< DriveTrain::Shaft >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_motor_shaft(self)

    def gear(self):
        r"""gear(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< DriveTrain::Gear >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_gear(self)

    def gear_shaft(self):
        r"""gear_shaft(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< DriveTrain::Shaft >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_gear_shaft(self)

    def mate(self):
        r"""mate(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< DriveTrain::HingeActuator >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_mate(self)

    def actuator_input(self):
        r"""actuator_input(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< DriveTrain::Signals::TorqueMotorInput >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_actuator_input(self)

    def hinge_angle_output(self):
        r"""hinge_angle_output(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< Physics3D::Signals::HingeAngleOutput >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_hinge_angle_output(self)

    def hinge_velocity_output(self):
        r"""hinge_velocity_output(Joints_FlexibleTorqueJoint self) -> std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput >"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_hinge_velocity_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_FlexibleTorqueJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_FlexibleTorqueJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_FlexibleTorqueJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_FlexibleTorqueJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_FlexibleTorqueJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_FlexibleTorqueJoint self)"""
        return _RoboticsSwig.Joints_FlexibleTorqueJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_FlexibleTorqueJoint

# Register Joints_FlexibleTorqueJoint in _RoboticsSwig:
_RoboticsSwig.Joints_FlexibleTorqueJoint_swigregister(Joints_FlexibleTorqueJoint)

class Joints_JointData(rebrick.Core.Object):
    r"""Proxy of C++ Robotics::Joints::JointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_JointData self) -> Joints_JointData"""
        _RoboticsSwig.Joints_JointData_swiginit(self, _RoboticsSwig.new_Joints_JointData())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_JointData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_JointData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_JointData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_JointData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_JointData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_JointData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_JointData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_JointData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_JointData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_JointData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_JointData self)"""
        return _RoboticsSwig.Joints_JointData_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_JointData

# Register Joints_JointData in _RoboticsSwig:
_RoboticsSwig.Joints_JointData_swigregister(Joints_JointData)

class Joints_HingeJointData(Joints_JointData):
    r"""Proxy of C++ Robotics::Joints::HingeJointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_HingeJointData self) -> Joints_HingeJointData"""
        _RoboticsSwig.Joints_HingeJointData_swiginit(self, _RoboticsSwig.new_Joints_HingeJointData())

    def stiffness_around_normal(self):
        r"""stiffness_around_normal(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_stiffness_around_normal(self)

    def stiffness_around_cross(self):
        r"""stiffness_around_cross(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_stiffness_around_cross(self)

    def stiffness_along_main(self):
        r"""stiffness_along_main(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_stiffness_along_main(self)

    def stiffness_along_normal(self):
        r"""stiffness_along_normal(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_stiffness_along_normal(self)

    def stiffness_along_cross(self):
        r"""stiffness_along_cross(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_stiffness_along_cross(self)

    def damping_around_normal(self):
        r"""damping_around_normal(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_damping_around_normal(self)

    def damping_around_cross(self):
        r"""damping_around_cross(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_damping_around_cross(self)

    def damping_along_main(self):
        r"""damping_along_main(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_damping_along_main(self)

    def damping_along_normal(self):
        r"""damping_along_normal(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_damping_along_normal(self)

    def damping_along_cross(self):
        r"""damping_along_cross(Joints_HingeJointData self) -> double"""
        return _RoboticsSwig.Joints_HingeJointData_damping_along_cross(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_HingeJointData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_HingeJointData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_HingeJointData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_HingeJointData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_HingeJointData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_HingeJointData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_HingeJointData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_HingeJointData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_HingeJointData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_HingeJointData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_HingeJointData self)"""
        return _RoboticsSwig.Joints_HingeJointData_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_HingeJointData

# Register Joints_HingeJointData in _RoboticsSwig:
_RoboticsSwig.Joints_HingeJointData_swigregister(Joints_HingeJointData)

class Joints_FlexibleTorqueJointData(Joints_HingeJointData):
    r"""Proxy of C++ Robotics::Joints::FlexibleTorqueJointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_FlexibleTorqueJointData self) -> Joints_FlexibleTorqueJointData"""
        _RoboticsSwig.Joints_FlexibleTorqueJointData_swiginit(self, _RoboticsSwig.new_Joints_FlexibleTorqueJointData())

    def motor_damping(self):
        r"""motor_damping(Joints_FlexibleTorqueJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_motor_damping(self)

    def motor_inertia(self):
        r"""motor_inertia(Joints_FlexibleTorqueJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_motor_inertia(self)

    def motor_stiffness(self):
        r"""motor_stiffness(Joints_FlexibleTorqueJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_motor_stiffness(self)

    def gear_inertia(self):
        r"""gear_inertia(Joints_FlexibleTorqueJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_gear_inertia(self)

    def gear_ratio(self):
        r"""gear_ratio(Joints_FlexibleTorqueJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_gear_ratio(self)

    def max_motor_torque(self):
        r"""max_motor_torque(Joints_FlexibleTorqueJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_max_motor_torque(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_FlexibleTorqueJointData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_FlexibleTorqueJointData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_FlexibleTorqueJointData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_FlexibleTorqueJointData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_FlexibleTorqueJointData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_FlexibleTorqueJointData self)"""
        return _RoboticsSwig.Joints_FlexibleTorqueJointData_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_FlexibleTorqueJointData

# Register Joints_FlexibleTorqueJointData in _RoboticsSwig:
_RoboticsSwig.Joints_FlexibleTorqueJointData_swigregister(Joints_FlexibleTorqueJointData)

class Joints_FlexibleVelocityJoint(Joints_HingeJoint):
    r"""Proxy of C++ Robotics::Joints::FlexibleVelocityJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_FlexibleVelocityJoint self) -> Joints_FlexibleVelocityJoint"""
        _RoboticsSwig.Joints_FlexibleVelocityJoint_swiginit(self, _RoboticsSwig.new_Joints_FlexibleVelocityJoint())

    def actuator(self):
        r"""actuator(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< Physics1D::Interactions::RotationalVelocityMotor >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_actuator(self)

    def motor_shaft(self):
        r"""motor_shaft(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< DriveTrain::Shaft >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_motor_shaft(self)

    def gear(self):
        r"""gear(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< DriveTrain::Gear >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_gear(self)

    def gear_shaft(self):
        r"""gear_shaft(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< DriveTrain::Shaft >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_gear_shaft(self)

    def mate(self):
        r"""mate(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< DriveTrain::HingeActuator >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_mate(self)

    def actuator_input(self):
        r"""actuator_input(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< Physics1D::Signals::RotationalVelocityMotor1DVelocityInput >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_actuator_input(self)

    def hinge_angle_output(self):
        r"""hinge_angle_output(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< Physics3D::Signals::HingeAngleOutput >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_hinge_angle_output(self)

    def hinge_velocity_output(self):
        r"""hinge_velocity_output(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_hinge_velocity_output(self)

    def motor_position_output(self):
        r"""motor_position_output(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< Physics1D::Signals::RotationalBodyAngleOutput >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_motor_position_output(self)

    def motor_velocity_output(self):
        r"""motor_velocity_output(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< Physics1D::Signals::RotationalBodyAngularVelocityOutput >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_motor_velocity_output(self)

    def gear_torque_output(self):
        r"""gear_torque_output(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< DriveTrain::Signals::GearTorqueOutput >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_gear_torque_output(self)

    def sensor(self):
        r"""sensor(Joints_FlexibleVelocityJoint self) -> std::shared_ptr< Robotics::Signals::Sensor >"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_sensor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_FlexibleVelocityJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_FlexibleVelocityJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_FlexibleVelocityJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_FlexibleVelocityJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_FlexibleVelocityJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_FlexibleVelocityJoint self)"""
        return _RoboticsSwig.Joints_FlexibleVelocityJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_FlexibleVelocityJoint

# Register Joints_FlexibleVelocityJoint in _RoboticsSwig:
_RoboticsSwig.Joints_FlexibleVelocityJoint_swigregister(Joints_FlexibleVelocityJoint)

class Joints_FlexibleVelocityJointData(Joints_HingeJointData):
    r"""Proxy of C++ Robotics::Joints::FlexibleVelocityJointData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_FlexibleVelocityJointData self) -> Joints_FlexibleVelocityJointData"""
        _RoboticsSwig.Joints_FlexibleVelocityJointData_swiginit(self, _RoboticsSwig.new_Joints_FlexibleVelocityJointData())

    def motor_damping(self):
        r"""motor_damping(Joints_FlexibleVelocityJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_motor_damping(self)

    def motor_inertia(self):
        r"""motor_inertia(Joints_FlexibleVelocityJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_motor_inertia(self)

    def motor_stiffness(self):
        r"""motor_stiffness(Joints_FlexibleVelocityJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_motor_stiffness(self)

    def gear_inertia(self):
        r"""gear_inertia(Joints_FlexibleVelocityJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_gear_inertia(self)

    def gear_ratio(self):
        r"""gear_ratio(Joints_FlexibleVelocityJointData self) -> double"""
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_gear_ratio(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_FlexibleVelocityJointData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_FlexibleVelocityJointData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_FlexibleVelocityJointData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_FlexibleVelocityJointData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_FlexibleVelocityJointData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_FlexibleVelocityJointData self)"""
        return _RoboticsSwig.Joints_FlexibleVelocityJointData_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_FlexibleVelocityJointData

# Register Joints_FlexibleVelocityJointData in _RoboticsSwig:
_RoboticsSwig.Joints_FlexibleVelocityJointData_swigregister(Joints_FlexibleVelocityJointData)

class Joints_HingeJointPosition(Joints_HingeJoint):
    r"""Proxy of C++ Robotics::Joints::HingeJointPosition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_HingeJointPosition self) -> Joints_HingeJointPosition"""
        _RoboticsSwig.Joints_HingeJointPosition_swiginit(self, _RoboticsSwig.new_Joints_HingeJointPosition())

    def actuator(self):
        r"""actuator(Joints_HingeJointPosition self) -> std::shared_ptr< Physics3D::Interactions::TorsionSpring >"""
        return _RoboticsSwig.Joints_HingeJointPosition_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_HingeJointPosition self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_HingeJointPosition_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_HingeJointPosition self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_HingeJointPosition_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_HingeJointPosition self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_HingeJointPosition_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_HingeJointPosition self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_HingeJointPosition_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_HingeJointPosition self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_HingeJointPosition_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_HingeJointPosition self)"""
        return _RoboticsSwig.Joints_HingeJointPosition_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_HingeJointPosition

# Register Joints_HingeJointPosition in _RoboticsSwig:
_RoboticsSwig.Joints_HingeJointPosition_swigregister(Joints_HingeJointPosition)

class Joints_PositionHingeJoint(Joints_HingeJoint):
    r"""Proxy of C++ Robotics::Joints::PositionHingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_PositionHingeJoint self) -> Joints_PositionHingeJoint"""
        _RoboticsSwig.Joints_PositionHingeJoint_swiginit(self, _RoboticsSwig.new_Joints_PositionHingeJoint())

    def actuator(self):
        r"""actuator(Joints_PositionHingeJoint self) -> std::shared_ptr< Physics3D::Interactions::TorsionSpring >"""
        return _RoboticsSwig.Joints_PositionHingeJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_PositionHingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_PositionHingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_PositionHingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_PositionHingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_PositionHingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_PositionHingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_PositionHingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_PositionHingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_PositionHingeJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_PositionHingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_PositionHingeJoint self)"""
        return _RoboticsSwig.Joints_PositionHingeJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_PositionHingeJoint

# Register Joints_PositionHingeJoint in _RoboticsSwig:
_RoboticsSwig.Joints_PositionHingeJoint_swigregister(Joints_PositionHingeJoint)

class Joints_VelocityHingeJoint(Joints_HingeJoint):
    r"""Proxy of C++ Robotics::Joints::VelocityHingeJoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Joints_VelocityHingeJoint self) -> Joints_VelocityHingeJoint"""
        _RoboticsSwig.Joints_VelocityHingeJoint_swiginit(self, _RoboticsSwig.new_Joints_VelocityHingeJoint())

    def actuator(self):
        r"""actuator(Joints_VelocityHingeJoint self) -> std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor >"""
        return _RoboticsSwig.Joints_VelocityHingeJoint_actuator(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Joints_VelocityHingeJoint self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Joints_VelocityHingeJoint_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Joints_VelocityHingeJoint self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Joints_VelocityHingeJoint_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Joints_VelocityHingeJoint self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Joints_VelocityHingeJoint_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Joints_VelocityHingeJoint self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Joints_VelocityHingeJoint_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Joints_VelocityHingeJoint self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Joints_VelocityHingeJoint_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Joints_VelocityHingeJoint self)"""
        return _RoboticsSwig.Joints_VelocityHingeJoint_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Joints_VelocityHingeJoint

# Register Joints_VelocityHingeJoint in _RoboticsSwig:
_RoboticsSwig.Joints_VelocityHingeJoint_swigregister(Joints_VelocityHingeJoint)

class Links_LinkData(rebrick.Core.Object):
    r"""Proxy of C++ Robotics::Links::LinkData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Links_LinkData self) -> Links_LinkData"""
        _RoboticsSwig.Links_LinkData_swiginit(self, _RoboticsSwig.new_Links_LinkData())

    def inertia(self):
        r"""inertia(Links_LinkData self) -> std::shared_ptr< Physics3D::Bodies::Inertia >"""
        return _RoboticsSwig.Links_LinkData_inertia(self)

    def start_position(self):
        r"""start_position(Links_LinkData self) -> std::shared_ptr< Math::Vec3 >"""
        return _RoboticsSwig.Links_LinkData_start_position(self)

    def start_main_axis(self):
        r"""start_main_axis(Links_LinkData self) -> std::shared_ptr< Math::Vec3 >"""
        return _RoboticsSwig.Links_LinkData_start_main_axis(self)

    def start_normal(self):
        r"""start_normal(Links_LinkData self) -> std::shared_ptr< Math::Vec3 >"""
        return _RoboticsSwig.Links_LinkData_start_normal(self)

    def end_position(self):
        r"""end_position(Links_LinkData self) -> std::shared_ptr< Math::Vec3 >"""
        return _RoboticsSwig.Links_LinkData_end_position(self)

    def end_main_axis(self):
        r"""end_main_axis(Links_LinkData self) -> std::shared_ptr< Math::Vec3 >"""
        return _RoboticsSwig.Links_LinkData_end_main_axis(self)

    def end_normal(self):
        r"""end_normal(Links_LinkData self) -> std::shared_ptr< Math::Vec3 >"""
        return _RoboticsSwig.Links_LinkData_end_normal(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Links_LinkData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Links_LinkData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Links_LinkData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Links_LinkData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Links_LinkData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Links_LinkData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Links_LinkData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Links_LinkData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Links_LinkData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Links_LinkData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Links_LinkData self)"""
        return _RoboticsSwig.Links_LinkData_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Links_LinkData

# Register Links_LinkData in _RoboticsSwig:
_RoboticsSwig.Links_LinkData_swigregister(Links_LinkData)

class Links_RigidLink(rebrick.Physics3D.Bodies_RigidBody):
    r"""Proxy of C++ Robotics::Links::RigidLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Links_RigidLink self) -> Links_RigidLink"""
        _RoboticsSwig.Links_RigidLink_swiginit(self, _RoboticsSwig.new_Links_RigidLink())

    def start(self):
        r"""start(Links_RigidLink self) -> std::shared_ptr< Physics3D::Charges::MateConnector >"""
        return _RoboticsSwig.Links_RigidLink_start(self)

    def end(self):
        r"""end(Links_RigidLink self) -> std::shared_ptr< Physics3D::Charges::MateConnector >"""
        return _RoboticsSwig.Links_RigidLink_end(self)

    def contact_geometry(self):
        r"""contact_geometry(Links_RigidLink self) -> std::shared_ptr< Physics3D::Charges::ContactGeometry >"""
        return _RoboticsSwig.Links_RigidLink_contact_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Links_RigidLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Links_RigidLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Links_RigidLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Links_RigidLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Links_RigidLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Links_RigidLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Links_RigidLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Links_RigidLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Links_RigidLink self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Links_RigidLink_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Links_RigidLink self)"""
        return _RoboticsSwig.Links_RigidLink_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Links_RigidLink

# Register Links_RigidLink in _RoboticsSwig:
_RoboticsSwig.Links_RigidLink_swigregister(Links_RigidLink)

class Links_RigidBoxLink(Links_RigidLink):
    r"""Proxy of C++ Robotics::Links::RigidBoxLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Links_RigidBoxLink self) -> Links_RigidBoxLink"""
        _RoboticsSwig.Links_RigidBoxLink_swiginit(self, _RoboticsSwig.new_Links_RigidBoxLink())

    def geometry(self):
        r"""geometry(Links_RigidBoxLink self) -> std::shared_ptr< Physics3D::Charges::Box >"""
        return _RoboticsSwig.Links_RigidBoxLink_geometry(self)

    def arrow(self):
        r"""arrow(Links_RigidBoxLink self) -> std::shared_ptr< Physics3D::Charges::Box >"""
        return _RoboticsSwig.Links_RigidBoxLink_arrow(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Links_RigidBoxLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Links_RigidBoxLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Links_RigidBoxLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Links_RigidBoxLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Links_RigidBoxLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Links_RigidBoxLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Links_RigidBoxLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Links_RigidBoxLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Links_RigidBoxLink self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Links_RigidBoxLink_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Links_RigidBoxLink self)"""
        return _RoboticsSwig.Links_RigidBoxLink_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Links_RigidBoxLink

# Register Links_RigidBoxLink in _RoboticsSwig:
_RoboticsSwig.Links_RigidBoxLink_swigregister(Links_RigidBoxLink)

class Links_RigidObjLink(Links_RigidLink):
    r"""Proxy of C++ Robotics::Links::RigidObjLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Links_RigidObjLink self) -> Links_RigidObjLink"""
        _RoboticsSwig.Links_RigidObjLink_swiginit(self, _RoboticsSwig.new_Links_RigidObjLink())

    def contact_geometry(self):
        r"""contact_geometry(Links_RigidObjLink self) -> std::shared_ptr< Physics3D::Charges::ObjGeometry >"""
        return _RoboticsSwig.Links_RigidObjLink_contact_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Links_RigidObjLink self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Links_RigidObjLink_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Links_RigidObjLink self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Links_RigidObjLink_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Links_RigidObjLink self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Links_RigidObjLink_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Links_RigidObjLink self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Links_RigidObjLink_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Links_RigidObjLink self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Links_RigidObjLink_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Links_RigidObjLink self)"""
        return _RoboticsSwig.Links_RigidObjLink_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Links_RigidObjLink

# Register Links_RigidObjLink in _RoboticsSwig:
_RoboticsSwig.Links_RigidObjLink_swigregister(Links_RigidObjLink)

class Robots_Robot(rebrick.Physics3D.System):
    r"""Proxy of C++ Robotics::Robots::Robot class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robots_Robot self) -> Robots_Robot"""
        _RoboticsSwig.Robots_Robot_swiginit(self, _RoboticsSwig.new_Robots_Robot())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robots_Robot self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Robots_Robot_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robots_Robot self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robots_Robot_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robots_Robot self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Robots_Robot_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robots_Robot self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Robots_Robot_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robots_Robot self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Robots_Robot_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Robots_Robot self)"""
        return _RoboticsSwig.Robots_Robot_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robots_Robot

# Register Robots_Robot in _RoboticsSwig:
_RoboticsSwig.Robots_Robot_swigregister(Robots_Robot)

class Robots_SerialManipulatorData(rebrick.Core.Object):
    r"""Proxy of C++ Robotics::Robots::SerialManipulatorData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robots_SerialManipulatorData self) -> Robots_SerialManipulatorData"""
        _RoboticsSwig.Robots_SerialManipulatorData_swiginit(self, _RoboticsSwig.new_Robots_SerialManipulatorData())

    def link_data(self):
        r"""link_data(Robots_SerialManipulatorData self) -> Robotics_Links_LinkData_Vector"""
        return _RoboticsSwig.Robots_SerialManipulatorData_link_data(self)

    def hinge_data(self):
        r"""hinge_data(Robots_SerialManipulatorData self) -> Robotics_Joints_HingeJointData_Vector"""
        return _RoboticsSwig.Robots_SerialManipulatorData_hinge_data(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robots_SerialManipulatorData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Robots_SerialManipulatorData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robots_SerialManipulatorData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robots_SerialManipulatorData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robots_SerialManipulatorData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Robots_SerialManipulatorData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robots_SerialManipulatorData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Robots_SerialManipulatorData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robots_SerialManipulatorData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Robots_SerialManipulatorData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Robots_SerialManipulatorData self)"""
        return _RoboticsSwig.Robots_SerialManipulatorData_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robots_SerialManipulatorData

# Register Robots_SerialManipulatorData in _RoboticsSwig:
_RoboticsSwig.Robots_SerialManipulatorData_swigregister(Robots_SerialManipulatorData)

class Robots_SixAxisSerialManipulator(Robots_Robot):
    r"""Proxy of C++ Robotics::Robots::SixAxisSerialManipulator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Robots_SixAxisSerialManipulator self) -> Robots_SixAxisSerialManipulator"""
        _RoboticsSwig.Robots_SixAxisSerialManipulator_swiginit(self, _RoboticsSwig.new_Robots_SixAxisSerialManipulator())

    def data(self):
        r"""data(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Robots::SerialManipulatorData >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_data(self)

    def link1(self):
        r"""link1(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_link1(self)

    def link2(self):
        r"""link2(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_link2(self)

    def link3(self):
        r"""link3(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_link3(self)

    def link4(self):
        r"""link4(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_link4(self)

    def link5(self):
        r"""link5(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_link5(self)

    def link6(self):
        r"""link6(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Links::RigidLink >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_link6(self)

    def joint1(self):
        r"""joint1(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_joint1(self)

    def joint2(self):
        r"""joint2(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_joint2(self)

    def joint3(self):
        r"""joint3(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_joint3(self)

    def joint4(self):
        r"""joint4(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_joint4(self)

    def joint5(self):
        r"""joint5(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_joint5(self)

    def joint6(self):
        r"""joint6(Robots_SixAxisSerialManipulator self) -> std::shared_ptr< Robotics::Joints::HingeJoint >"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_joint6(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Robots_SixAxisSerialManipulator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Robots_SixAxisSerialManipulator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Robots_SixAxisSerialManipulator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Robots_SixAxisSerialManipulator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Robots_SixAxisSerialManipulator self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Robots_SixAxisSerialManipulator self)"""
        return _RoboticsSwig.Robots_SixAxisSerialManipulator_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Robots_SixAxisSerialManipulator

# Register Robots_SixAxisSerialManipulator in _RoboticsSwig:
_RoboticsSwig.Robots_SixAxisSerialManipulator_swigregister(Robots_SixAxisSerialManipulator)

class Signals_RobotInput(rebrick.Physics.Signals_Input):
    r"""Proxy of C++ Robotics::Signals::RobotInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RobotInput self) -> Signals_RobotInput"""
        _RoboticsSwig.Signals_RobotInput_swiginit(self, _RoboticsSwig.new_Signals_RobotInput())

    def angle_targets(self):
        r"""angle_targets(Signals_RobotInput self) -> Physics3D_Signals_TorsionSpringAngleInput_Vector"""
        return _RoboticsSwig.Signals_RobotInput_angle_targets(self)

    def angular_velocity_targets(self):
        r"""angular_velocity_targets(Signals_RobotInput self) -> Physics1D_Signals_RotationalVelocityMotor1DVelocityInput_Vector"""
        return _RoboticsSwig.Signals_RobotInput_angular_velocity_targets(self)

    def torque_targets(self):
        r"""torque_targets(Signals_RobotInput self) -> DriveTrain_Signals_TorqueMotorInput_Vector"""
        return _RoboticsSwig.Signals_RobotInput_torque_targets(self)

    def process(self, signal):
        r"""
        process(Signals_RobotInput self, std::shared_ptr< Physics::Signals::InputSignal > signal) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        signal: std::shared_ptr< Physics::Signals::InputSignal >

        """
        return _RoboticsSwig.Signals_RobotInput_process(self, signal)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RobotInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Signals_RobotInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RobotInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Signals_RobotInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RobotInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Signals_RobotInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RobotInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Signals_RobotInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RobotInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Signals_RobotInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RobotInput self)"""
        return _RoboticsSwig.Signals_RobotInput_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Signals_RobotInput

# Register Signals_RobotInput in _RoboticsSwig:
_RoboticsSwig.Signals_RobotInput_swigregister(Signals_RobotInput)

class Signals_RobotInputSignal(rebrick.Physics.Signals_InputSignal):
    r"""Proxy of C++ Robotics::Signals::RobotInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RobotInputSignal self) -> Signals_RobotInputSignal"""
        _RoboticsSwig.Signals_RobotInputSignal_swiginit(self, _RoboticsSwig.new_Signals_RobotInputSignal())

    def angles(self):
        r"""angles(Signals_RobotInputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.Signals_RobotInputSignal_angles(self)

    def angular_velocities(self):
        r"""angular_velocities(Signals_RobotInputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.Signals_RobotInputSignal_angular_velocities(self)

    def torques(self):
        r"""torques(Signals_RobotInputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.Signals_RobotInputSignal_torques(self)

    @staticmethod
    def create(angles, angular_velocities, torques, target):
        r"""
        create(std::vector< double,std::allocator< double > > angles, std::vector< double,std::allocator< double > > angular_velocities, std::vector< double,std::allocator< double > > torques, std::shared_ptr< Physics::Signals::Input > target) -> std::shared_ptr< Robotics::Signals::RobotInputSignal >

        Parameters
        ----------
        angles: std::vector< double,std::allocator< double > >
        angular_velocities: std::vector< double,std::allocator< double > >
        torques: std::vector< double,std::allocator< double > >
        target: std::shared_ptr< Physics::Signals::Input >

        """
        return _RoboticsSwig.Signals_RobotInputSignal_create(angles, angular_velocities, torques, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RobotInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Signals_RobotInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RobotInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Signals_RobotInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RobotInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Signals_RobotInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RobotInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Signals_RobotInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RobotInputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Signals_RobotInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RobotInputSignal self)"""
        return _RoboticsSwig.Signals_RobotInputSignal_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Signals_RobotInputSignal

# Register Signals_RobotInputSignal in _RoboticsSwig:
_RoboticsSwig.Signals_RobotInputSignal_swigregister(Signals_RobotInputSignal)

def Signals_RobotInputSignal_create(angles, angular_velocities, torques, target):
    r"""
    Signals_RobotInputSignal_create(std::vector< double,std::allocator< double > > angles, std::vector< double,std::allocator< double > > angular_velocities, std::vector< double,std::allocator< double > > torques, std::shared_ptr< Physics::Signals::Input > target) -> std::shared_ptr< Robotics::Signals::RobotInputSignal >

    Parameters
    ----------
    angles: std::vector< double,std::allocator< double > >
    angular_velocities: std::vector< double,std::allocator< double > >
    torques: std::vector< double,std::allocator< double > >
    target: std::shared_ptr< Physics::Signals::Input >

    """
    return _RoboticsSwig.Signals_RobotInputSignal_create(angles, angular_velocities, torques, target)

class Signals_RobotOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Robotics::Signals::RobotOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RobotOutput self) -> Signals_RobotOutput"""
        _RoboticsSwig.Signals_RobotOutput_swiginit(self, _RoboticsSwig.new_Signals_RobotOutput())

    def angle_sources(self):
        r"""angle_sources(Signals_RobotOutput self) -> Physics3D_Signals_HingeAngleOutput_Vector"""
        return _RoboticsSwig.Signals_RobotOutput_angle_sources(self)

    def angular_velocity_sources(self):
        r"""angular_velocity_sources(Signals_RobotOutput self) -> Physics3D_Signals_HingeAngularVelocityOutput_Vector"""
        return _RoboticsSwig.Signals_RobotOutput_angular_velocity_sources(self)

    def sensor_sources(self):
        r"""sensor_sources(Signals_RobotOutput self) -> Physics_Signals_Output_Vector"""
        return _RoboticsSwig.Signals_RobotOutput_sensor_sources(self)

    def sensors(self):
        r"""sensors(Signals_RobotOutput self) -> Robotics_Signals_Sensor_Vector"""
        return _RoboticsSwig.Signals_RobotOutput_sensors(self)

    def process(self, output, signals):
        r"""
        process(Signals_RobotOutput self, std::shared_ptr< Physics::Signals::Output > output, Physics_Signals_OutputSignal_Vector signals) -> std::shared_ptr< Physics::Signals::OutputSignal >

        Parameters
        ----------
        output: std::shared_ptr< Physics::Signals::Output >
        signals: std::vector< std::shared_ptr< Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::OutputSignal > > >

        """
        return _RoboticsSwig.Signals_RobotOutput_process(self, output, signals)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RobotOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Signals_RobotOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RobotOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Signals_RobotOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RobotOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Signals_RobotOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RobotOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Signals_RobotOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RobotOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Signals_RobotOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RobotOutput self)"""
        return _RoboticsSwig.Signals_RobotOutput_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Signals_RobotOutput

# Register Signals_RobotOutput in _RoboticsSwig:
_RoboticsSwig.Signals_RobotOutput_swigregister(Signals_RobotOutput)

class Signals_RobotOutputSignal(rebrick.Physics.Signals_OutputSignal):
    r"""Proxy of C++ Robotics::Signals::RobotOutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RobotOutputSignal self) -> Signals_RobotOutputSignal"""
        _RoboticsSwig.Signals_RobotOutputSignal_swiginit(self, _RoboticsSwig.new_Signals_RobotOutputSignal())

    def angles(self):
        r"""angles(Signals_RobotOutputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.Signals_RobotOutputSignal_angles(self)

    def angular_velocities(self):
        r"""angular_velocities(Signals_RobotOutputSignal self) -> std::vector< double,std::allocator< double > >"""
        return _RoboticsSwig.Signals_RobotOutputSignal_angular_velocities(self)

    def sensor_values(self):
        r"""sensor_values(Signals_RobotOutputSignal self) -> Robotics_Signals_SensorValues_Vector"""
        return _RoboticsSwig.Signals_RobotOutputSignal_sensor_values(self)

    @staticmethod
    def create(source_angle_signals, source_angular_velocity_signals, sensor_sources, sensor_values, source):
        r"""
        create(Physics_Signals_ValueOutputSignal_Vector source_angle_signals, Physics_Signals_ValueOutputSignal_Vector source_angular_velocity_signals, Physics_Signals_OutputSignal_Vector sensor_sources, Robotics_Signals_SensorValues_Vector sensor_values, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Robotics::Signals::RobotOutputSignal >

        Parameters
        ----------
        source_angle_signals: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::ValueOutputSignal > > >
        source_angular_velocity_signals: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::ValueOutputSignal > > >
        sensor_sources: std::vector< std::shared_ptr< Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::OutputSignal > > >
        sensor_values: std::vector< std::shared_ptr< Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< Robotics::Signals::SensorValues > > >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _RoboticsSwig.Signals_RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, sensor_sources, sensor_values, source)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RobotOutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Signals_RobotOutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RobotOutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Signals_RobotOutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RobotOutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Signals_RobotOutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RobotOutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Signals_RobotOutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RobotOutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Signals_RobotOutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RobotOutputSignal self)"""
        return _RoboticsSwig.Signals_RobotOutputSignal_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Signals_RobotOutputSignal

# Register Signals_RobotOutputSignal in _RoboticsSwig:
_RoboticsSwig.Signals_RobotOutputSignal_swigregister(Signals_RobotOutputSignal)

def Signals_RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, sensor_sources, sensor_values, source):
    r"""
    Signals_RobotOutputSignal_create(Physics_Signals_ValueOutputSignal_Vector source_angle_signals, Physics_Signals_ValueOutputSignal_Vector source_angular_velocity_signals, Physics_Signals_OutputSignal_Vector sensor_sources, Robotics_Signals_SensorValues_Vector sensor_values, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Robotics::Signals::RobotOutputSignal >

    Parameters
    ----------
    source_angle_signals: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::ValueOutputSignal > > >
    source_angular_velocity_signals: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::ValueOutputSignal > > >
    sensor_sources: std::vector< std::shared_ptr< Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::OutputSignal > > >
    sensor_values: std::vector< std::shared_ptr< Robotics::Signals::SensorValues >,std::allocator< std::shared_ptr< Robotics::Signals::SensorValues > > >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _RoboticsSwig.Signals_RobotOutputSignal_create(source_angle_signals, source_angular_velocity_signals, sensor_sources, sensor_values, source)

class Signals_Sensor(rebrick.Core.Object):
    r"""Proxy of C++ Robotics::Signals::Sensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_Sensor self) -> Signals_Sensor"""
        _RoboticsSwig.Signals_Sensor_swiginit(self, _RoboticsSwig.new_Signals_Sensor())

    def outputs(self):
        r"""outputs(Signals_Sensor self) -> Physics_Signals_Output_Vector"""
        return _RoboticsSwig.Signals_Sensor_outputs(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_Sensor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Signals_Sensor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_Sensor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Signals_Sensor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_Sensor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Signals_Sensor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_Sensor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Signals_Sensor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_Sensor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Signals_Sensor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_Sensor self)"""
        return _RoboticsSwig.Signals_Sensor_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Signals_Sensor

# Register Signals_Sensor in _RoboticsSwig:
_RoboticsSwig.Signals_Sensor_swigregister(Signals_Sensor)

class Signals_SensorValues(rebrick.Core.Object):
    r"""Proxy of C++ Robotics::Signals::SensorValues class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_SensorValues self) -> Signals_SensorValues"""
        _RoboticsSwig.Signals_SensorValues_swiginit(self, _RoboticsSwig.new_Signals_SensorValues())

    def name(self):
        r"""name(Signals_SensorValues self) -> std::string"""
        return _RoboticsSwig.Signals_SensorValues_name(self)

    def values(self):
        r"""values(Signals_SensorValues self) -> Physics_Signals_Value_Vector"""
        return _RoboticsSwig.Signals_SensorValues_values(self)

    @staticmethod
    def create(name, values):
        r"""
        create(std::string name, Physics_Signals_Value_Vector values) -> std::shared_ptr< Robotics::Signals::SensorValues >

        Parameters
        ----------
        name: std::string
        values: std::vector< std::shared_ptr< Physics::Signals::Value >,std::allocator< std::shared_ptr< Physics::Signals::Value > > >

        """
        return _RoboticsSwig.Signals_SensorValues_create(name, values)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_SensorValues self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _RoboticsSwig.Signals_SensorValues_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_SensorValues self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _RoboticsSwig.Signals_SensorValues_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_SensorValues self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _RoboticsSwig.Signals_SensorValues_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_SensorValues self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _RoboticsSwig.Signals_SensorValues_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_SensorValues self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _RoboticsSwig.Signals_SensorValues_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_SensorValues self)"""
        return _RoboticsSwig.Signals_SensorValues_triggerOnInit(self)
    __swig_destroy__ = _RoboticsSwig.delete_Signals_SensorValues

# Register Signals_SensorValues in _RoboticsSwig:
_RoboticsSwig.Signals_SensorValues_swigregister(Signals_SensorValues)

def Signals_SensorValues_create(name, values):
    r"""
    Signals_SensorValues_create(std::string name, Physics_Signals_Value_Vector values) -> std::shared_ptr< Robotics::Signals::SensorValues >

    Parameters
    ----------
    name: std::string
    values: std::vector< std::shared_ptr< Physics::Signals::Value >,std::allocator< std::shared_ptr< Physics::Signals::Value > > >

    """
    return _RoboticsSwig.Signals_SensorValues_create(name, values)



