# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PhysicsSwig
else:
    import _PhysicsSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _PhysicsSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PhysicsSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PhysicsSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PhysicsSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _PhysicsSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _PhysicsSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PhysicsSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PhysicsSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PhysicsSwig:
_PhysicsSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
class Physics_Bodies_Body_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Bodies::Body > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Bodies_Body_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Bodies_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Bodies_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type j) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type

        __setslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type j, Physics_Bodies_Body_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Bodies::Body >,std::allocator< std::shared_ptr< Physics::Bodies::Body > > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type

        __delitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice, Physics_Bodies_Body_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Bodies::Body >,std::allocator< std::shared_ptr< Physics::Bodies::Body > > > const &

        __setitem__(Physics_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Body > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Bodies_Body_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_empty(self)

    def size(self):
        r"""size(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Bodies_Body_Vector self, Physics_Bodies_Body_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Bodies::Body > > &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_begin(self)

    def end(self):
        r"""end(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Bodies_Body_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::allocator_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Bodies_Body_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator

        erase(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator first, std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator last) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator
        last: std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Bodies_Body_Vector self) -> Physics_Bodies_Body_Vector
        __init__(Physics_Bodies_Body_Vector self, Physics_Bodies_Body_Vector other) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Bodies::Body > > const &

        __init__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type size) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type

        __init__(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type size, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & value) -> Physics_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type
        value: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        """
        _PhysicsSwig.Physics_Bodies_Body_Vector_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Body_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_front(self)

    def back(self):
        r"""back(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type

        resize(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type new_size, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator
        x: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        insert(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Body > >::iterator
        n: std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Body > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type

        """
        return _PhysicsSwig.Physics_Bodies_Body_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Body > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Body_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Body_Vector

# Register Physics_Bodies_Body_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Body_Vector_swigregister(Physics_Bodies_Body_Vector)

class Physics_Bodies_Inertia_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Bodies::Inertia > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Bodies_Inertia_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Bodies_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Bodies_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type j) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type

        __setslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type j, Physics_Bodies_Inertia_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Bodies::Inertia >,std::allocator< std::shared_ptr< Physics::Bodies::Inertia > > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type

        __delitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice, Physics_Bodies_Inertia_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Bodies::Inertia >,std::allocator< std::shared_ptr< Physics::Bodies::Inertia > > > const &

        __setitem__(Physics_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Bodies_Inertia_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_empty(self)

    def size(self):
        r"""size(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Bodies_Inertia_Vector self, Physics_Bodies_Inertia_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Bodies::Inertia > > &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_begin(self)

    def end(self):
        r"""end(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Bodies_Inertia_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::allocator_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Bodies_Inertia_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator

        erase(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator first, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator last) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator
        last: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Bodies_Inertia_Vector self) -> Physics_Bodies_Inertia_Vector
        __init__(Physics_Bodies_Inertia_Vector self, Physics_Bodies_Inertia_Vector other) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Bodies::Inertia > > const &

        __init__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type size) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type

        __init__(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type size, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & value) -> Physics_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type
        value: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        """
        _PhysicsSwig.Physics_Bodies_Inertia_Vector_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Inertia_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_front(self)

    def back(self):
        r"""back(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type

        resize(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type new_size, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator
        x: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        insert(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::iterator
        n: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type

        """
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Inertia > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Inertia_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Inertia_Vector

# Register Physics_Bodies_Inertia_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Inertia_Vector_swigregister(Physics_Bodies_Inertia_Vector)

class Physics_Bodies_Kinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Bodies::Kinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Bodies_Kinematics_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Bodies_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Bodies_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type j) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type

        __setslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type j, Physics_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Bodies::Kinematics >,std::allocator< std::shared_ptr< Physics::Bodies::Kinematics > > > const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type

        __delitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice, Physics_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Bodies::Kinematics >,std::allocator< std::shared_ptr< Physics::Bodies::Kinematics > > > const &

        __setitem__(Physics_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Bodies_Kinematics_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Bodies_Kinematics_Vector self, Physics_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > > &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Bodies_Kinematics_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::allocator_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Bodies_Kinematics_Vector self)"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator

        erase(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator first, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator last) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator
        last: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Bodies_Kinematics_Vector self) -> Physics_Bodies_Kinematics_Vector
        __init__(Physics_Bodies_Kinematics_Vector self, Physics_Bodies_Kinematics_Vector other) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > > const &

        __init__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type size) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type

        __init__(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type size, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & value) -> Physics_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type
        value: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        """
        _PhysicsSwig.Physics_Bodies_Kinematics_Vector_swiginit(self, _PhysicsSwig.new_Physics_Bodies_Kinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_front(self)

    def back(self):
        r"""back(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type

        resize(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type new_size, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator
        x: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        insert(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::iterator
        n: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::value_type const &

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type

        """
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics::Bodies::Kinematics > >::size_type"""
        return _PhysicsSwig.Physics_Bodies_Kinematics_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Bodies_Kinematics_Vector

# Register Physics_Bodies_Kinematics_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Bodies_Kinematics_Vector_swigregister(Physics_Bodies_Kinematics_Vector)

class Physics_Charges_Charge_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Charges::Charge > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charges_Charge_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charges_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charges_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type j) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type

        __setslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type j, Physics_Charges_Charge_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Charges::Charge >,std::allocator< std::shared_ptr< Physics::Charges::Charge > > > const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type

        __delitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice, Physics_Charges_Charge_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Charges::Charge >,std::allocator< std::shared_ptr< Physics::Charges::Charge > > > const &

        __setitem__(Physics_Charges_Charge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Charge > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charges_Charge_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charges_Charge_Vector self, Physics_Charges_Charge_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Charges::Charge > > &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charges_Charge_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::allocator_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charges_Charge_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator

        erase(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator first, std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator last) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator
        last: std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charges_Charge_Vector self) -> Physics_Charges_Charge_Vector
        __init__(Physics_Charges_Charge_Vector self, Physics_Charges_Charge_Vector other) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Charges::Charge > > const &

        __init__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type size) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type

        __init__(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type size, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & value) -> Physics_Charges_Charge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type
        value: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        """
        _PhysicsSwig.Physics_Charges_Charge_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charges_Charge_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_front(self)

    def back(self):
        r"""back(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type n, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type

        resize(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type new_size, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator pos, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator
        x: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        insert(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator pos, std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type n, std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::Charge > >::iterator
        n: std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::Charge > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charges_Charge_Vector self, std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type

        """
        return _PhysicsSwig.Physics_Charges_Charge_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charges_Charge_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Charge > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Charge_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_Charge_Vector

# Register Physics_Charges_Charge_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_Charge_Vector_swigregister(Physics_Charges_Charge_Vector)

class Physics_Charges_ContactGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charges_ContactGeometry_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charges_ContactGeometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charges_ContactGeometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type j) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type

        __setslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type j, Physics_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry >,std::allocator< std::shared_ptr< Physics::Charges::ContactGeometry > > > const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type

        __delitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice, Physics_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry >,std::allocator< std::shared_ptr< Physics::Charges::ContactGeometry > > > const &

        __setitem__(Physics_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charges_ContactGeometry_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charges_ContactGeometry_Vector self, Physics_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > > &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charges_ContactGeometry_Vector self)"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::allocator_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charges_ContactGeometry_Vector self)"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator

        erase(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator first, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator last) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator
        last: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charges_ContactGeometry_Vector self) -> Physics_Charges_ContactGeometry_Vector
        __init__(Physics_Charges_ContactGeometry_Vector self, Physics_Charges_ContactGeometry_Vector other) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > > const &

        __init__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type size) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type

        __init__(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type size, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & value) -> Physics_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type
        value: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        """
        _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charges_ContactGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type

        resize(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type new_size, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator
        x: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        insert(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::iterator
        n: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type

        """
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::ContactGeometry > >::size_type"""
        return _PhysicsSwig.Physics_Charges_ContactGeometry_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_ContactGeometry_Vector

# Register Physics_Charges_ContactGeometry_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_ContactGeometry_Vector_swigregister(Physics_Charges_ContactGeometry_Vector)

class Physics_Charges_Material_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Charges::Material > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Charges_Material_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Charges_Material_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Material_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Charges_Material_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Material_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type j) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type

        __setslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type j, Physics_Charges_Material_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Charges::Material >,std::allocator< std::shared_ptr< Physics::Charges::Material > > > const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type

        __delitem__(Physics_Charges_Material_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Charges_Material_Vector self, PySliceObject * slice) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Charges_Material_Vector self, PySliceObject * slice, Physics_Charges_Material_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Charges::Material >,std::allocator< std::shared_ptr< Physics::Charges::Material > > > const &

        __setitem__(Physics_Charges_Material_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type i, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Charges::Material > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Charges_Material_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_empty(self)

    def size(self):
        r"""size(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Charges_Material_Vector self, Physics_Charges_Material_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Charges::Material > > &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_begin(self)

    def end(self):
        r"""end(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Charges_Material_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::allocator_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Charges_Material_Vector self)"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator

        erase(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator first, std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator last) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator
        last: std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Charges_Material_Vector self) -> Physics_Charges_Material_Vector
        __init__(Physics_Charges_Material_Vector self, Physics_Charges_Material_Vector other) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Charges::Material > > const &

        __init__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type size) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type

        __init__(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type size, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & value) -> Physics_Charges_Material_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type
        value: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        """
        _PhysicsSwig.Physics_Charges_Material_Vector_swiginit(self, _PhysicsSwig.new_Physics_Charges_Material_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_front(self)

    def back(self):
        r"""back(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type n, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type

        resize(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type new_size, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator pos, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator
        x: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        insert(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator pos, std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type n, std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Charges::Material > >::iterator
        n: std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type
        x: std::vector< std::shared_ptr< Physics::Charges::Material > >::value_type const &

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Charges_Material_Vector self, std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type

        """
        return _PhysicsSwig.Physics_Charges_Material_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Charges_Material_Vector self) -> std::vector< std::shared_ptr< Physics::Charges::Material > >::size_type"""
        return _PhysicsSwig.Physics_Charges_Material_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Charges_Material_Vector

# Register Physics_Charges_Material_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Charges_Material_Vector_swigregister(Physics_Charges_Material_Vector)

class Physics_Interactions_Friction_DryFrictionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Friction_DryFrictionType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Friction_DryFrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Friction_DryFrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type j) -> Physics_Interactions_Friction_DryFrictionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type

        __setslice__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type j, Physics_Interactions_Friction_DryFrictionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType >,std::allocator< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type

        __delitem__(Physics_Interactions_Friction_DryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Friction_DryFrictionType_Vector self, PySliceObject * slice) -> Physics_Interactions_Friction_DryFrictionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Friction_DryFrictionType_Vector self, PySliceObject * slice, Physics_Interactions_Friction_DryFrictionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType >,std::allocator< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > > > const &

        __setitem__(Physics_Interactions_Friction_DryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Friction_DryFrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Friction_DryFrictionType_Vector self, Physics_Interactions_Friction_DryFrictionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > > &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Friction_DryFrictionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Friction_DryFrictionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator

        erase(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Friction_DryFrictionType_Vector self) -> Physics_Interactions_Friction_DryFrictionType_Vector
        __init__(Physics_Interactions_Friction_DryFrictionType_Vector self, Physics_Interactions_Friction_DryFrictionType_Vector other) -> Physics_Interactions_Friction_DryFrictionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > > const &

        __init__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type size) -> Physics_Interactions_Friction_DryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type

        __init__(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & value) -> Physics_Interactions_Friction_DryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Friction_DryFrictionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type

        resize(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        insert(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Friction_DryFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Friction_DryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::DryFrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Friction_DryFrictionType_Vector

# Register Physics_Interactions_Friction_DryFrictionType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Friction_DryFrictionType_Vector_swigregister(Physics_Interactions_Friction_DryFrictionType_Vector)

class Physics_Interactions_Friction_FrictionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Friction_FrictionType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Friction_FrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Friction_FrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type j) -> Physics_Interactions_Friction_FrictionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type

        __setslice__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type j, Physics_Interactions_Friction_FrictionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType >,std::allocator< std::shared_ptr< Physics::Interactions::Friction::FrictionType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type

        __delitem__(Physics_Interactions_Friction_FrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Friction_FrictionType_Vector self, PySliceObject * slice) -> Physics_Interactions_Friction_FrictionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Friction_FrictionType_Vector self, PySliceObject * slice, Physics_Interactions_Friction_FrictionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType >,std::allocator< std::shared_ptr< Physics::Interactions::Friction::FrictionType > > > const &

        __setitem__(Physics_Interactions_Friction_FrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Friction_FrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Friction_FrictionType_Vector self, Physics_Interactions_Friction_FrictionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > > &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Friction_FrictionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Friction_FrictionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator

        erase(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Friction_FrictionType_Vector self) -> Physics_Interactions_Friction_FrictionType_Vector
        __init__(Physics_Interactions_Friction_FrictionType_Vector self, Physics_Interactions_Friction_FrictionType_Vector other) -> Physics_Interactions_Friction_FrictionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > > const &

        __init__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type size) -> Physics_Interactions_Friction_FrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type

        __init__(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & value) -> Physics_Interactions_Friction_FrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Friction_FrictionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type

        resize(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        insert(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Friction_FrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Friction_FrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::FrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Friction_FrictionType_Vector

# Register Physics_Interactions_Friction_FrictionType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Friction_FrictionType_Vector_swigregister(Physics_Interactions_Friction_FrictionType_Vector)

class Physics_Interactions_Friction_ViscousFrictionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type j) -> Physics_Interactions_Friction_ViscousFrictionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type

        __setslice__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type j, Physics_Interactions_Friction_ViscousFrictionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType >,std::allocator< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type

        __delitem__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, PySliceObject * slice) -> Physics_Interactions_Friction_ViscousFrictionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, PySliceObject * slice, Physics_Interactions_Friction_ViscousFrictionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType >,std::allocator< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > > > const &

        __setitem__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Friction_ViscousFrictionType_Vector self, Physics_Interactions_Friction_ViscousFrictionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > > &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Friction_ViscousFrictionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Friction_ViscousFrictionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator

        erase(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> Physics_Interactions_Friction_ViscousFrictionType_Vector
        __init__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, Physics_Interactions_Friction_ViscousFrictionType_Vector other) -> Physics_Interactions_Friction_ViscousFrictionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > > const &

        __init__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type size) -> Physics_Interactions_Friction_ViscousFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type

        __init__(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & value) -> Physics_Interactions_Friction_ViscousFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Friction_ViscousFrictionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type

        resize(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        insert(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Friction_ViscousFrictionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Friction_ViscousFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Friction::ViscousFrictionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Friction_ViscousFrictionType_Vector

# Register Physics_Interactions_Friction_ViscousFrictionType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Friction_ViscousFrictionType_Vector_swigregister(Physics_Interactions_Friction_ViscousFrictionType_Vector)

class Physics_Interactions_Interaction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::Interaction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_Interaction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type j) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type

        __setslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type j, Physics_Interactions_Interaction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::Interaction >,std::allocator< std::shared_ptr< Physics::Interactions::Interaction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type

        __delitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice, Physics_Interactions_Interaction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::Interaction >,std::allocator< std::shared_ptr< Physics::Interactions::Interaction > > > const &

        __setitem__(Physics_Interactions_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_Interaction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_Interaction_Vector self, Physics_Interactions_Interaction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::Interaction > > &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_Interaction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_Interaction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator

        erase(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_Interaction_Vector self) -> Physics_Interactions_Interaction_Vector
        __init__(Physics_Interactions_Interaction_Vector self, Physics_Interactions_Interaction_Vector other) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::Interaction > > const &

        __init__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type size) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type

        __init__(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & value) -> Physics_Interactions_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_Interaction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_Interaction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type

        resize(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        insert(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::Interaction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_Interaction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_Interaction_Vector

# Register Physics_Interactions_Interaction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_Interaction_Vector_swigregister(Physics_Interactions_Interaction_Vector)

class Physics_Interactions_SurfaceContact_AdhesionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type j) -> Physics_Interactions_SurfaceContact_AdhesionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type j, Physics_Interactions_SurfaceContact_AdhesionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_AdhesionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_AdhesionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, Physics_Interactions_SurfaceContact_AdhesionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_AdhesionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_AdhesionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator

        erase(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> Physics_Interactions_SurfaceContact_AdhesionType_Vector
        __init__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, Physics_Interactions_SurfaceContact_AdhesionType_Vector other) -> Physics_Interactions_SurfaceContact_AdhesionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > > const &

        __init__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type size) -> Physics_Interactions_SurfaceContact_AdhesionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_AdhesionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_AdhesionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type

        resize(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_AdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_AdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_AdhesionType_Vector

# Register Physics_Interactions_SurfaceContact_AdhesionType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_AdhesionType_Vector_swigregister(Physics_Interactions_SurfaceContact_AdhesionType_Vector)

class Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type j) -> Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type j, Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator

        erase(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector
        __init__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector other) -> Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > > const &

        __init__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type size) -> Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type

        resize(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector

# Register Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector_swigregister(Physics_Interactions_SurfaceContact_AreaDependentElasticityType_Vector)

class Physics_Interactions_SurfaceContact_ElasticityType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type j) -> Physics_Interactions_SurfaceContact_ElasticityType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type j, Physics_Interactions_SurfaceContact_ElasticityType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_ElasticityType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_ElasticityType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, Physics_Interactions_SurfaceContact_ElasticityType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_ElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_ElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator

        erase(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> Physics_Interactions_SurfaceContact_ElasticityType_Vector
        __init__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, Physics_Interactions_SurfaceContact_ElasticityType_Vector other) -> Physics_Interactions_SurfaceContact_ElasticityType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > > const &

        __init__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type size) -> Physics_Interactions_SurfaceContact_ElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_ElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_ElasticityType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type

        resize(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_ElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_ElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_ElasticityType_Vector

# Register Physics_Interactions_SurfaceContact_ElasticityType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_ElasticityType_Vector_swigregister(Physics_Interactions_SurfaceContact_ElasticityType_Vector)

class Physics_Interactions_SurfaceContact_Model_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_Model_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_Model_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_Model_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type j) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type j, Physics_Interactions_SurfaceContact_Model_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_Model_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_Model_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_Model_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_Model_Vector self, Physics_Interactions_SurfaceContact_Model_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_Model_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_Model_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator

        erase(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_Model_Vector self) -> Physics_Interactions_SurfaceContact_Model_Vector
        __init__(Physics_Interactions_SurfaceContact_Model_Vector self, Physics_Interactions_SurfaceContact_Model_Vector other) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > > const &

        __init__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type size) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type

        __init__(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & value) -> Physics_Interactions_SurfaceContact_Model_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_Model_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type

        resize(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_Model_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_Model_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::Model > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_Model_Vector

# Register Physics_Interactions_SurfaceContact_Model_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_Model_Vector_swigregister(Physics_Interactions_SurfaceContact_Model_Vector)

class Physics_Interactions_SurfaceContact_NoAdhesionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type j) -> Physics_Interactions_SurfaceContact_NoAdhesionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type j, Physics_Interactions_SurfaceContact_NoAdhesionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_NoAdhesionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_NoAdhesionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, Physics_Interactions_SurfaceContact_NoAdhesionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator

        erase(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> Physics_Interactions_SurfaceContact_NoAdhesionType_Vector
        __init__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, Physics_Interactions_SurfaceContact_NoAdhesionType_Vector other) -> Physics_Interactions_SurfaceContact_NoAdhesionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > > const &

        __init__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type size) -> Physics_Interactions_SurfaceContact_NoAdhesionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_NoAdhesionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_NoAdhesionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type

        resize(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoAdhesionType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_NoAdhesionType_Vector

# Register Physics_Interactions_SurfaceContact_NoAdhesionType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_NoAdhesionType_Vector_swigregister(Physics_Interactions_SurfaceContact_NoAdhesionType_Vector)

class Physics_Interactions_SurfaceContact_NoElasticityType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type j) -> Physics_Interactions_SurfaceContact_NoElasticityType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type j, Physics_Interactions_SurfaceContact_NoElasticityType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_NoElasticityType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_NoElasticityType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, Physics_Interactions_SurfaceContact_NoElasticityType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator

        erase(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> Physics_Interactions_SurfaceContact_NoElasticityType_Vector
        __init__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, Physics_Interactions_SurfaceContact_NoElasticityType_Vector other) -> Physics_Interactions_SurfaceContact_NoElasticityType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > > const &

        __init__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type size) -> Physics_Interactions_SurfaceContact_NoElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_NoElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_NoElasticityType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type

        resize(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_NoElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_NoElasticityType_Vector

# Register Physics_Interactions_SurfaceContact_NoElasticityType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_NoElasticityType_Vector_swigregister(Physics_Interactions_SurfaceContact_NoElasticityType_Vector)

class Physics_Interactions_SurfaceContact_NoPlasticityType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type j) -> Physics_Interactions_SurfaceContact_NoPlasticityType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type j, Physics_Interactions_SurfaceContact_NoPlasticityType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_NoPlasticityType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_NoPlasticityType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, Physics_Interactions_SurfaceContact_NoPlasticityType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator

        erase(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> Physics_Interactions_SurfaceContact_NoPlasticityType_Vector
        __init__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, Physics_Interactions_SurfaceContact_NoPlasticityType_Vector other) -> Physics_Interactions_SurfaceContact_NoPlasticityType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > > const &

        __init__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type size) -> Physics_Interactions_SurfaceContact_NoPlasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_NoPlasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_NoPlasticityType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type

        resize(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NoPlasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_NoPlasticityType_Vector

# Register Physics_Interactions_SurfaceContact_NoPlasticityType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_NoPlasticityType_Vector_swigregister(Physics_Interactions_SurfaceContact_NoPlasticityType_Vector)

class Physics_Interactions_SurfaceContact_NormalInteraction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type j) -> Physics_Interactions_SurfaceContact_NormalInteraction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type j, Physics_Interactions_SurfaceContact_NormalInteraction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_NormalInteraction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_NormalInteraction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, Physics_Interactions_SurfaceContact_NormalInteraction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator

        erase(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> Physics_Interactions_SurfaceContact_NormalInteraction_Vector
        __init__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, Physics_Interactions_SurfaceContact_NormalInteraction_Vector other) -> Physics_Interactions_SurfaceContact_NormalInteraction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > > const &

        __init__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type size) -> Physics_Interactions_SurfaceContact_NormalInteraction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type

        __init__(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & value) -> Physics_Interactions_SurfaceContact_NormalInteraction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_NormalInteraction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type

        resize(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_NormalInteraction_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::NormalInteraction > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_NormalInteraction_Vector

# Register Physics_Interactions_SurfaceContact_NormalInteraction_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_NormalInteraction_Vector_swigregister(Physics_Interactions_SurfaceContact_NormalInteraction_Vector)

class Physics_Interactions_SurfaceContact_PlasticityType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type j) -> Physics_Interactions_SurfaceContact_PlasticityType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type j, Physics_Interactions_SurfaceContact_PlasticityType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_PlasticityType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_PlasticityType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, Physics_Interactions_SurfaceContact_PlasticityType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_PlasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_PlasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator

        erase(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> Physics_Interactions_SurfaceContact_PlasticityType_Vector
        __init__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, Physics_Interactions_SurfaceContact_PlasticityType_Vector other) -> Physics_Interactions_SurfaceContact_PlasticityType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > > const &

        __init__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type size) -> Physics_Interactions_SurfaceContact_PlasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_PlasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_PlasticityType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type

        resize(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_PlasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_PlasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PlasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_PlasticityType_Vector

# Register Physics_Interactions_SurfaceContact_PlasticityType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_PlasticityType_Vector_swigregister(Physics_Interactions_SurfaceContact_PlasticityType_Vector)

class Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type j) -> Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type

        __setslice__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type j, Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > > > const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type

        __delitem__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, PySliceObject * slice) -> Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, PySliceObject * slice, Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType >,std::allocator< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > > > const &

        __setitem__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type i, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_empty(self)

    def size(self):
        r"""size(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > > &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_begin(self)

    def end(self):
        r"""end(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::allocator_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self)"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator

        erase(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator first, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator last) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator
        last: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector
        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector other) -> Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > > const &

        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type size) -> Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type

        __init__(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & value) -> Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type
        value: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        """
        _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_swiginit(self, _PhysicsSwig.new_Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_front(self)

    def back(self):
        r"""back(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type

        resize(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type new_size, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        insert(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator pos, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type n, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::iterator
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type
        x: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::value_type const &

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self, std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type

        """
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector self) -> std::vector< std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType > >::size_type"""
        return _PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector

# Register Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector_swigregister(Physics_Interactions_SurfaceContact_PointwiseElasticityType_Vector)

class Physics_Signals_AngleValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::AngleValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngleValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngleValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngleValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type j) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type

        __setslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type j, Physics_Signals_AngleValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::AngleValue >,std::allocator< std::shared_ptr< Physics::Signals::AngleValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type

        __delitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice, Physics_Signals_AngleValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::AngleValue >,std::allocator< std::shared_ptr< Physics::Signals::AngleValue > > > const &

        __setitem__(Physics_Signals_AngleValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngleValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngleValue_Vector self, Physics_Signals_AngleValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::AngleValue > > &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngleValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngleValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator

        erase(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngleValue_Vector self) -> Physics_Signals_AngleValue_Vector
        __init__(Physics_Signals_AngleValue_Vector self, Physics_Signals_AngleValue_Vector other) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::AngleValue > > const &

        __init__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type size) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type

        __init__(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & value) -> Physics_Signals_AngleValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngleValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngleValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type

        resize(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        insert(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngleValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngleValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngleValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngleValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngleValue_Vector

# Register Physics_Signals_AngleValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngleValue_Vector_swigregister(Physics_Signals_AngleValue_Vector)

class Physics_Signals_AngularVelocityValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_AngularVelocityValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_AngularVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_AngularVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type j) -> Physics_Signals_AngularVelocityValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type

        __setslice__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type j, Physics_Signals_AngularVelocityValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue >,std::allocator< std::shared_ptr< Physics::Signals::AngularVelocityValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type

        __delitem__(Physics_Signals_AngularVelocityValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_AngularVelocityValue_Vector self, PySliceObject * slice) -> Physics_Signals_AngularVelocityValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_AngularVelocityValue_Vector self, PySliceObject * slice, Physics_Signals_AngularVelocityValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue >,std::allocator< std::shared_ptr< Physics::Signals::AngularVelocityValue > > > const &

        __setitem__(Physics_Signals_AngularVelocityValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_AngularVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_AngularVelocityValue_Vector self, Physics_Signals_AngularVelocityValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > > &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_AngularVelocityValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_AngularVelocityValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator

        erase(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_AngularVelocityValue_Vector self) -> Physics_Signals_AngularVelocityValue_Vector
        __init__(Physics_Signals_AngularVelocityValue_Vector self, Physics_Signals_AngularVelocityValue_Vector other) -> Physics_Signals_AngularVelocityValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > > const &

        __init__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type size) -> Physics_Signals_AngularVelocityValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type

        __init__(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & value) -> Physics_Signals_AngularVelocityValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_AngularVelocityValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type

        resize(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        insert(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_AngularVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_AngularVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::AngularVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_AngularVelocityValue_Vector

# Register Physics_Signals_AngularVelocityValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_AngularVelocityValue_Vector_swigregister(Physics_Signals_AngularVelocityValue_Vector)

class Physics_Signals_DirectionalAccelerationValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DirectionalAccelerationValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DirectionalAccelerationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DirectionalAccelerationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type j) -> Physics_Signals_DirectionalAccelerationValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type

        __setslice__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type j, Physics_Signals_DirectionalAccelerationValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type

        __delitem__(Physics_Signals_DirectionalAccelerationValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DirectionalAccelerationValue_Vector self, PySliceObject * slice) -> Physics_Signals_DirectionalAccelerationValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DirectionalAccelerationValue_Vector self, PySliceObject * slice, Physics_Signals_DirectionalAccelerationValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > > > const &

        __setitem__(Physics_Signals_DirectionalAccelerationValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DirectionalAccelerationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DirectionalAccelerationValue_Vector self, Physics_Signals_DirectionalAccelerationValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DirectionalAccelerationValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DirectionalAccelerationValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator

        erase(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DirectionalAccelerationValue_Vector self) -> Physics_Signals_DirectionalAccelerationValue_Vector
        __init__(Physics_Signals_DirectionalAccelerationValue_Vector self, Physics_Signals_DirectionalAccelerationValue_Vector other) -> Physics_Signals_DirectionalAccelerationValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > > const &

        __init__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type size) -> Physics_Signals_DirectionalAccelerationValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type

        __init__(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & value) -> Physics_Signals_DirectionalAccelerationValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DirectionalAccelerationValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type

        resize(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        insert(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DirectionalAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DirectionalAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAccelerationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DirectionalAccelerationValue_Vector

# Register Physics_Signals_DirectionalAccelerationValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DirectionalAccelerationValue_Vector_swigregister(Physics_Signals_DirectionalAccelerationValue_Vector)

class Physics_Signals_DirectionalAngularAccelerationValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type j) -> Physics_Signals_DirectionalAngularAccelerationValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type

        __setslice__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type j, Physics_Signals_DirectionalAngularAccelerationValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type

        __delitem__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, PySliceObject * slice) -> Physics_Signals_DirectionalAngularAccelerationValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, PySliceObject * slice, Physics_Signals_DirectionalAngularAccelerationValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > > > const &

        __setitem__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, Physics_Signals_DirectionalAngularAccelerationValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DirectionalAngularAccelerationValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DirectionalAngularAccelerationValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator

        erase(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> Physics_Signals_DirectionalAngularAccelerationValue_Vector
        __init__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, Physics_Signals_DirectionalAngularAccelerationValue_Vector other) -> Physics_Signals_DirectionalAngularAccelerationValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > > const &

        __init__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type size) -> Physics_Signals_DirectionalAngularAccelerationValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type

        __init__(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & value) -> Physics_Signals_DirectionalAngularAccelerationValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DirectionalAngularAccelerationValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type

        resize(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        insert(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DirectionalAngularAccelerationValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DirectionalAngularAccelerationValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DirectionalAngularAccelerationValue_Vector

# Register Physics_Signals_DirectionalAngularAccelerationValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DirectionalAngularAccelerationValue_Vector_swigregister(Physics_Signals_DirectionalAngularAccelerationValue_Vector)

class Physics_Signals_DirectionalForceValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DirectionalForceValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DirectionalForceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DirectionalForceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type j) -> Physics_Signals_DirectionalForceValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type

        __setslice__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type j, Physics_Signals_DirectionalForceValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalForceValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type

        __delitem__(Physics_Signals_DirectionalForceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DirectionalForceValue_Vector self, PySliceObject * slice) -> Physics_Signals_DirectionalForceValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DirectionalForceValue_Vector self, PySliceObject * slice, Physics_Signals_DirectionalForceValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalForceValue > > > const &

        __setitem__(Physics_Signals_DirectionalForceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DirectionalForceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DirectionalForceValue_Vector self, Physics_Signals_DirectionalForceValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DirectionalForceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DirectionalForceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator

        erase(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DirectionalForceValue_Vector self) -> Physics_Signals_DirectionalForceValue_Vector
        __init__(Physics_Signals_DirectionalForceValue_Vector self, Physics_Signals_DirectionalForceValue_Vector other) -> Physics_Signals_DirectionalForceValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > > const &

        __init__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type size) -> Physics_Signals_DirectionalForceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type

        __init__(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & value) -> Physics_Signals_DirectionalForceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DirectionalForceValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type

        resize(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        insert(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DirectionalForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DirectionalForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalForceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DirectionalForceValue_Vector

# Register Physics_Signals_DirectionalForceValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DirectionalForceValue_Vector_swigregister(Physics_Signals_DirectionalForceValue_Vector)

class Physics_Signals_DirectionalTorqueValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DirectionalTorqueValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DirectionalTorqueValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DirectionalTorqueValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type j) -> Physics_Signals_DirectionalTorqueValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type

        __setslice__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type j, Physics_Signals_DirectionalTorqueValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type

        __delitem__(Physics_Signals_DirectionalTorqueValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DirectionalTorqueValue_Vector self, PySliceObject * slice) -> Physics_Signals_DirectionalTorqueValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DirectionalTorqueValue_Vector self, PySliceObject * slice, Physics_Signals_DirectionalTorqueValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > > > const &

        __setitem__(Physics_Signals_DirectionalTorqueValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DirectionalTorqueValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DirectionalTorqueValue_Vector self, Physics_Signals_DirectionalTorqueValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DirectionalTorqueValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DirectionalTorqueValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator

        erase(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DirectionalTorqueValue_Vector self) -> Physics_Signals_DirectionalTorqueValue_Vector
        __init__(Physics_Signals_DirectionalTorqueValue_Vector self, Physics_Signals_DirectionalTorqueValue_Vector other) -> Physics_Signals_DirectionalTorqueValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > > const &

        __init__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type size) -> Physics_Signals_DirectionalTorqueValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type

        __init__(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & value) -> Physics_Signals_DirectionalTorqueValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DirectionalTorqueValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type

        resize(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        insert(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DirectionalTorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DirectionalTorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalTorqueValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DirectionalTorqueValue_Vector

# Register Physics_Signals_DirectionalTorqueValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DirectionalTorqueValue_Vector_swigregister(Physics_Signals_DirectionalTorqueValue_Vector)

class Physics_Signals_DirectionalVelocityValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DirectionalVelocityValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DirectionalVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DirectionalVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type j) -> Physics_Signals_DirectionalVelocityValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type

        __setslice__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type j, Physics_Signals_DirectionalVelocityValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type

        __delitem__(Physics_Signals_DirectionalVelocityValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DirectionalVelocityValue_Vector self, PySliceObject * slice) -> Physics_Signals_DirectionalVelocityValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DirectionalVelocityValue_Vector self, PySliceObject * slice, Physics_Signals_DirectionalVelocityValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue >,std::allocator< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > > > const &

        __setitem__(Physics_Signals_DirectionalVelocityValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DirectionalVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DirectionalVelocityValue_Vector self, Physics_Signals_DirectionalVelocityValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DirectionalVelocityValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DirectionalVelocityValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator

        erase(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DirectionalVelocityValue_Vector self) -> Physics_Signals_DirectionalVelocityValue_Vector
        __init__(Physics_Signals_DirectionalVelocityValue_Vector self, Physics_Signals_DirectionalVelocityValue_Vector other) -> Physics_Signals_DirectionalVelocityValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > > const &

        __init__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type size) -> Physics_Signals_DirectionalVelocityValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type

        __init__(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & value) -> Physics_Signals_DirectionalVelocityValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DirectionalVelocityValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type

        resize(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        insert(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DirectionalVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DirectionalVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DirectionalVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DirectionalVelocityValue_Vector

# Register Physics_Signals_DirectionalVelocityValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DirectionalVelocityValue_Vector_swigregister(Physics_Signals_DirectionalVelocityValue_Vector)

class Physics_Signals_DistanceValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::DistanceValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_DistanceValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_DistanceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_DistanceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type j) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type

        __setslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type j, Physics_Signals_DistanceValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::DistanceValue >,std::allocator< std::shared_ptr< Physics::Signals::DistanceValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type

        __delitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice, Physics_Signals_DistanceValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::DistanceValue >,std::allocator< std::shared_ptr< Physics::Signals::DistanceValue > > > const &

        __setitem__(Physics_Signals_DistanceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_DistanceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_DistanceValue_Vector self, Physics_Signals_DistanceValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > > &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_DistanceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_DistanceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator

        erase(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_DistanceValue_Vector self) -> Physics_Signals_DistanceValue_Vector
        __init__(Physics_Signals_DistanceValue_Vector self, Physics_Signals_DistanceValue_Vector other) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > > const &

        __init__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type size) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type

        __init__(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & value) -> Physics_Signals_DistanceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_DistanceValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_DistanceValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type

        resize(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        insert(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_DistanceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_DistanceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::DistanceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_DistanceValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_DistanceValue_Vector

# Register Physics_Signals_DistanceValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_DistanceValue_Vector_swigregister(Physics_Signals_DistanceValue_Vector)

class Physics_Signals_ForceValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::ForceValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_ForceValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_ForceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_ForceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type j) -> Physics_Signals_ForceValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type

        __setslice__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type j, Physics_Signals_ForceValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::ForceValue >,std::allocator< std::shared_ptr< Physics::Signals::ForceValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type

        __delitem__(Physics_Signals_ForceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_ForceValue_Vector self, PySliceObject * slice) -> Physics_Signals_ForceValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_ForceValue_Vector self, PySliceObject * slice, Physics_Signals_ForceValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::ForceValue >,std::allocator< std::shared_ptr< Physics::Signals::ForceValue > > > const &

        __setitem__(Physics_Signals_ForceValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_ForceValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_ForceValue_Vector self, Physics_Signals_ForceValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::ForceValue > > &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_ForceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_ForceValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator

        erase(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_ForceValue_Vector self) -> Physics_Signals_ForceValue_Vector
        __init__(Physics_Signals_ForceValue_Vector self, Physics_Signals_ForceValue_Vector other) -> Physics_Signals_ForceValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::ForceValue > > const &

        __init__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type size) -> Physics_Signals_ForceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type

        __init__(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & value) -> Physics_Signals_ForceValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_ForceValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_ForceValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type

        resize(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        insert(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_ForceValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_ForceValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ForceValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ForceValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ForceValue_Vector

# Register Physics_Signals_ForceValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ForceValue_Vector_swigregister(Physics_Signals_ForceValue_Vector)

class Physics_Signals_Input_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::Input > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Input_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Input_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Input_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Input_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Input_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type j) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type

        __setslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type j, Physics_Signals_Input_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::Input >,std::allocator< std::shared_ptr< Physics::Signals::Input > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type

        __delitem__(Physics_Signals_Input_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Input_Vector self, PySliceObject * slice) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Input_Vector self, PySliceObject * slice, Physics_Signals_Input_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::Input >,std::allocator< std::shared_ptr< Physics::Signals::Input > > > const &

        __setitem__(Physics_Signals_Input_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Input > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Input_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Input_Vector self, Physics_Signals_Input_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::Input > > &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Input_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Input_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator

        erase(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Input_Vector self) -> Physics_Signals_Input_Vector
        __init__(Physics_Signals_Input_Vector self, Physics_Signals_Input_Vector other) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::Input > > const &

        __init__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type size) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type

        __init__(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & value) -> Physics_Signals_Input_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Input_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Input_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type

        resize(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        insert(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Input > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Input > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Input_Vector self, std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Input_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Input_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Input > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Input_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Input_Vector

# Register Physics_Signals_Input_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Input_Vector_swigregister(Physics_Signals_Input_Vector)

class Physics_Signals_InputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::InputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_InputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type j) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type

        __setslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type j, Physics_Signals_InputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::InputSignal >,std::allocator< std::shared_ptr< Physics::Signals::InputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type

        __delitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice, Physics_Signals_InputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::InputSignal >,std::allocator< std::shared_ptr< Physics::Signals::InputSignal > > > const &

        __setitem__(Physics_Signals_InputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_InputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_InputSignal_Vector self, Physics_Signals_InputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::InputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_InputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_InputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator

        erase(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_InputSignal_Vector self) -> Physics_Signals_InputSignal_Vector
        __init__(Physics_Signals_InputSignal_Vector self, Physics_Signals_InputSignal_Vector other) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::InputSignal > > const &

        __init__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type size) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type

        __init__(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & value) -> Physics_Signals_InputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_InputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_InputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type

        resize(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        insert(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_InputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_InputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::InputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_InputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_InputSignal_Vector

# Register Physics_Signals_InputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_InputSignal_Vector_swigregister(Physics_Signals_InputSignal_Vector)

class Physics_Signals_LinearVelocityValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_LinearVelocityValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_LinearVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_LinearVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type j) -> Physics_Signals_LinearVelocityValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type

        __setslice__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type j, Physics_Signals_LinearVelocityValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue >,std::allocator< std::shared_ptr< Physics::Signals::LinearVelocityValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type

        __delitem__(Physics_Signals_LinearVelocityValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_LinearVelocityValue_Vector self, PySliceObject * slice) -> Physics_Signals_LinearVelocityValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_LinearVelocityValue_Vector self, PySliceObject * slice, Physics_Signals_LinearVelocityValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue >,std::allocator< std::shared_ptr< Physics::Signals::LinearVelocityValue > > > const &

        __setitem__(Physics_Signals_LinearVelocityValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_LinearVelocityValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_LinearVelocityValue_Vector self, Physics_Signals_LinearVelocityValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > > &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_LinearVelocityValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_LinearVelocityValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator

        erase(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_LinearVelocityValue_Vector self) -> Physics_Signals_LinearVelocityValue_Vector
        __init__(Physics_Signals_LinearVelocityValue_Vector self, Physics_Signals_LinearVelocityValue_Vector other) -> Physics_Signals_LinearVelocityValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > > const &

        __init__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type size) -> Physics_Signals_LinearVelocityValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type

        __init__(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & value) -> Physics_Signals_LinearVelocityValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_LinearVelocityValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type

        resize(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        insert(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_LinearVelocityValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_LinearVelocityValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::LinearVelocityValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_LinearVelocityValue_Vector

# Register Physics_Signals_LinearVelocityValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_LinearVelocityValue_Vector_swigregister(Physics_Signals_LinearVelocityValue_Vector)

class Physics_Signals_Output_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::Output > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Output_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Output_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Output_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Output_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Output_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type j) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type

        __setslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type j, Physics_Signals_Output_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::Output >,std::allocator< std::shared_ptr< Physics::Signals::Output > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type

        __delitem__(Physics_Signals_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Output_Vector self, PySliceObject * slice) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Output_Vector self, PySliceObject * slice, Physics_Signals_Output_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::Output >,std::allocator< std::shared_ptr< Physics::Signals::Output > > > const &

        __setitem__(Physics_Signals_Output_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Output > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Output_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Output_Vector self, Physics_Signals_Output_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::Output > > &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Output_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Output_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator

        erase(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Output_Vector self) -> Physics_Signals_Output_Vector
        __init__(Physics_Signals_Output_Vector self, Physics_Signals_Output_Vector other) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::Output > > const &

        __init__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type size) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type

        __init__(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & value) -> Physics_Signals_Output_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Output_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Output_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type

        resize(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        insert(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Output > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Output > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Output_Vector self, std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Output_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Output_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Output > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Output_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Output_Vector

# Register Physics_Signals_Output_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Output_Vector_swigregister(Physics_Signals_Output_Vector)

class Physics_Signals_OutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::OutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_OutputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type j) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type

        __setslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type j, Physics_Signals_OutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::OutputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type

        __delitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice, Physics_Signals_OutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::OutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::OutputSignal > > > const &

        __setitem__(Physics_Signals_OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_OutputSignal_Vector self, Physics_Signals_OutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_OutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_OutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator

        erase(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_OutputSignal_Vector self) -> Physics_Signals_OutputSignal_Vector
        __init__(Physics_Signals_OutputSignal_Vector self, Physics_Signals_OutputSignal_Vector other) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > > const &

        __init__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type size) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type

        __init__(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & value) -> Physics_Signals_OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_OutputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_OutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type

        resize(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        insert(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_OutputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_OutputSignal_Vector

# Register Physics_Signals_OutputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_OutputSignal_Vector_swigregister(Physics_Signals_OutputSignal_Vector)

class Physics_Signals_PositionValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::PositionValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_PositionValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_PositionValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_PositionValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type j) -> Physics_Signals_PositionValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type

        __setslice__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type j, Physics_Signals_PositionValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::PositionValue >,std::allocator< std::shared_ptr< Physics::Signals::PositionValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type

        __delitem__(Physics_Signals_PositionValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_PositionValue_Vector self, PySliceObject * slice) -> Physics_Signals_PositionValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_PositionValue_Vector self, PySliceObject * slice, Physics_Signals_PositionValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::PositionValue >,std::allocator< std::shared_ptr< Physics::Signals::PositionValue > > > const &

        __setitem__(Physics_Signals_PositionValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_PositionValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_PositionValue_Vector self, Physics_Signals_PositionValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::PositionValue > > &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_PositionValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_PositionValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator

        erase(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_PositionValue_Vector self) -> Physics_Signals_PositionValue_Vector
        __init__(Physics_Signals_PositionValue_Vector self, Physics_Signals_PositionValue_Vector other) -> Physics_Signals_PositionValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::PositionValue > > const &

        __init__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type size) -> Physics_Signals_PositionValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type

        __init__(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & value) -> Physics_Signals_PositionValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_PositionValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_PositionValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type

        resize(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        insert(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_PositionValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_PositionValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::PositionValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_PositionValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_PositionValue_Vector

# Register Physics_Signals_PositionValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_PositionValue_Vector_swigregister(Physics_Signals_PositionValue_Vector)

class Physics_Signals_RPYvalue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::RPYvalue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RPYvalue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RPYvalue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RPYvalue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type j) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type

        __setslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type j, Physics_Signals_RPYvalue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::RPYvalue >,std::allocator< std::shared_ptr< Physics::Signals::RPYvalue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type

        __delitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice, Physics_Signals_RPYvalue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::RPYvalue >,std::allocator< std::shared_ptr< Physics::Signals::RPYvalue > > > const &

        __setitem__(Physics_Signals_RPYvalue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RPYvalue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RPYvalue_Vector self, Physics_Signals_RPYvalue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > > &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RPYvalue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RPYvalue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator

        erase(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RPYvalue_Vector self) -> Physics_Signals_RPYvalue_Vector
        __init__(Physics_Signals_RPYvalue_Vector self, Physics_Signals_RPYvalue_Vector other) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > > const &

        __init__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type size) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type

        __init__(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & value) -> Physics_Signals_RPYvalue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RPYvalue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RPYvalue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type

        resize(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        insert(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RPYvalue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RPYvalue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RPYvalue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RPYvalue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RPYvalue_Vector

# Register Physics_Signals_RPYvalue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RPYvalue_Vector_swigregister(Physics_Signals_RPYvalue_Vector)

class Physics_Signals_RealInputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RealInputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RealInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RealInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type j) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type

        __setslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type j, Physics_Signals_RealInputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal >,std::allocator< std::shared_ptr< Physics::Signals::RealInputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type

        __delitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice, Physics_Signals_RealInputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal >,std::allocator< std::shared_ptr< Physics::Signals::RealInputSignal > > > const &

        __setitem__(Physics_Signals_RealInputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RealInputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RealInputSignal_Vector self, Physics_Signals_RealInputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RealInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RealInputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator

        erase(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RealInputSignal_Vector self) -> Physics_Signals_RealInputSignal_Vector
        __init__(Physics_Signals_RealInputSignal_Vector self, Physics_Signals_RealInputSignal_Vector other) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > > const &

        __init__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type size) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type

        __init__(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & value) -> Physics_Signals_RealInputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RealInputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type

        resize(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        insert(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RealInputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RealInputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealInputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealInputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RealInputSignal_Vector

# Register Physics_Signals_RealInputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RealInputSignal_Vector_swigregister(Physics_Signals_RealInputSignal_Vector)

class Physics_Signals_RealOutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RealOutputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RealOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RealOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type j) -> Physics_Signals_RealOutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type

        __setslice__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type j, Physics_Signals_RealOutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::RealOutputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type

        __delitem__(Physics_Signals_RealOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RealOutputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_RealOutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RealOutputSignal_Vector self, PySliceObject * slice, Physics_Signals_RealOutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::RealOutputSignal > > > const &

        __setitem__(Physics_Signals_RealOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RealOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RealOutputSignal_Vector self, Physics_Signals_RealOutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RealOutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RealOutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator

        erase(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RealOutputSignal_Vector self) -> Physics_Signals_RealOutputSignal_Vector
        __init__(Physics_Signals_RealOutputSignal_Vector self, Physics_Signals_RealOutputSignal_Vector other) -> Physics_Signals_RealOutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > > const &

        __init__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type size) -> Physics_Signals_RealOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type

        __init__(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & value) -> Physics_Signals_RealOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RealOutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type

        resize(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        insert(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RealOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RealOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RealOutputSignal_Vector

# Register Physics_Signals_RealOutputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RealOutputSignal_Vector_swigregister(Physics_Signals_RealOutputSignal_Vector)

class Physics_Signals_RealValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::RealValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_RealValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_RealValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_RealValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type j) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type

        __setslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type j, Physics_Signals_RealValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::RealValue >,std::allocator< std::shared_ptr< Physics::Signals::RealValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type

        __delitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice, Physics_Signals_RealValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::RealValue >,std::allocator< std::shared_ptr< Physics::Signals::RealValue > > > const &

        __setitem__(Physics_Signals_RealValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_RealValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_RealValue_Vector self, Physics_Signals_RealValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::RealValue > > &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_RealValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_RealValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator

        erase(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_RealValue_Vector self) -> Physics_Signals_RealValue_Vector
        __init__(Physics_Signals_RealValue_Vector self, Physics_Signals_RealValue_Vector other) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::RealValue > > const &

        __init__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type size) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type

        __init__(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & value) -> Physics_Signals_RealValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_RealValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_RealValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type

        resize(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        insert(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_RealValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_RealValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::RealValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_RealValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_RealValue_Vector

# Register Physics_Signals_RealValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_RealValue_Vector_swigregister(Physics_Signals_RealValue_Vector)

class Physics_Signals_TorqueValue_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::TorqueValue > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_TorqueValue_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_TorqueValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_TorqueValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type j) -> Physics_Signals_TorqueValue_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type

        __setslice__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type j, Physics_Signals_TorqueValue_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::TorqueValue >,std::allocator< std::shared_ptr< Physics::Signals::TorqueValue > > > const &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type

        __delitem__(Physics_Signals_TorqueValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_TorqueValue_Vector self, PySliceObject * slice) -> Physics_Signals_TorqueValue_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_TorqueValue_Vector self, PySliceObject * slice, Physics_Signals_TorqueValue_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::TorqueValue >,std::allocator< std::shared_ptr< Physics::Signals::TorqueValue > > > const &

        __setitem__(Physics_Signals_TorqueValue_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_TorqueValue_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_TorqueValue_Vector self, Physics_Signals_TorqueValue_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > > &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_TorqueValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_TorqueValue_Vector self)"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator

        erase(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_TorqueValue_Vector self) -> Physics_Signals_TorqueValue_Vector
        __init__(Physics_Signals_TorqueValue_Vector self, Physics_Signals_TorqueValue_Vector other) -> Physics_Signals_TorqueValue_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > > const &

        __init__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type size) -> Physics_Signals_TorqueValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type

        __init__(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & value) -> Physics_Signals_TorqueValue_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_TorqueValue_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_TorqueValue_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type

        resize(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        insert(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_TorqueValue_Vector self, std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_TorqueValue_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::TorqueValue > >::size_type"""
        return _PhysicsSwig.Physics_Signals_TorqueValue_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_TorqueValue_Vector

# Register Physics_Signals_TorqueValue_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_TorqueValue_Vector_swigregister(Physics_Signals_TorqueValue_Vector)

class Physics_Signals_Value_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::Value > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Value_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Value_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Value_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type j) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type

        __setslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type j, Physics_Signals_Value_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::Value >,std::allocator< std::shared_ptr< Physics::Signals::Value > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type

        __delitem__(Physics_Signals_Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Value_Vector self, PySliceObject * slice) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Value_Vector self, PySliceObject * slice, Physics_Signals_Value_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::Value >,std::allocator< std::shared_ptr< Physics::Signals::Value > > > const &

        __setitem__(Physics_Signals_Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Value > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Value_Vector self, Physics_Signals_Value_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::Value > > &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator

        erase(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Value_Vector self) -> Physics_Signals_Value_Vector
        __init__(Physics_Signals_Value_Vector self, Physics_Signals_Value_Vector other) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::Value > > const &

        __init__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type size) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type

        __init__(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & value) -> Physics_Signals_Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Value_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Value_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type

        resize(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        insert(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Value > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Value_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Value_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Value_Vector

# Register Physics_Signals_Value_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Value_Vector_swigregister(Physics_Signals_Value_Vector)

class Physics_Signals_ValueOutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_ValueOutputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_ValueOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_ValueOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type j) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type

        __setslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type j, Physics_Signals_ValueOutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::ValueOutputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type

        __delitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice, Physics_Signals_ValueOutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::ValueOutputSignal > > > const &

        __setitem__(Physics_Signals_ValueOutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_ValueOutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_ValueOutputSignal_Vector self, Physics_Signals_ValueOutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_ValueOutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_ValueOutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator

        erase(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_ValueOutputSignal_Vector self) -> Physics_Signals_ValueOutputSignal_Vector
        __init__(Physics_Signals_ValueOutputSignal_Vector self, Physics_Signals_ValueOutputSignal_Vector other) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > > const &

        __init__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type size) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type

        __init__(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & value) -> Physics_Signals_ValueOutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_ValueOutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type

        resize(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        insert(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_ValueOutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_ValueOutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::ValueOutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_ValueOutputSignal_Vector

# Register Physics_Signals_ValueOutputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_ValueOutputSignal_Vector_swigregister(Physics_Signals_ValueOutputSignal_Vector)

class Physics_Signals_Vec3OutputSignal_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Vec3OutputSignal_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Vec3OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Vec3OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type j) -> Physics_Signals_Vec3OutputSignal_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type

        __setslice__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type j, Physics_Signals_Vec3OutputSignal_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::Vec3OutputSignal > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type

        __delitem__(Physics_Signals_Vec3OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Vec3OutputSignal_Vector self, PySliceObject * slice) -> Physics_Signals_Vec3OutputSignal_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Vec3OutputSignal_Vector self, PySliceObject * slice, Physics_Signals_Vec3OutputSignal_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal >,std::allocator< std::shared_ptr< Physics::Signals::Vec3OutputSignal > > > const &

        __setitem__(Physics_Signals_Vec3OutputSignal_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Vec3OutputSignal_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Vec3OutputSignal_Vector self, Physics_Signals_Vec3OutputSignal_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Vec3OutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Vec3OutputSignal_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator

        erase(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Vec3OutputSignal_Vector self) -> Physics_Signals_Vec3OutputSignal_Vector
        __init__(Physics_Signals_Vec3OutputSignal_Vector self, Physics_Signals_Vec3OutputSignal_Vector other) -> Physics_Signals_Vec3OutputSignal_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > > const &

        __init__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type size) -> Physics_Signals_Vec3OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type

        __init__(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & value) -> Physics_Signals_Vec3OutputSignal_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Vec3OutputSignal_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type

        resize(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        insert(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Vec3OutputSignal_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Vec3OutputSignal_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3OutputSignal > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Vec3OutputSignal_Vector

# Register Physics_Signals_Vec3OutputSignal_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Vec3OutputSignal_Vector_swigregister(Physics_Signals_Vec3OutputSignal_Vector)

class Physics_Signals_Vec3Value_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::Signals::Vec3Value > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_Signals_Vec3Value_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_Signals_Vec3Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_Signals_Vec3Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type j) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type

        __setslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type j, Physics_Signals_Vec3Value_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type
        v: std::vector< std::shared_ptr< Physics::Signals::Vec3Value >,std::allocator< std::shared_ptr< Physics::Signals::Vec3Value > > > const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type
        j: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type

        __delitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type i) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice, Physics_Signals_Vec3Value_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::Signals::Vec3Value >,std::allocator< std::shared_ptr< Physics::Signals::Vec3Value > > > const &

        __setitem__(Physics_Signals_Vec3Value_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type i, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::difference_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_Signals_Vec3Value_Vector self) -> bool"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_empty(self)

    def size(self):
        r"""size(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_Signals_Vec3Value_Vector self, Physics_Signals_Vec3Value_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > > &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_begin(self)

    def end(self):
        r"""end(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::reverse_iterator"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_Signals_Vec3Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::allocator_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_Signals_Vec3Value_Vector self)"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator pos) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator

        erase(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator first, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator last) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator
        last: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_Signals_Vec3Value_Vector self) -> Physics_Signals_Vec3Value_Vector
        __init__(Physics_Signals_Vec3Value_Vector self, Physics_Signals_Vec3Value_Vector other) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > > const &

        __init__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type size) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type

        __init__(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type size, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & value) -> Physics_Signals_Vec3Value_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type
        value: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        """
        _PhysicsSwig.Physics_Signals_Vec3Value_Vector_swiginit(self, _PhysicsSwig.new_Physics_Signals_Vec3Value_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_front(self)

    def back(self):
        r"""back(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type

        resize(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type new_size, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        insert(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator pos, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type n, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::iterator
        n: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type
        x: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::value_type const &

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_Signals_Vec3Value_Vector self, std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type

        """
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_Signals_Vec3Value_Vector self) -> std::vector< std::shared_ptr< Physics::Signals::Vec3Value > >::size_type"""
        return _PhysicsSwig.Physics_Signals_Vec3Value_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_Signals_Vec3Value_Vector

# Register Physics_Signals_Vec3Value_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_Signals_Vec3Value_Vector_swigregister(Physics_Signals_Vec3Value_Vector)

class Physics_System_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics::System > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics_System_Vector self) -> SwigPyIterator"""
        return _PhysicsSwig.Physics_System_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j) -> Physics_System_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type

        __setslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j, Physics_System_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type
        v: std::vector< std::shared_ptr< Physics::System >,std::allocator< std::shared_ptr< Physics::System > > > const &

        """
        return _PhysicsSwig.Physics_System_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type

        __delitem__(Physics_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _PhysicsSwig.Physics_System_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics_System_Vector self, PySliceObject * slice) -> Physics_System_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i) -> std::vector< std::shared_ptr< Physics::System > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type

        """
        return _PhysicsSwig.Physics_System_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics_System_Vector self, PySliceObject * slice, Physics_System_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics::System >,std::allocator< std::shared_ptr< Physics::System > > > const &

        __setitem__(Physics_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::difference_type i, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics::System > >::difference_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::value_type"""
        return _PhysicsSwig.Physics_System_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics_System_Vector self) -> bool"""
        return _PhysicsSwig.Physics_System_Vector_empty(self)

    def size(self):
        r"""size(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics_System_Vector self, Physics_System_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics::System > > &

        """
        return _PhysicsSwig.Physics_System_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::iterator"""
        return _PhysicsSwig.Physics_System_Vector_begin(self)

    def end(self):
        r"""end(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::iterator"""
        return _PhysicsSwig.Physics_System_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::reverse_iterator"""
        return _PhysicsSwig.Physics_System_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::reverse_iterator"""
        return _PhysicsSwig.Physics_System_Vector_rend(self)

    def clear(self):
        r"""clear(Physics_System_Vector self)"""
        return _PhysicsSwig.Physics_System_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::allocator_type"""
        return _PhysicsSwig.Physics_System_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics_System_Vector self)"""
        return _PhysicsSwig.Physics_System_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator pos) -> std::vector< std::shared_ptr< Physics::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::System > >::iterator

        erase(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator first, std::vector< std::shared_ptr< Physics::System > >::iterator last) -> std::vector< std::shared_ptr< Physics::System > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics::System > >::iterator
        last: std::vector< std::shared_ptr< Physics::System > >::iterator

        """
        return _PhysicsSwig.Physics_System_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics_System_Vector self) -> Physics_System_Vector
        __init__(Physics_System_Vector self, Physics_System_Vector other) -> Physics_System_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics::System > > const &

        __init__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type size) -> Physics_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::System > >::size_type

        __init__(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type size, std::vector< std::shared_ptr< Physics::System > >::value_type const & value) -> Physics_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics::System > >::size_type
        value: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        _PhysicsSwig.Physics_System_Vector_swiginit(self, _PhysicsSwig.new_Physics_System_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::value_type const &"""
        return _PhysicsSwig.Physics_System_Vector_front(self)

    def back(self):
        r"""back(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::value_type const &"""
        return _PhysicsSwig.Physics_System_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type n, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::System > >::size_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::System > >::size_type

        resize(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type new_size, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics::System > >::size_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator pos, std::vector< std::shared_ptr< Physics::System > >::value_type const & x) -> std::vector< std::shared_ptr< Physics::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::System > >::iterator
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        insert(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::iterator pos, std::vector< std::shared_ptr< Physics::System > >::size_type n, std::vector< std::shared_ptr< Physics::System > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics::System > >::iterator
        n: std::vector< std::shared_ptr< Physics::System > >::size_type
        x: std::vector< std::shared_ptr< Physics::System > >::value_type const &

        """
        return _PhysicsSwig.Physics_System_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics_System_Vector self, std::vector< std::shared_ptr< Physics::System > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics::System > >::size_type

        """
        return _PhysicsSwig.Physics_System_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics_System_Vector self) -> std::vector< std::shared_ptr< Physics::System > >::size_type"""
        return _PhysicsSwig.Physics_System_Vector_capacity(self)
    __swig_destroy__ = _PhysicsSwig.delete_Physics_System_Vector

# Register Physics_System_Vector in _PhysicsSwig:
_PhysicsSwig.Physics_System_Vector_swigregister(Physics_System_Vector)

class Bodies_Body(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Bodies::Body class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_Body self) -> Bodies_Body"""
        _PhysicsSwig.Bodies_Body_swiginit(self, _PhysicsSwig.new_Bodies_Body())

    def inertia(self):
        r"""inertia(Bodies_Body self) -> std::shared_ptr< Physics::Bodies::Inertia >"""
        return _PhysicsSwig.Bodies_Body_inertia(self)

    def kinematics(self):
        r"""kinematics(Bodies_Body self) -> std::shared_ptr< Physics::Bodies::Kinematics >"""
        return _PhysicsSwig.Bodies_Body_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_Body self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Bodies_Body_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_Body self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Bodies_Body_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_Body self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Bodies_Body_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_Body self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Bodies_Body_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_Body self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Bodies_Body_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_Body self)"""
        return _PhysicsSwig.Bodies_Body_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Bodies_Body

# Register Bodies_Body in _PhysicsSwig:
_PhysicsSwig.Bodies_Body_swigregister(Bodies_Body)

class Bodies_Inertia(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Bodies::Inertia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_Inertia self) -> Bodies_Inertia"""
        _PhysicsSwig.Bodies_Inertia_swiginit(self, _PhysicsSwig.new_Bodies_Inertia())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_Inertia self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Bodies_Inertia_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_Inertia self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Bodies_Inertia_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_Inertia self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Bodies_Inertia_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_Inertia self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Bodies_Inertia_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_Inertia self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Bodies_Inertia_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_Inertia self)"""
        return _PhysicsSwig.Bodies_Inertia_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Bodies_Inertia

# Register Bodies_Inertia in _PhysicsSwig:
_PhysicsSwig.Bodies_Inertia_swigregister(Bodies_Inertia)

class Bodies_Kinematics(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Bodies::Kinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_Kinematics self) -> Bodies_Kinematics"""
        _PhysicsSwig.Bodies_Kinematics_swiginit(self, _PhysicsSwig.new_Bodies_Kinematics())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_Kinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Bodies_Kinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_Kinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Bodies_Kinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_Kinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Bodies_Kinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_Kinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Bodies_Kinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_Kinematics self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Bodies_Kinematics_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_Kinematics self)"""
        return _PhysicsSwig.Bodies_Kinematics_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Bodies_Kinematics

# Register Bodies_Kinematics in _PhysicsSwig:
_PhysicsSwig.Bodies_Kinematics_swigregister(Bodies_Kinematics)

class Charges_Charge(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Charges::Charge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_Charge self) -> Charges_Charge"""
        _PhysicsSwig.Charges_Charge_swiginit(self, _PhysicsSwig.new_Charges_Charge())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_Charge self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Charges_Charge_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_Charge self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Charges_Charge_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_Charge self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Charges_Charge_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_Charge self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Charges_Charge_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_Charge self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Charges_Charge_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_Charge self)"""
        return _PhysicsSwig.Charges_Charge_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Charges_Charge

# Register Charges_Charge in _PhysicsSwig:
_PhysicsSwig.Charges_Charge_swigregister(Charges_Charge)

class Charges_ContactGeometry(Charges_Charge):
    r"""Proxy of C++ Physics::Charges::ContactGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_ContactGeometry self) -> Charges_ContactGeometry"""
        _PhysicsSwig.Charges_ContactGeometry_swiginit(self, _PhysicsSwig.new_Charges_ContactGeometry())

    def material(self):
        r"""material(Charges_ContactGeometry self) -> std::shared_ptr< Physics::Charges::Material >"""
        return _PhysicsSwig.Charges_ContactGeometry_material(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_ContactGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Charges_ContactGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_ContactGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Charges_ContactGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_ContactGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Charges_ContactGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_ContactGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Charges_ContactGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_ContactGeometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Charges_ContactGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_ContactGeometry self)"""
        return _PhysicsSwig.Charges_ContactGeometry_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Charges_ContactGeometry

# Register Charges_ContactGeometry in _PhysicsSwig:
_PhysicsSwig.Charges_ContactGeometry_swigregister(Charges_ContactGeometry)

class Charges_Material(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Charges::Material class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_Material self) -> Charges_Material"""
        _PhysicsSwig.Charges_Material_swiginit(self, _PhysicsSwig.new_Charges_Material())

    def density(self):
        r"""density(Charges_Material self) -> double"""
        return _PhysicsSwig.Charges_Material_density(self)

    def youngs_modulus(self):
        r"""youngs_modulus(Charges_Material self) -> double"""
        return _PhysicsSwig.Charges_Material_youngs_modulus(self)

    def relaxation_time(self):
        r"""relaxation_time(Charges_Material self) -> double"""
        return _PhysicsSwig.Charges_Material_relaxation_time(self)

    def damping_capacity(self):
        r"""damping_capacity(Charges_Material self) -> double"""
        return _PhysicsSwig.Charges_Material_damping_capacity(self)

    def elastic_limit(self):
        r"""elastic_limit(Charges_Material self) -> double"""
        return _PhysicsSwig.Charges_Material_elastic_limit(self)

    def failure_limit(self):
        r"""failure_limit(Charges_Material self) -> double"""
        return _PhysicsSwig.Charges_Material_failure_limit(self)

    def poissons_ratio(self):
        r"""poissons_ratio(Charges_Material self) -> double"""
        return _PhysicsSwig.Charges_Material_poissons_ratio(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_Material self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Charges_Material_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_Material self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Charges_Material_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_Material self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Charges_Material_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_Material self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Charges_Material_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_Material self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Charges_Material_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_Material self)"""
        return _PhysicsSwig.Charges_Material_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Charges_Material

# Register Charges_Material in _PhysicsSwig:
_PhysicsSwig.Charges_Material_swigregister(Charges_Material)

class Interactions_Friction_FrictionType(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Interactions::Friction::FrictionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Friction_FrictionType self) -> Interactions_Friction_FrictionType"""
        _PhysicsSwig.Interactions_Friction_FrictionType_swiginit(self, _PhysicsSwig.new_Interactions_Friction_FrictionType())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Friction_FrictionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_Friction_FrictionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Friction_FrictionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_Friction_FrictionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Friction_FrictionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_Friction_FrictionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Friction_FrictionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_Friction_FrictionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Friction_FrictionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_Friction_FrictionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Friction_FrictionType self)"""
        return _PhysicsSwig.Interactions_Friction_FrictionType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_Friction_FrictionType

# Register Interactions_Friction_FrictionType in _PhysicsSwig:
_PhysicsSwig.Interactions_Friction_FrictionType_swigregister(Interactions_Friction_FrictionType)

class Interactions_Friction_DryFrictionType(Interactions_Friction_FrictionType):
    r"""Proxy of C++ Physics::Interactions::Friction::DryFrictionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Friction_DryFrictionType self) -> Interactions_Friction_DryFrictionType"""
        _PhysicsSwig.Interactions_Friction_DryFrictionType_swiginit(self, _PhysicsSwig.new_Interactions_Friction_DryFrictionType())

    def coefficient(self):
        r"""coefficient(Interactions_Friction_DryFrictionType self) -> double"""
        return _PhysicsSwig.Interactions_Friction_DryFrictionType_coefficient(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Friction_DryFrictionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_Friction_DryFrictionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Friction_DryFrictionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_Friction_DryFrictionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Friction_DryFrictionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_Friction_DryFrictionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Friction_DryFrictionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_Friction_DryFrictionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Friction_DryFrictionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_Friction_DryFrictionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Friction_DryFrictionType self)"""
        return _PhysicsSwig.Interactions_Friction_DryFrictionType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_Friction_DryFrictionType

# Register Interactions_Friction_DryFrictionType in _PhysicsSwig:
_PhysicsSwig.Interactions_Friction_DryFrictionType_swigregister(Interactions_Friction_DryFrictionType)

class Interactions_Friction_ViscousFrictionType(Interactions_Friction_FrictionType):
    r"""Proxy of C++ Physics::Interactions::Friction::ViscousFrictionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Friction_ViscousFrictionType self) -> Interactions_Friction_ViscousFrictionType"""
        _PhysicsSwig.Interactions_Friction_ViscousFrictionType_swiginit(self, _PhysicsSwig.new_Interactions_Friction_ViscousFrictionType())

    def viscosity(self):
        r"""viscosity(Interactions_Friction_ViscousFrictionType self) -> double"""
        return _PhysicsSwig.Interactions_Friction_ViscousFrictionType_viscosity(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Friction_ViscousFrictionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_Friction_ViscousFrictionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Friction_ViscousFrictionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_Friction_ViscousFrictionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Friction_ViscousFrictionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_Friction_ViscousFrictionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Friction_ViscousFrictionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_Friction_ViscousFrictionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Friction_ViscousFrictionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_Friction_ViscousFrictionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Friction_ViscousFrictionType self)"""
        return _PhysicsSwig.Interactions_Friction_ViscousFrictionType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_Friction_ViscousFrictionType

# Register Interactions_Friction_ViscousFrictionType in _PhysicsSwig:
_PhysicsSwig.Interactions_Friction_ViscousFrictionType_swigregister(Interactions_Friction_ViscousFrictionType)

class Interactions_Interaction(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Interactions::Interaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Interaction self) -> Interactions_Interaction"""
        _PhysicsSwig.Interactions_Interaction_swiginit(self, _PhysicsSwig.new_Interactions_Interaction())

    def enabled(self):
        r"""enabled(Interactions_Interaction self) -> bool"""
        return _PhysicsSwig.Interactions_Interaction_enabled(self)

    def charges(self):
        r"""charges(Interactions_Interaction self) -> Physics_Charges_Charge_Vector"""
        return _PhysicsSwig.Interactions_Interaction_charges(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Interaction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_Interaction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Interaction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_Interaction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Interaction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_Interaction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Interaction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_Interaction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Interaction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_Interaction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Interaction self)"""
        return _PhysicsSwig.Interactions_Interaction_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_Interaction

# Register Interactions_Interaction in _PhysicsSwig:
_PhysicsSwig.Interactions_Interaction_swigregister(Interactions_Interaction)

class Interactions_SurfaceContact_NormalInteraction(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::NormalInteraction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_NormalInteraction self) -> Interactions_SurfaceContact_NormalInteraction"""
        _PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_NormalInteraction())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_NormalInteraction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_NormalInteraction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_NormalInteraction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_NormalInteraction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_NormalInteraction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_NormalInteraction self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_NormalInteraction

# Register Interactions_SurfaceContact_NormalInteraction in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_NormalInteraction_swigregister(Interactions_SurfaceContact_NormalInteraction)

class Interactions_SurfaceContact_AdhesionType(Interactions_SurfaceContact_NormalInteraction):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::AdhesionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_AdhesionType self) -> Interactions_SurfaceContact_AdhesionType"""
        _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_AdhesionType())

    def viscosity(self):
        r"""viscosity(Interactions_SurfaceContact_AdhesionType self) -> double"""
        return _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_viscosity(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_AdhesionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_AdhesionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_AdhesionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_AdhesionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_AdhesionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_AdhesionType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_AdhesionType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_AdhesionType

# Register Interactions_SurfaceContact_AdhesionType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_AdhesionType_swigregister(Interactions_SurfaceContact_AdhesionType)

class Interactions_SurfaceContact_ElasticityType(Interactions_SurfaceContact_NormalInteraction):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::ElasticityType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_ElasticityType self) -> Interactions_SurfaceContact_ElasticityType"""
        _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_ElasticityType())

    def stiffness(self):
        r"""stiffness(Interactions_SurfaceContact_ElasticityType self) -> double"""
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_stiffness(self)

    def relaxation_time(self):
        r"""relaxation_time(Interactions_SurfaceContact_ElasticityType self) -> double"""
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_relaxation_time(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_ElasticityType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_ElasticityType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_ElasticityType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_ElasticityType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_ElasticityType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_ElasticityType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_ElasticityType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_ElasticityType

# Register Interactions_SurfaceContact_ElasticityType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_ElasticityType_swigregister(Interactions_SurfaceContact_ElasticityType)

class Interactions_SurfaceContact_AreaDependentElasticityType(Interactions_SurfaceContact_ElasticityType):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::AreaDependentElasticityType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_AreaDependentElasticityType self) -> Interactions_SurfaceContact_AreaDependentElasticityType"""
        _PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_AreaDependentElasticityType())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_AreaDependentElasticityType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_AreaDependentElasticityType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_AreaDependentElasticityType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_AreaDependentElasticityType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_AreaDependentElasticityType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_AreaDependentElasticityType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_AreaDependentElasticityType

# Register Interactions_SurfaceContact_AreaDependentElasticityType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_AreaDependentElasticityType_swigregister(Interactions_SurfaceContact_AreaDependentElasticityType)

class Interactions_SurfaceContact_Model(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::Model class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_Model self) -> Interactions_SurfaceContact_Model"""
        _PhysicsSwig.Interactions_SurfaceContact_Model_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_Model())

    def material_1(self):
        r"""material_1(Interactions_SurfaceContact_Model self) -> std::shared_ptr< Physics::Charges::Material >"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_material_1(self)

    def material_2(self):
        r"""material_2(Interactions_SurfaceContact_Model self) -> std::shared_ptr< Physics::Charges::Material >"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_material_2(self)

    def friction(self):
        r"""friction(Interactions_SurfaceContact_Model self) -> std::shared_ptr< Physics::Interactions::Friction::FrictionType >"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_friction(self)

    def adhesion(self):
        r"""adhesion(Interactions_SurfaceContact_Model self) -> std::shared_ptr< Physics::Interactions::SurfaceContact::AdhesionType >"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_adhesion(self)

    def elasticity(self):
        r"""elasticity(Interactions_SurfaceContact_Model self) -> std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType >"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_elasticity(self)

    def tangential_restitution(self):
        r"""tangential_restitution(Interactions_SurfaceContact_Model self) -> double"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_tangential_restitution(self)

    def normal_restitution(self):
        r"""normal_restitution(Interactions_SurfaceContact_Model self) -> double"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_normal_restitution(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_Model self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_Model_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_Model self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_Model_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_Model self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_Model_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_Model self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_Model_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_Model self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_Model_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_Model self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_Model_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_Model

# Register Interactions_SurfaceContact_Model in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_Model_swigregister(Interactions_SurfaceContact_Model)

class Interactions_SurfaceContact_NoAdhesionType(Interactions_SurfaceContact_AdhesionType):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::NoAdhesionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_NoAdhesionType self) -> Interactions_SurfaceContact_NoAdhesionType"""
        _PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_NoAdhesionType())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_NoAdhesionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_NoAdhesionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_NoAdhesionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_NoAdhesionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_NoAdhesionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_NoAdhesionType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_NoAdhesionType

# Register Interactions_SurfaceContact_NoAdhesionType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_NoAdhesionType_swigregister(Interactions_SurfaceContact_NoAdhesionType)

class Interactions_SurfaceContact_NoElasticityType(Interactions_SurfaceContact_ElasticityType):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::NoElasticityType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_NoElasticityType self) -> Interactions_SurfaceContact_NoElasticityType"""
        _PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_NoElasticityType())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_NoElasticityType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_NoElasticityType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_NoElasticityType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_NoElasticityType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_NoElasticityType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_NoElasticityType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_NoElasticityType

# Register Interactions_SurfaceContact_NoElasticityType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_NoElasticityType_swigregister(Interactions_SurfaceContact_NoElasticityType)

class Interactions_SurfaceContact_PlasticityType(Interactions_SurfaceContact_NormalInteraction):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::PlasticityType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_PlasticityType self) -> Interactions_SurfaceContact_PlasticityType"""
        _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_PlasticityType())

    def plasticity(self):
        r"""plasticity(Interactions_SurfaceContact_PlasticityType self) -> double"""
        return _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_plasticity(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_PlasticityType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_PlasticityType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_PlasticityType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_PlasticityType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_PlasticityType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_PlasticityType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_PlasticityType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_PlasticityType

# Register Interactions_SurfaceContact_PlasticityType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_PlasticityType_swigregister(Interactions_SurfaceContact_PlasticityType)

class Interactions_SurfaceContact_NoPlasticityType(Interactions_SurfaceContact_PlasticityType):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::NoPlasticityType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_NoPlasticityType self) -> Interactions_SurfaceContact_NoPlasticityType"""
        _PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_NoPlasticityType())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_NoPlasticityType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_NoPlasticityType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_NoPlasticityType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_NoPlasticityType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_NoPlasticityType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_NoPlasticityType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_NoPlasticityType

# Register Interactions_SurfaceContact_NoPlasticityType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_NoPlasticityType_swigregister(Interactions_SurfaceContact_NoPlasticityType)

class Interactions_SurfaceContact_PointwiseElasticityType(Interactions_SurfaceContact_ElasticityType):
    r"""Proxy of C++ Physics::Interactions::SurfaceContact::PointwiseElasticityType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_PointwiseElasticityType self) -> Interactions_SurfaceContact_PointwiseElasticityType"""
        _PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_swiginit(self, _PhysicsSwig.new_Interactions_SurfaceContact_PointwiseElasticityType())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_PointwiseElasticityType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_PointwiseElasticityType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_PointwiseElasticityType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_PointwiseElasticityType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_PointwiseElasticityType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_PointwiseElasticityType self)"""
        return _PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Interactions_SurfaceContact_PointwiseElasticityType

# Register Interactions_SurfaceContact_PointwiseElasticityType in _PhysicsSwig:
_PhysicsSwig.Interactions_SurfaceContact_PointwiseElasticityType_swigregister(Interactions_SurfaceContact_PointwiseElasticityType)

class Signals_Value(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Signals::Value class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_Value self) -> Signals_Value"""
        _PhysicsSwig.Signals_Value_swiginit(self, _PhysicsSwig.new_Signals_Value())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_Value self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_Value_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_Value self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_Value_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_Value self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_Value_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_Value self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_Value_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_Value self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_Value_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_Value self)"""
        return _PhysicsSwig.Signals_Value_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_Value

# Register Signals_Value in _PhysicsSwig:
_PhysicsSwig.Signals_Value_swigregister(Signals_Value)

class Signals_RealValue(Signals_Value):
    r"""Proxy of C++ Physics::Signals::RealValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RealValue self) -> Signals_RealValue"""
        _PhysicsSwig.Signals_RealValue_swiginit(self, _PhysicsSwig.new_Signals_RealValue())

    def value(self):
        r"""value(Signals_RealValue self) -> double"""
        return _PhysicsSwig.Signals_RealValue_value(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RealValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_RealValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RealValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_RealValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RealValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_RealValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RealValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_RealValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RealValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_RealValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RealValue self)"""
        return _PhysicsSwig.Signals_RealValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_RealValue

# Register Signals_RealValue in _PhysicsSwig:
_PhysicsSwig.Signals_RealValue_swigregister(Signals_RealValue)

class Signals_AngleValue(Signals_RealValue):
    r"""Proxy of C++ Physics::Signals::AngleValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_AngleValue self) -> Signals_AngleValue"""
        _PhysicsSwig.Signals_AngleValue_swiginit(self, _PhysicsSwig.new_Signals_AngleValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics::Signals::AngleValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Signals_AngleValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_AngleValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_AngleValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_AngleValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_AngleValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_AngleValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_AngleValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_AngleValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_AngleValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_AngleValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_AngleValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_AngleValue self)"""
        return _PhysicsSwig.Signals_AngleValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_AngleValue

# Register Signals_AngleValue in _PhysicsSwig:
_PhysicsSwig.Signals_AngleValue_swigregister(Signals_AngleValue)

def Signals_AngleValue_create(value):
    r"""
    Signals_AngleValue_create(double value) -> std::shared_ptr< Physics::Signals::AngleValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Signals_AngleValue_create(value)

class Signals_AngularVelocityValue(Signals_RealValue):
    r"""Proxy of C++ Physics::Signals::AngularVelocityValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_AngularVelocityValue self) -> Signals_AngularVelocityValue"""
        _PhysicsSwig.Signals_AngularVelocityValue_swiginit(self, _PhysicsSwig.new_Signals_AngularVelocityValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics::Signals::AngularVelocityValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Signals_AngularVelocityValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_AngularVelocityValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_AngularVelocityValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_AngularVelocityValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_AngularVelocityValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_AngularVelocityValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_AngularVelocityValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_AngularVelocityValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_AngularVelocityValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_AngularVelocityValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_AngularVelocityValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_AngularVelocityValue self)"""
        return _PhysicsSwig.Signals_AngularVelocityValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_AngularVelocityValue

# Register Signals_AngularVelocityValue in _PhysicsSwig:
_PhysicsSwig.Signals_AngularVelocityValue_swigregister(Signals_AngularVelocityValue)

def Signals_AngularVelocityValue_create(value):
    r"""
    Signals_AngularVelocityValue_create(double value) -> std::shared_ptr< Physics::Signals::AngularVelocityValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Signals_AngularVelocityValue_create(value)

class Signals_Vec3Value(Signals_Value):
    r"""Proxy of C++ Physics::Signals::Vec3Value class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_Vec3Value self) -> Signals_Vec3Value"""
        _PhysicsSwig.Signals_Vec3Value_swiginit(self, _PhysicsSwig.new_Signals_Vec3Value())

    def value(self):
        r"""value(Signals_Vec3Value self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_Vec3Value_value(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_Vec3Value self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_Vec3Value_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_Vec3Value self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_Vec3Value_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_Vec3Value self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_Vec3Value_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_Vec3Value self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_Vec3Value_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_Vec3Value self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_Vec3Value_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_Vec3Value self)"""
        return _PhysicsSwig.Signals_Vec3Value_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_Vec3Value

# Register Signals_Vec3Value in _PhysicsSwig:
_PhysicsSwig.Signals_Vec3Value_swigregister(Signals_Vec3Value)

class Signals_DirectionalAccelerationValue(Signals_Vec3Value):
    r"""Proxy of C++ Physics::Signals::DirectionalAccelerationValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_DirectionalAccelerationValue self) -> Signals_DirectionalAccelerationValue"""
        _PhysicsSwig.Signals_DirectionalAccelerationValue_swiginit(self, _PhysicsSwig.new_Signals_DirectionalAccelerationValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalAccelerationValue >

        Parameters
        ----------
        value: std::shared_ptr< Math::Vec3 >

        """
        return _PhysicsSwig.Signals_DirectionalAccelerationValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_DirectionalAccelerationValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_DirectionalAccelerationValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_DirectionalAccelerationValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_DirectionalAccelerationValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_DirectionalAccelerationValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_DirectionalAccelerationValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_DirectionalAccelerationValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_DirectionalAccelerationValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_DirectionalAccelerationValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_DirectionalAccelerationValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_DirectionalAccelerationValue self)"""
        return _PhysicsSwig.Signals_DirectionalAccelerationValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_DirectionalAccelerationValue

# Register Signals_DirectionalAccelerationValue in _PhysicsSwig:
_PhysicsSwig.Signals_DirectionalAccelerationValue_swigregister(Signals_DirectionalAccelerationValue)

def Signals_DirectionalAccelerationValue_create(value):
    r"""
    Signals_DirectionalAccelerationValue_create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalAccelerationValue >

    Parameters
    ----------
    value: std::shared_ptr< Math::Vec3 >

    """
    return _PhysicsSwig.Signals_DirectionalAccelerationValue_create(value)

class Signals_DirectionalAngularAccelerationValue(Signals_Vec3Value):
    r"""Proxy of C++ Physics::Signals::DirectionalAngularAccelerationValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_DirectionalAngularAccelerationValue self) -> Signals_DirectionalAngularAccelerationValue"""
        _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_swiginit(self, _PhysicsSwig.new_Signals_DirectionalAngularAccelerationValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue >

        Parameters
        ----------
        value: std::shared_ptr< Math::Vec3 >

        """
        return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_DirectionalAngularAccelerationValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_DirectionalAngularAccelerationValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_DirectionalAngularAccelerationValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_DirectionalAngularAccelerationValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_DirectionalAngularAccelerationValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_DirectionalAngularAccelerationValue self)"""
        return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_DirectionalAngularAccelerationValue

# Register Signals_DirectionalAngularAccelerationValue in _PhysicsSwig:
_PhysicsSwig.Signals_DirectionalAngularAccelerationValue_swigregister(Signals_DirectionalAngularAccelerationValue)

def Signals_DirectionalAngularAccelerationValue_create(value):
    r"""
    Signals_DirectionalAngularAccelerationValue_create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalAngularAccelerationValue >

    Parameters
    ----------
    value: std::shared_ptr< Math::Vec3 >

    """
    return _PhysicsSwig.Signals_DirectionalAngularAccelerationValue_create(value)

class Signals_DirectionalForceValue(Signals_Vec3Value):
    r"""Proxy of C++ Physics::Signals::DirectionalForceValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_DirectionalForceValue self) -> Signals_DirectionalForceValue"""
        _PhysicsSwig.Signals_DirectionalForceValue_swiginit(self, _PhysicsSwig.new_Signals_DirectionalForceValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalForceValue >

        Parameters
        ----------
        value: std::shared_ptr< Math::Vec3 >

        """
        return _PhysicsSwig.Signals_DirectionalForceValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_DirectionalForceValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_DirectionalForceValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_DirectionalForceValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_DirectionalForceValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_DirectionalForceValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_DirectionalForceValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_DirectionalForceValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_DirectionalForceValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_DirectionalForceValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_DirectionalForceValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_DirectionalForceValue self)"""
        return _PhysicsSwig.Signals_DirectionalForceValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_DirectionalForceValue

# Register Signals_DirectionalForceValue in _PhysicsSwig:
_PhysicsSwig.Signals_DirectionalForceValue_swigregister(Signals_DirectionalForceValue)

def Signals_DirectionalForceValue_create(value):
    r"""
    Signals_DirectionalForceValue_create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalForceValue >

    Parameters
    ----------
    value: std::shared_ptr< Math::Vec3 >

    """
    return _PhysicsSwig.Signals_DirectionalForceValue_create(value)

class Signals_DirectionalTorqueValue(Signals_Vec3Value):
    r"""Proxy of C++ Physics::Signals::DirectionalTorqueValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_DirectionalTorqueValue self) -> Signals_DirectionalTorqueValue"""
        _PhysicsSwig.Signals_DirectionalTorqueValue_swiginit(self, _PhysicsSwig.new_Signals_DirectionalTorqueValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalTorqueValue >

        Parameters
        ----------
        value: std::shared_ptr< Math::Vec3 >

        """
        return _PhysicsSwig.Signals_DirectionalTorqueValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_DirectionalTorqueValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_DirectionalTorqueValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_DirectionalTorqueValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_DirectionalTorqueValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_DirectionalTorqueValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_DirectionalTorqueValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_DirectionalTorqueValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_DirectionalTorqueValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_DirectionalTorqueValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_DirectionalTorqueValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_DirectionalTorqueValue self)"""
        return _PhysicsSwig.Signals_DirectionalTorqueValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_DirectionalTorqueValue

# Register Signals_DirectionalTorqueValue in _PhysicsSwig:
_PhysicsSwig.Signals_DirectionalTorqueValue_swigregister(Signals_DirectionalTorqueValue)

def Signals_DirectionalTorqueValue_create(value):
    r"""
    Signals_DirectionalTorqueValue_create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalTorqueValue >

    Parameters
    ----------
    value: std::shared_ptr< Math::Vec3 >

    """
    return _PhysicsSwig.Signals_DirectionalTorqueValue_create(value)

class Signals_DirectionalVelocityValue(Signals_Vec3Value):
    r"""Proxy of C++ Physics::Signals::DirectionalVelocityValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_DirectionalVelocityValue self) -> Signals_DirectionalVelocityValue"""
        _PhysicsSwig.Signals_DirectionalVelocityValue_swiginit(self, _PhysicsSwig.new_Signals_DirectionalVelocityValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalVelocityValue >

        Parameters
        ----------
        value: std::shared_ptr< Math::Vec3 >

        """
        return _PhysicsSwig.Signals_DirectionalVelocityValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_DirectionalVelocityValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_DirectionalVelocityValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_DirectionalVelocityValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_DirectionalVelocityValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_DirectionalVelocityValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_DirectionalVelocityValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_DirectionalVelocityValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_DirectionalVelocityValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_DirectionalVelocityValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_DirectionalVelocityValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_DirectionalVelocityValue self)"""
        return _PhysicsSwig.Signals_DirectionalVelocityValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_DirectionalVelocityValue

# Register Signals_DirectionalVelocityValue in _PhysicsSwig:
_PhysicsSwig.Signals_DirectionalVelocityValue_swigregister(Signals_DirectionalVelocityValue)

def Signals_DirectionalVelocityValue_create(value):
    r"""
    Signals_DirectionalVelocityValue_create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::DirectionalVelocityValue >

    Parameters
    ----------
    value: std::shared_ptr< Math::Vec3 >

    """
    return _PhysicsSwig.Signals_DirectionalVelocityValue_create(value)

class Signals_DistanceValue(Signals_RealValue):
    r"""Proxy of C++ Physics::Signals::DistanceValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_DistanceValue self) -> Signals_DistanceValue"""
        _PhysicsSwig.Signals_DistanceValue_swiginit(self, _PhysicsSwig.new_Signals_DistanceValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics::Signals::DistanceValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Signals_DistanceValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_DistanceValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_DistanceValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_DistanceValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_DistanceValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_DistanceValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_DistanceValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_DistanceValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_DistanceValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_DistanceValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_DistanceValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_DistanceValue self)"""
        return _PhysicsSwig.Signals_DistanceValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_DistanceValue

# Register Signals_DistanceValue in _PhysicsSwig:
_PhysicsSwig.Signals_DistanceValue_swigregister(Signals_DistanceValue)

def Signals_DistanceValue_create(value):
    r"""
    Signals_DistanceValue_create(double value) -> std::shared_ptr< Physics::Signals::DistanceValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Signals_DistanceValue_create(value)

class Signals_ForceValue(Signals_RealValue):
    r"""Proxy of C++ Physics::Signals::ForceValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_ForceValue self) -> Signals_ForceValue"""
        _PhysicsSwig.Signals_ForceValue_swiginit(self, _PhysicsSwig.new_Signals_ForceValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics::Signals::ForceValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Signals_ForceValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_ForceValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_ForceValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_ForceValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_ForceValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_ForceValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_ForceValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_ForceValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_ForceValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_ForceValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_ForceValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_ForceValue self)"""
        return _PhysicsSwig.Signals_ForceValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_ForceValue

# Register Signals_ForceValue in _PhysicsSwig:
_PhysicsSwig.Signals_ForceValue_swigregister(Signals_ForceValue)

def Signals_ForceValue_create(value):
    r"""
    Signals_ForceValue_create(double value) -> std::shared_ptr< Physics::Signals::ForceValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Signals_ForceValue_create(value)

class Signals_Input(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Signals::Input class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_Input self) -> Signals_Input"""
        _PhysicsSwig.Signals_Input_swiginit(self, _PhysicsSwig.new_Signals_Input())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_Input self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_Input_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_Input self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_Input_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_Input self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_Input_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_Input self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_Input_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_Input self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_Input_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_Input self)"""
        return _PhysicsSwig.Signals_Input_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_Input

# Register Signals_Input in _PhysicsSwig:
_PhysicsSwig.Signals_Input_swigregister(Signals_Input)

class Signals_InputSignal(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Signals::InputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_InputSignal self) -> Signals_InputSignal"""
        _PhysicsSwig.Signals_InputSignal_swiginit(self, _PhysicsSwig.new_Signals_InputSignal())

    def target(self):
        r"""target(Signals_InputSignal self) -> std::shared_ptr< Physics::Signals::Input >"""
        return _PhysicsSwig.Signals_InputSignal_target(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_InputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_InputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_InputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_InputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_InputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_InputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_InputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_InputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_InputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_InputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_InputSignal self)"""
        return _PhysicsSwig.Signals_InputSignal_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_InputSignal

# Register Signals_InputSignal in _PhysicsSwig:
_PhysicsSwig.Signals_InputSignal_swigregister(Signals_InputSignal)

class Signals_LinearVelocityValue(Signals_RealValue):
    r"""Proxy of C++ Physics::Signals::LinearVelocityValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_LinearVelocityValue self) -> Signals_LinearVelocityValue"""
        _PhysicsSwig.Signals_LinearVelocityValue_swiginit(self, _PhysicsSwig.new_Signals_LinearVelocityValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics::Signals::LinearVelocityValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Signals_LinearVelocityValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_LinearVelocityValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_LinearVelocityValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_LinearVelocityValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_LinearVelocityValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_LinearVelocityValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_LinearVelocityValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_LinearVelocityValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_LinearVelocityValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_LinearVelocityValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_LinearVelocityValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_LinearVelocityValue self)"""
        return _PhysicsSwig.Signals_LinearVelocityValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_LinearVelocityValue

# Register Signals_LinearVelocityValue in _PhysicsSwig:
_PhysicsSwig.Signals_LinearVelocityValue_swigregister(Signals_LinearVelocityValue)

def Signals_LinearVelocityValue_create(value):
    r"""
    Signals_LinearVelocityValue_create(double value) -> std::shared_ptr< Physics::Signals::LinearVelocityValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Signals_LinearVelocityValue_create(value)

class Signals_Output(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Signals::Output class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_Output self) -> Signals_Output"""
        _PhysicsSwig.Signals_Output_swiginit(self, _PhysicsSwig.new_Signals_Output())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_Output self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_Output_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_Output self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_Output_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_Output self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_Output_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_Output self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_Output_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_Output self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_Output_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_Output self)"""
        return _PhysicsSwig.Signals_Output_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_Output

# Register Signals_Output in _PhysicsSwig:
_PhysicsSwig.Signals_Output_swigregister(Signals_Output)

class Signals_OutputSignal(rebrick.Core.Object):
    r"""Proxy of C++ Physics::Signals::OutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_OutputSignal self) -> Signals_OutputSignal"""
        _PhysicsSwig.Signals_OutputSignal_swiginit(self, _PhysicsSwig.new_Signals_OutputSignal())

    def source(self):
        r"""source(Signals_OutputSignal self) -> std::shared_ptr< Physics::Signals::Output >"""
        return _PhysicsSwig.Signals_OutputSignal_source(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_OutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_OutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_OutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_OutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_OutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_OutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_OutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_OutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_OutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_OutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_OutputSignal self)"""
        return _PhysicsSwig.Signals_OutputSignal_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_OutputSignal

# Register Signals_OutputSignal in _PhysicsSwig:
_PhysicsSwig.Signals_OutputSignal_swigregister(Signals_OutputSignal)

class Signals_PositionValue(Signals_Vec3Value):
    r"""Proxy of C++ Physics::Signals::PositionValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_PositionValue self) -> Signals_PositionValue"""
        _PhysicsSwig.Signals_PositionValue_swiginit(self, _PhysicsSwig.new_Signals_PositionValue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::PositionValue >

        Parameters
        ----------
        value: std::shared_ptr< Math::Vec3 >

        """
        return _PhysicsSwig.Signals_PositionValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_PositionValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_PositionValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_PositionValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_PositionValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_PositionValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_PositionValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_PositionValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_PositionValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_PositionValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_PositionValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_PositionValue self)"""
        return _PhysicsSwig.Signals_PositionValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_PositionValue

# Register Signals_PositionValue in _PhysicsSwig:
_PhysicsSwig.Signals_PositionValue_swigregister(Signals_PositionValue)

def Signals_PositionValue_create(value):
    r"""
    Signals_PositionValue_create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::PositionValue >

    Parameters
    ----------
    value: std::shared_ptr< Math::Vec3 >

    """
    return _PhysicsSwig.Signals_PositionValue_create(value)

class Signals_RPYvalue(Signals_Vec3Value):
    r"""Proxy of C++ Physics::Signals::RPYvalue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RPYvalue self) -> Signals_RPYvalue"""
        _PhysicsSwig.Signals_RPYvalue_swiginit(self, _PhysicsSwig.new_Signals_RPYvalue())

    @staticmethod
    def create(value):
        r"""
        create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::RPYvalue >

        Parameters
        ----------
        value: std::shared_ptr< Math::Vec3 >

        """
        return _PhysicsSwig.Signals_RPYvalue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RPYvalue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_RPYvalue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RPYvalue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_RPYvalue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RPYvalue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_RPYvalue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RPYvalue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_RPYvalue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RPYvalue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_RPYvalue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RPYvalue self)"""
        return _PhysicsSwig.Signals_RPYvalue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_RPYvalue

# Register Signals_RPYvalue in _PhysicsSwig:
_PhysicsSwig.Signals_RPYvalue_swigregister(Signals_RPYvalue)

def Signals_RPYvalue_create(value):
    r"""
    Signals_RPYvalue_create(std::shared_ptr< Math::Vec3 > value) -> std::shared_ptr< Physics::Signals::RPYvalue >

    Parameters
    ----------
    value: std::shared_ptr< Math::Vec3 >

    """
    return _PhysicsSwig.Signals_RPYvalue_create(value)

class Signals_RealInputSignal(Signals_InputSignal):
    r"""Proxy of C++ Physics::Signals::RealInputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RealInputSignal self) -> Signals_RealInputSignal"""
        _PhysicsSwig.Signals_RealInputSignal_swiginit(self, _PhysicsSwig.new_Signals_RealInputSignal())

    def value(self):
        r"""value(Signals_RealInputSignal self) -> double"""
        return _PhysicsSwig.Signals_RealInputSignal_value(self)

    @staticmethod
    def create(value, target):
        r"""
        create(double value, std::shared_ptr< Physics::Signals::Input > target) -> std::shared_ptr< Physics::Signals::RealInputSignal >

        Parameters
        ----------
        value: double
        target: std::shared_ptr< Physics::Signals::Input >

        """
        return _PhysicsSwig.Signals_RealInputSignal_create(value, target)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RealInputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_RealInputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RealInputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_RealInputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RealInputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_RealInputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RealInputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_RealInputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RealInputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_RealInputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RealInputSignal self)"""
        return _PhysicsSwig.Signals_RealInputSignal_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_RealInputSignal

# Register Signals_RealInputSignal in _PhysicsSwig:
_PhysicsSwig.Signals_RealInputSignal_swigregister(Signals_RealInputSignal)

def Signals_RealInputSignal_create(value, target):
    r"""
    Signals_RealInputSignal_create(double value, std::shared_ptr< Physics::Signals::Input > target) -> std::shared_ptr< Physics::Signals::RealInputSignal >

    Parameters
    ----------
    value: double
    target: std::shared_ptr< Physics::Signals::Input >

    """
    return _PhysicsSwig.Signals_RealInputSignal_create(value, target)

class Signals_RealOutputSignal(Signals_OutputSignal):
    r"""Proxy of C++ Physics::Signals::RealOutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RealOutputSignal self) -> Signals_RealOutputSignal"""
        _PhysicsSwig.Signals_RealOutputSignal_swiginit(self, _PhysicsSwig.new_Signals_RealOutputSignal())

    def value(self):
        r"""value(Signals_RealOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_RealOutputSignal_value(self)

    @staticmethod
    def create(v, source):
        r"""
        create(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::RealOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_RealOutputSignal_create(v, source)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RealOutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_RealOutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RealOutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_RealOutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RealOutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_RealOutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RealOutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_RealOutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RealOutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_RealOutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RealOutputSignal self)"""
        return _PhysicsSwig.Signals_RealOutputSignal_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_RealOutputSignal

# Register Signals_RealOutputSignal in _PhysicsSwig:
_PhysicsSwig.Signals_RealOutputSignal_swigregister(Signals_RealOutputSignal)

def Signals_RealOutputSignal_create(v, source):
    r"""
    Signals_RealOutputSignal_create(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::RealOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_RealOutputSignal_create(v, source)

class Signals_TorqueValue(Signals_RealValue):
    r"""Proxy of C++ Physics::Signals::TorqueValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_TorqueValue self) -> Signals_TorqueValue"""
        _PhysicsSwig.Signals_TorqueValue_swiginit(self, _PhysicsSwig.new_Signals_TorqueValue())

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics::Signals::TorqueValue >

        Parameters
        ----------
        value: double

        """
        return _PhysicsSwig.Signals_TorqueValue_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_TorqueValue self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_TorqueValue_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_TorqueValue self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_TorqueValue_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_TorqueValue self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_TorqueValue_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_TorqueValue self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_TorqueValue_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_TorqueValue self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_TorqueValue_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_TorqueValue self)"""
        return _PhysicsSwig.Signals_TorqueValue_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_TorqueValue

# Register Signals_TorqueValue in _PhysicsSwig:
_PhysicsSwig.Signals_TorqueValue_swigregister(Signals_TorqueValue)

def Signals_TorqueValue_create(value):
    r"""
    Signals_TorqueValue_create(double value) -> std::shared_ptr< Physics::Signals::TorqueValue >

    Parameters
    ----------
    value: double

    """
    return _PhysicsSwig.Signals_TorqueValue_create(value)

class Signals_ValueOutputSignal(Signals_OutputSignal):
    r"""Proxy of C++ Physics::Signals::ValueOutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_ValueOutputSignal self) -> Signals_ValueOutputSignal"""
        _PhysicsSwig.Signals_ValueOutputSignal_swiginit(self, _PhysicsSwig.new_Signals_ValueOutputSignal())

    def value(self):
        r"""value(Signals_ValueOutputSignal self) -> std::shared_ptr< Physics::Signals::Value >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_value(self)

    @staticmethod
    def create(v, source):
        r"""
        create(std::shared_ptr< Physics::Signals::Value > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Physics::Signals::Value >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_create(v, source)

    @staticmethod
    def fromAngle(v, source):
        r"""
        fromAngle(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromAngle(v, source)

    @staticmethod
    def fromAngularVelocity(v, source):
        r"""
        fromAngularVelocity(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromAngularVelocity(v, source)

    @staticmethod
    def fromDistance(v, source):
        r"""
        fromDistance(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromDistance(v, source)

    @staticmethod
    def fromForce(v, source):
        r"""
        fromForce(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromForce(v, source)

    @staticmethod
    def fromLinearVelocity(v, source):
        r"""
        fromLinearVelocity(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromLinearVelocity(v, source)

    @staticmethod
    def fromTorque(v, source):
        r"""
        fromTorque(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: double
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromTorque(v, source)

    @staticmethod
    def fromDirectionalAcceleration(v, source):
        r"""
        fromDirectionalAcceleration(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalAcceleration(v, source)

    @staticmethod
    def fromDirectionalAngularAcceleration(v, source):
        r"""
        fromDirectionalAngularAcceleration(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalAngularAcceleration(v, source)

    @staticmethod
    def fromDirectionalForce(v, source):
        r"""
        fromDirectionalForce(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalForce(v, source)

    @staticmethod
    def fromDirectionalTorque(v, source):
        r"""
        fromDirectionalTorque(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalTorque(v, source)

    @staticmethod
    def fromDirectionalVelocity(v, source):
        r"""
        fromDirectionalVelocity(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalVelocity(v, source)

    @staticmethod
    def fromPosition(v, source):
        r"""
        fromPosition(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromPosition(v, source)

    @staticmethod
    def fromRPY(v, source):
        r"""
        fromRPY(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

        Parameters
        ----------
        v: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_fromRPY(v, source)

    def isReal(self):
        r"""isReal(Signals_ValueOutputSignal self) -> bool"""
        return _PhysicsSwig.Signals_ValueOutputSignal_isReal(self)

    def asReal(self):
        r"""asReal(Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asReal(self)

    def asVec3(self):
        r"""asVec3(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asVec3(self)

    def asAngle(self):
        r"""asAngle(Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asAngle(self)

    def asAngularVelocity(self):
        r"""asAngularVelocity(Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asAngularVelocity(self)

    def asDistance(self):
        r"""asDistance(Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asDistance(self)

    def asForce(self):
        r"""asForce(Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asForce(self)

    def asLinearVelocity(self):
        r"""asLinearVelocity(Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asLinearVelocity(self)

    def asTorque(self):
        r"""asTorque(Signals_ValueOutputSignal self) -> double"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asTorque(self)

    def asDirectionalAcceleration(self):
        r"""asDirectionalAcceleration(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asDirectionalAcceleration(self)

    def asDirectionalAngularAcceleration(self):
        r"""asDirectionalAngularAcceleration(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asDirectionalAngularAcceleration(self)

    def asDirectionalForce(self):
        r"""asDirectionalForce(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asDirectionalForce(self)

    def asDirectionalTorque(self):
        r"""asDirectionalTorque(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asDirectionalTorque(self)

    def asDirectionalVelocity(self):
        r"""asDirectionalVelocity(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asDirectionalVelocity(self)

    def asPosition(self):
        r"""asPosition(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asPosition(self)

    def asRPY(self):
        r"""asRPY(Signals_ValueOutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_ValueOutputSignal_asRPY(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_ValueOutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_ValueOutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_ValueOutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_ValueOutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_ValueOutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_ValueOutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_ValueOutputSignal self)"""
        return _PhysicsSwig.Signals_ValueOutputSignal_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_ValueOutputSignal

# Register Signals_ValueOutputSignal in _PhysicsSwig:
_PhysicsSwig.Signals_ValueOutputSignal_swigregister(Signals_ValueOutputSignal)

def Signals_ValueOutputSignal_create(v, source):
    r"""
    Signals_ValueOutputSignal_create(std::shared_ptr< Physics::Signals::Value > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Physics::Signals::Value >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_create(v, source)

def Signals_ValueOutputSignal_fromAngle(v, source):
    r"""
    Signals_ValueOutputSignal_fromAngle(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromAngle(v, source)

def Signals_ValueOutputSignal_fromAngularVelocity(v, source):
    r"""
    Signals_ValueOutputSignal_fromAngularVelocity(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromAngularVelocity(v, source)

def Signals_ValueOutputSignal_fromDistance(v, source):
    r"""
    Signals_ValueOutputSignal_fromDistance(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromDistance(v, source)

def Signals_ValueOutputSignal_fromForce(v, source):
    r"""
    Signals_ValueOutputSignal_fromForce(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromForce(v, source)

def Signals_ValueOutputSignal_fromLinearVelocity(v, source):
    r"""
    Signals_ValueOutputSignal_fromLinearVelocity(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromLinearVelocity(v, source)

def Signals_ValueOutputSignal_fromTorque(v, source):
    r"""
    Signals_ValueOutputSignal_fromTorque(double v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: double
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromTorque(v, source)

def Signals_ValueOutputSignal_fromDirectionalAcceleration(v, source):
    r"""
    Signals_ValueOutputSignal_fromDirectionalAcceleration(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalAcceleration(v, source)

def Signals_ValueOutputSignal_fromDirectionalAngularAcceleration(v, source):
    r"""
    Signals_ValueOutputSignal_fromDirectionalAngularAcceleration(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalAngularAcceleration(v, source)

def Signals_ValueOutputSignal_fromDirectionalForce(v, source):
    r"""
    Signals_ValueOutputSignal_fromDirectionalForce(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalForce(v, source)

def Signals_ValueOutputSignal_fromDirectionalTorque(v, source):
    r"""
    Signals_ValueOutputSignal_fromDirectionalTorque(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalTorque(v, source)

def Signals_ValueOutputSignal_fromDirectionalVelocity(v, source):
    r"""
    Signals_ValueOutputSignal_fromDirectionalVelocity(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromDirectionalVelocity(v, source)

def Signals_ValueOutputSignal_fromPosition(v, source):
    r"""
    Signals_ValueOutputSignal_fromPosition(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromPosition(v, source)

def Signals_ValueOutputSignal_fromRPY(v, source):
    r"""
    Signals_ValueOutputSignal_fromRPY(std::shared_ptr< Math::Vec3 > v, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::ValueOutputSignal >

    Parameters
    ----------
    v: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_ValueOutputSignal_fromRPY(v, source)

class Signals_Vec3OutputSignal(Signals_OutputSignal):
    r"""Proxy of C++ Physics::Signals::Vec3OutputSignal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_Vec3OutputSignal self) -> Signals_Vec3OutputSignal"""
        _PhysicsSwig.Signals_Vec3OutputSignal_swiginit(self, _PhysicsSwig.new_Signals_Vec3OutputSignal())

    def value(self):
        r"""value(Signals_Vec3OutputSignal self) -> std::shared_ptr< Math::Vec3 >"""
        return _PhysicsSwig.Signals_Vec3OutputSignal_value(self)

    @staticmethod
    def create(vec3, source):
        r"""
        create(std::shared_ptr< Math::Vec3 > vec3, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::Vec3OutputSignal >

        Parameters
        ----------
        vec3: std::shared_ptr< Math::Vec3 >
        source: std::shared_ptr< Physics::Signals::Output >

        """
        return _PhysicsSwig.Signals_Vec3OutputSignal_create(vec3, source)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_Vec3OutputSignal self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.Signals_Vec3OutputSignal_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_Vec3OutputSignal self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.Signals_Vec3OutputSignal_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_Vec3OutputSignal self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.Signals_Vec3OutputSignal_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_Vec3OutputSignal self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.Signals_Vec3OutputSignal_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_Vec3OutputSignal self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.Signals_Vec3OutputSignal_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_Vec3OutputSignal self)"""
        return _PhysicsSwig.Signals_Vec3OutputSignal_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_Signals_Vec3OutputSignal

# Register Signals_Vec3OutputSignal in _PhysicsSwig:
_PhysicsSwig.Signals_Vec3OutputSignal_swigregister(Signals_Vec3OutputSignal)

def Signals_Vec3OutputSignal_create(vec3, source):
    r"""
    Signals_Vec3OutputSignal_create(std::shared_ptr< Math::Vec3 > vec3, std::shared_ptr< Physics::Signals::Output > source) -> std::shared_ptr< Physics::Signals::Vec3OutputSignal >

    Parameters
    ----------
    vec3: std::shared_ptr< Math::Vec3 >
    source: std::shared_ptr< Physics::Signals::Output >

    """
    return _PhysicsSwig.Signals_Vec3OutputSignal_create(vec3, source)

class System(rebrick.Core.Object):
    r"""Proxy of C++ Physics::System class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(System self) -> System"""
        _PhysicsSwig.System_swiginit(self, _PhysicsSwig.new_System())

    def setDynamic(self, key, value):
        r"""
        setDynamic(System self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _PhysicsSwig.System_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(System self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _PhysicsSwig.System_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(System self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _PhysicsSwig.System_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(System self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _PhysicsSwig.System_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(System self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _PhysicsSwig.System_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(System self)"""
        return _PhysicsSwig.System_triggerOnInit(self)
    __swig_destroy__ = _PhysicsSwig.delete_System

# Register System in _PhysicsSwig:
_PhysicsSwig.System_swigregister(System)



