# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Physics3DSwig
else:
    import _Physics3DSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _Physics3DSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Physics3DSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics3DSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _Physics3DSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _Physics3DSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _Physics3DSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _Physics3DSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _Physics3DSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Physics3DSwig:
_Physics3DSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
import rebrick.Physics
class Physics3D_Bodies_Body_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Bodies::Body > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_Body_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type j) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type

        __setslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type j, Physics3D_Bodies_Body_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Body >,std::allocator< std::shared_ptr< Physics3D::Bodies::Body > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type

        __delitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice, Physics3D_Bodies_Body_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Body >,std::allocator< std::shared_ptr< Physics3D::Bodies::Body > > > const &

        __setitem__(Physics3D_Bodies_Body_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_Body_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_Body_Vector self, Physics3D_Bodies_Body_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Body > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_Body_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_Body_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator

        erase(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator first, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_Body_Vector self) -> Physics3D_Bodies_Body_Vector
        __init__(Physics3D_Bodies_Body_Vector self, Physics3D_Bodies_Body_Vector other) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Bodies::Body > > const &

        __init__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type size) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type

        __init__(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type size, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & value) -> Physics3D_Bodies_Body_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_Body_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Body_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type

        resize(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        insert(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_Body_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_Body_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Body > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Body_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Body_Vector

# Register Physics3D_Bodies_Body_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Body_Vector_swigregister(Physics3D_Bodies_Body_Vector)

class Physics3D_Bodies_Inertia_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_Inertia_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type j) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type

        __setslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type j, Physics3D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia >,std::allocator< std::shared_ptr< Physics3D::Bodies::Inertia > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type

        __delitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice, Physics3D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia >,std::allocator< std::shared_ptr< Physics3D::Bodies::Inertia > > > const &

        __setitem__(Physics3D_Bodies_Inertia_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_Inertia_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_Inertia_Vector self, Physics3D_Bodies_Inertia_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_Inertia_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_Inertia_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator

        erase(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator first, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_Inertia_Vector self) -> Physics3D_Bodies_Inertia_Vector
        __init__(Physics3D_Bodies_Inertia_Vector self, Physics3D_Bodies_Inertia_Vector other) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > > const &

        __init__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type size) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type

        __init__(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type size, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & value) -> Physics3D_Bodies_Inertia_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Inertia_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type

        resize(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        insert(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_Inertia_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_Inertia_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Inertia > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Inertia_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Inertia_Vector

# Register Physics3D_Bodies_Inertia_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Inertia_Vector_swigregister(Physics3D_Bodies_Inertia_Vector)

class Physics3D_Bodies_Kinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_Kinematics_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type j) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type

        __setslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type j, Physics3D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics >,std::allocator< std::shared_ptr< Physics3D::Bodies::Kinematics > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type

        __delitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice, Physics3D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics >,std::allocator< std::shared_ptr< Physics3D::Bodies::Kinematics > > > const &

        __setitem__(Physics3D_Bodies_Kinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_Kinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_Kinematics_Vector self, Physics3D_Bodies_Kinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_Kinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_Kinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator

        erase(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator first, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_Kinematics_Vector self) -> Physics3D_Bodies_Kinematics_Vector
        __init__(Physics3D_Bodies_Kinematics_Vector self, Physics3D_Bodies_Kinematics_Vector other) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > > const &

        __init__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type size) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type

        __init__(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type size, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & value) -> Physics3D_Bodies_Kinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_Kinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type

        resize(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        insert(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_Kinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_Kinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::Kinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_Kinematics_Vector

# Register Physics3D_Bodies_Kinematics_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_Kinematics_Vector_swigregister(Physics3D_Bodies_Kinematics_Vector)

class Physics3D_Bodies_RigidBody_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_RigidBody_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type j) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type

        __setslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type j, Physics3D_Bodies_RigidBody_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody >,std::allocator< std::shared_ptr< Physics3D::Bodies::RigidBody > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type

        __delitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice, Physics3D_Bodies_RigidBody_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody >,std::allocator< std::shared_ptr< Physics3D::Bodies::RigidBody > > > const &

        __setitem__(Physics3D_Bodies_RigidBody_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_RigidBody_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_RigidBody_Vector self, Physics3D_Bodies_RigidBody_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_RigidBody_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_RigidBody_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator

        erase(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator first, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_RigidBody_Vector self) -> Physics3D_Bodies_RigidBody_Vector
        __init__(Physics3D_Bodies_RigidBody_Vector self, Physics3D_Bodies_RigidBody_Vector other) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > > const &

        __init__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type size) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type

        __init__(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type size, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & value) -> Physics3D_Bodies_RigidBody_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_RigidBody_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type

        resize(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        insert(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_RigidBody_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_RigidBody_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBody > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_RigidBody_Vector

# Register Physics3D_Bodies_RigidBody_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_RigidBody_Vector_swigregister(Physics3D_Bodies_RigidBody_Vector)

class Physics3D_Bodies_RigidBodyKinematics_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type j) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        __setslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type j, Physics3D_Bodies_RigidBodyKinematics_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics >,std::allocator< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > > > const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        __delitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice, Physics3D_Bodies_RigidBodyKinematics_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics >,std::allocator< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > > > const &

        __setitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Bodies_RigidBodyKinematics_Vector self, Physics3D_Bodies_RigidBodyKinematics_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > > &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Bodies_RigidBodyKinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Bodies_RigidBodyKinematics_Vector self)"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator

        erase(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator first, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> Physics3D_Bodies_RigidBodyKinematics_Vector
        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self, Physics3D_Bodies_RigidBodyKinematics_Vector other) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > > const &

        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type size) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type

        __init__(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type size, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & value) -> Physics3D_Bodies_RigidBodyKinematics_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Bodies_RigidBodyKinematics_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type

        resize(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        insert(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type n, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Bodies_RigidBodyKinematics_Vector self, std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type

        """
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Bodies_RigidBodyKinematics_Vector self) -> std::vector< std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics > >::size_type"""
        return _Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Bodies_RigidBodyKinematics_Vector

# Register Physics3D_Bodies_RigidBodyKinematics_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Bodies_RigidBodyKinematics_Vector_swigregister(Physics3D_Bodies_RigidBodyKinematics_Vector)

class Physics3D_Charges_Box_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::Box > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Box_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type j) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type

        __setslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type j, Physics3D_Charges_Box_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::Box >,std::allocator< std::shared_ptr< Physics3D::Charges::Box > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type

        __delitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice, Physics3D_Charges_Box_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::Box >,std::allocator< std::shared_ptr< Physics3D::Charges::Box > > > const &

        __setitem__(Physics3D_Charges_Box_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Box_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Box_Vector self, Physics3D_Charges_Box_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::Box > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Box_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Box_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator

        erase(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Box_Vector self) -> Physics3D_Charges_Box_Vector
        __init__(Physics3D_Charges_Box_Vector self, Physics3D_Charges_Box_Vector other) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::Box > > const &

        __init__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type size) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type

        __init__(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & value) -> Physics3D_Charges_Box_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Box_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Box_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type

        resize(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        insert(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Box_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Box_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Box > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Box_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Box_Vector

# Register Physics3D_Charges_Box_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Box_Vector_swigregister(Physics3D_Charges_Box_Vector)

class Physics3D_Charges_Capsule_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::Capsule > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Capsule_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Capsule_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Capsule_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type j) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type

        __setslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type j, Physics3D_Charges_Capsule_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::Capsule >,std::allocator< std::shared_ptr< Physics3D::Charges::Capsule > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type

        __delitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice, Physics3D_Charges_Capsule_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::Capsule >,std::allocator< std::shared_ptr< Physics3D::Charges::Capsule > > > const &

        __setitem__(Physics3D_Charges_Capsule_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Capsule_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Capsule_Vector self, Physics3D_Charges_Capsule_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Capsule_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Capsule_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator

        erase(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Capsule_Vector self) -> Physics3D_Charges_Capsule_Vector
        __init__(Physics3D_Charges_Capsule_Vector self, Physics3D_Charges_Capsule_Vector other) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > > const &

        __init__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type size) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type

        __init__(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & value) -> Physics3D_Charges_Capsule_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Capsule_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Capsule_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type

        resize(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        insert(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Capsule_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Capsule_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Capsule > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Capsule_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Capsule_Vector

# Register Physics3D_Charges_Capsule_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Capsule_Vector_swigregister(Physics3D_Charges_Capsule_Vector)

class Physics3D_Charges_ContactGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_ContactGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_ContactGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_ContactGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type j) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type

        __setslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type j, Physics3D_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry >,std::allocator< std::shared_ptr< Physics3D::Charges::ContactGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type

        __delitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice, Physics3D_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry >,std::allocator< std::shared_ptr< Physics3D::Charges::ContactGeometry > > > const &

        __setitem__(Physics3D_Charges_ContactGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_ContactGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_ContactGeometry_Vector self, Physics3D_Charges_ContactGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_ContactGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_ContactGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator

        erase(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_ContactGeometry_Vector self) -> Physics3D_Charges_ContactGeometry_Vector
        __init__(Physics3D_Charges_ContactGeometry_Vector self, Physics3D_Charges_ContactGeometry_Vector other) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > > const &

        __init__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type size) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type

        __init__(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & value) -> Physics3D_Charges_ContactGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ContactGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type

        resize(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        insert(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_ContactGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_ContactGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ContactGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ContactGeometry_Vector

# Register Physics3D_Charges_ContactGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ContactGeometry_Vector_swigregister(Physics3D_Charges_ContactGeometry_Vector)

class Physics3D_Charges_ConvexMesh_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_ConvexMesh_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_ConvexMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_ConvexMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type j) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type

        __setslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type j, Physics3D_Charges_ConvexMesh_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh >,std::allocator< std::shared_ptr< Physics3D::Charges::ConvexMesh > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type

        __delitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice, Physics3D_Charges_ConvexMesh_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh >,std::allocator< std::shared_ptr< Physics3D::Charges::ConvexMesh > > > const &

        __setitem__(Physics3D_Charges_ConvexMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_ConvexMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_ConvexMesh_Vector self, Physics3D_Charges_ConvexMesh_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_ConvexMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_ConvexMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator

        erase(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_ConvexMesh_Vector self) -> Physics3D_Charges_ConvexMesh_Vector
        __init__(Physics3D_Charges_ConvexMesh_Vector self, Physics3D_Charges_ConvexMesh_Vector other) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > > const &

        __init__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type size) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type

        __init__(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & value) -> Physics3D_Charges_ConvexMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ConvexMesh_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type

        resize(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        insert(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_ConvexMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_ConvexMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ConvexMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ConvexMesh_Vector

# Register Physics3D_Charges_ConvexMesh_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ConvexMesh_Vector_swigregister(Physics3D_Charges_ConvexMesh_Vector)

class Physics3D_Charges_Cylinder_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Cylinder_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type j) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type

        __setslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type j, Physics3D_Charges_Cylinder_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder >,std::allocator< std::shared_ptr< Physics3D::Charges::Cylinder > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type

        __delitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice, Physics3D_Charges_Cylinder_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder >,std::allocator< std::shared_ptr< Physics3D::Charges::Cylinder > > > const &

        __setitem__(Physics3D_Charges_Cylinder_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Cylinder_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Cylinder_Vector self, Physics3D_Charges_Cylinder_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Cylinder_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Cylinder_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator

        erase(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Cylinder_Vector self) -> Physics3D_Charges_Cylinder_Vector
        __init__(Physics3D_Charges_Cylinder_Vector self, Physics3D_Charges_Cylinder_Vector other) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > > const &

        __init__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type size) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type

        __init__(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & value) -> Physics3D_Charges_Cylinder_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Cylinder_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type

        resize(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        insert(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Cylinder_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Cylinder_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Cylinder > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Cylinder_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Cylinder_Vector

# Register Physics3D_Charges_Cylinder_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Cylinder_Vector_swigregister(Physics3D_Charges_Cylinder_Vector)

class Physics3D_Charges_MateConnector_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_MateConnector_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type j) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type

        __setslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type j, Physics3D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector >,std::allocator< std::shared_ptr< Physics3D::Charges::MateConnector > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type

        __delitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice, Physics3D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector >,std::allocator< std::shared_ptr< Physics3D::Charges::MateConnector > > > const &

        __setitem__(Physics3D_Charges_MateConnector_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_MateConnector_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_MateConnector_Vector self, Physics3D_Charges_MateConnector_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > > &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_MateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_MateConnector_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator

        erase(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_MateConnector_Vector self) -> Physics3D_Charges_MateConnector_Vector
        __init__(Physics3D_Charges_MateConnector_Vector self, Physics3D_Charges_MateConnector_Vector other) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > > const &

        __init__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type size) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type

        __init__(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & value) -> Physics3D_Charges_MateConnector_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_MateConnector_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type

        resize(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        insert(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_MateConnector_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_MateConnector_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::MateConnector > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_MateConnector_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_MateConnector_Vector

# Register Physics3D_Charges_MateConnector_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_MateConnector_Vector_swigregister(Physics3D_Charges_MateConnector_Vector)

class Physics3D_Charges_ObjGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_ObjGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_ObjGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_ObjGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type j) -> Physics3D_Charges_ObjGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type

        __setslice__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type j, Physics3D_Charges_ObjGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry >,std::allocator< std::shared_ptr< Physics3D::Charges::ObjGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type

        __delitem__(Physics3D_Charges_ObjGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_ObjGeometry_Vector self, PySliceObject * slice) -> Physics3D_Charges_ObjGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_ObjGeometry_Vector self, PySliceObject * slice, Physics3D_Charges_ObjGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry >,std::allocator< std::shared_ptr< Physics3D::Charges::ObjGeometry > > > const &

        __setitem__(Physics3D_Charges_ObjGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_ObjGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_ObjGeometry_Vector self, Physics3D_Charges_ObjGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > > &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_ObjGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_ObjGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator

        erase(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_ObjGeometry_Vector self) -> Physics3D_Charges_ObjGeometry_Vector
        __init__(Physics3D_Charges_ObjGeometry_Vector self, Physics3D_Charges_ObjGeometry_Vector other) -> Physics3D_Charges_ObjGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > > const &

        __init__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type size) -> Physics3D_Charges_ObjGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type

        __init__(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & value) -> Physics3D_Charges_ObjGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_ObjGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type

        resize(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        insert(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_ObjGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_ObjGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::ObjGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_ObjGeometry_Vector

# Register Physics3D_Charges_ObjGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_ObjGeometry_Vector_swigregister(Physics3D_Charges_ObjGeometry_Vector)

class Physics3D_Charges_Sphere_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::Sphere > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_Sphere_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_Sphere_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_Sphere_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type j) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type

        __setslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type j, Physics3D_Charges_Sphere_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::Sphere >,std::allocator< std::shared_ptr< Physics3D::Charges::Sphere > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type

        __delitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice, Physics3D_Charges_Sphere_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::Sphere >,std::allocator< std::shared_ptr< Physics3D::Charges::Sphere > > > const &

        __setitem__(Physics3D_Charges_Sphere_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_Sphere_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_Sphere_Vector self, Physics3D_Charges_Sphere_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > > &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_Sphere_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_Sphere_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator

        erase(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_Sphere_Vector self) -> Physics3D_Charges_Sphere_Vector
        __init__(Physics3D_Charges_Sphere_Vector self, Physics3D_Charges_Sphere_Vector other) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > > const &

        __init__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type size) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type

        __init__(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & value) -> Physics3D_Charges_Sphere_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_Sphere_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_Sphere_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type

        resize(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        insert(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_Sphere_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_Sphere_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::Sphere > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_Sphere_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_Sphere_Vector

# Register Physics3D_Charges_Sphere_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_Sphere_Vector_swigregister(Physics3D_Charges_Sphere_Vector)

class Physics3D_Charges_TriMesh_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_TriMesh_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_TriMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_TriMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type j) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type

        __setslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type j, Physics3D_Charges_TriMesh_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh >,std::allocator< std::shared_ptr< Physics3D::Charges::TriMesh > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type

        __delitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice, Physics3D_Charges_TriMesh_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh >,std::allocator< std::shared_ptr< Physics3D::Charges::TriMesh > > > const &

        __setitem__(Physics3D_Charges_TriMesh_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_TriMesh_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_TriMesh_Vector self, Physics3D_Charges_TriMesh_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_TriMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_TriMesh_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator

        erase(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_TriMesh_Vector self) -> Physics3D_Charges_TriMesh_Vector
        __init__(Physics3D_Charges_TriMesh_Vector self, Physics3D_Charges_TriMesh_Vector other) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > > const &

        __init__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type size) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type

        __init__(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & value) -> Physics3D_Charges_TriMesh_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_TriMesh_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type

        resize(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        insert(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_TriMesh_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_TriMesh_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMesh > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMesh_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_TriMesh_Vector

# Register Physics3D_Charges_TriMesh_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_TriMesh_Vector_swigregister(Physics3D_Charges_TriMesh_Vector)

class Physics3D_Charges_TriMeshGeometry_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Charges_TriMeshGeometry_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Charges_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Charges_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type j) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type

        __setslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type j, Physics3D_Charges_TriMeshGeometry_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry >,std::allocator< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > > > const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type

        __delitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice, Physics3D_Charges_TriMeshGeometry_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry >,std::allocator< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > > > const &

        __setitem__(Physics3D_Charges_TriMeshGeometry_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Charges_TriMeshGeometry_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Charges_TriMeshGeometry_Vector self, Physics3D_Charges_TriMeshGeometry_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > > &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Charges_TriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Charges_TriMeshGeometry_Vector self)"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator

        erase(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator first, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Charges_TriMeshGeometry_Vector self) -> Physics3D_Charges_TriMeshGeometry_Vector
        __init__(Physics3D_Charges_TriMeshGeometry_Vector self, Physics3D_Charges_TriMeshGeometry_Vector other) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > > const &

        __init__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type size) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type

        __init__(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type size, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & value) -> Physics3D_Charges_TriMeshGeometry_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Charges_TriMeshGeometry_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type

        resize(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        insert(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type n, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Charges_TriMeshGeometry_Vector self, std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type

        """
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Charges_TriMeshGeometry_Vector self) -> std::vector< std::shared_ptr< Physics3D::Charges::TriMeshGeometry > >::size_type"""
        return _Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Charges_TriMeshGeometry_Vector

# Register Physics3D_Charges_TriMeshGeometry_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Charges_TriMeshGeometry_Vector_swigregister(Physics3D_Charges_TriMeshGeometry_Vector)

class Physics3D_Interactions_Cylindrical_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Cylindrical_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type j) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type

        __setslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type j, Physics3D_Interactions_Cylindrical_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical >,std::allocator< std::shared_ptr< Physics3D::Interactions::Cylindrical > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type

        __delitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice, Physics3D_Interactions_Cylindrical_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical >,std::allocator< std::shared_ptr< Physics3D::Interactions::Cylindrical > > > const &

        __setitem__(Physics3D_Interactions_Cylindrical_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Cylindrical_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Cylindrical_Vector self, Physics3D_Interactions_Cylindrical_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Cylindrical_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Cylindrical_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator

        erase(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Cylindrical_Vector self) -> Physics3D_Interactions_Cylindrical_Vector
        __init__(Physics3D_Interactions_Cylindrical_Vector self, Physics3D_Interactions_Cylindrical_Vector other) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > > const &

        __init__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type size) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type

        __init__(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & value) -> Physics3D_Interactions_Cylindrical_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Cylindrical_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type

        resize(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        insert(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Cylindrical_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Cylindrical_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Cylindrical > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Cylindrical_Vector

# Register Physics3D_Interactions_Cylindrical_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Cylindrical_Vector_swigregister(Physics3D_Interactions_Cylindrical_Vector)

class Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type j) -> Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type

        __setslice__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type j, Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType >,std::allocator< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type

        __delitem__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, PySliceObject * slice, Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType >,std::allocator< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > > > const &

        __setitem__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator

        erase(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector
        __init__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector other) -> Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > > const &

        __init__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type size) -> Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type

        __init__(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & value) -> Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type

        resize(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        insert(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::BodyOrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector

# Register Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector_swigregister(Physics3D_Interactions_Friction_BodyOrientedDryFrictionType_Vector)

class Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type j) -> Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type

        __setslice__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type j, Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType >,std::allocator< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type

        __delitem__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, PySliceObject * slice, Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType >,std::allocator< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > > > const &

        __setitem__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator

        erase(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector
        __init__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector other) -> Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > > const &

        __init__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type size) -> Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type

        __init__(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & value) -> Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type

        resize(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        insert(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector

# Register Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector_swigregister(Physics3D_Interactions_Friction_GeometryOrientedDryFrictionType_Vector)

class Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type j) -> Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type

        __setslice__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type j, Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType >,std::allocator< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type

        __delitem__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, PySliceObject * slice, Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType >,std::allocator< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > > > const &

        __setitem__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator

        erase(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector
        __init__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector other) -> Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > > const &

        __init__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type size) -> Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type

        __init__(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & value) -> Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type

        resize(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        insert(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Friction::OrientedDryFrictionType > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector

# Register Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector_swigregister(Physics3D_Interactions_Friction_OrientedDryFrictionType_Vector)

class Physics3D_Interactions_Hinge_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Hinge_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type j) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type

        __setslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type j, Physics3D_Interactions_Hinge_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge >,std::allocator< std::shared_ptr< Physics3D::Interactions::Hinge > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type

        __delitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice, Physics3D_Interactions_Hinge_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge >,std::allocator< std::shared_ptr< Physics3D::Interactions::Hinge > > > const &

        __setitem__(Physics3D_Interactions_Hinge_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Hinge_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Hinge_Vector self, Physics3D_Interactions_Hinge_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Hinge_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Hinge_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator

        erase(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Hinge_Vector self) -> Physics3D_Interactions_Hinge_Vector
        __init__(Physics3D_Interactions_Hinge_Vector self, Physics3D_Interactions_Hinge_Vector other) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > > const &

        __init__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type size) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type

        __init__(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & value) -> Physics3D_Interactions_Hinge_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Hinge_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type

        resize(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        insert(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Hinge_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Hinge_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Hinge > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Hinge_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Hinge_Vector

# Register Physics3D_Interactions_Hinge_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Hinge_Vector_swigregister(Physics3D_Interactions_Hinge_Vector)

class Physics3D_Interactions_Interaction_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Interaction_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Interaction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Interaction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type j) -> Physics3D_Interactions_Interaction_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type

        __setslice__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type j, Physics3D_Interactions_Interaction_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction >,std::allocator< std::shared_ptr< Physics3D::Interactions::Interaction > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type

        __delitem__(Physics3D_Interactions_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Interaction_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Interaction_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Interaction_Vector self, PySliceObject * slice, Physics3D_Interactions_Interaction_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction >,std::allocator< std::shared_ptr< Physics3D::Interactions::Interaction > > > const &

        __setitem__(Physics3D_Interactions_Interaction_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Interaction_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Interaction_Vector self, Physics3D_Interactions_Interaction_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Interaction_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Interaction_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator

        erase(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Interaction_Vector self) -> Physics3D_Interactions_Interaction_Vector
        __init__(Physics3D_Interactions_Interaction_Vector self, Physics3D_Interactions_Interaction_Vector other) -> Physics3D_Interactions_Interaction_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > > const &

        __init__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type size) -> Physics3D_Interactions_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type

        __init__(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & value) -> Physics3D_Interactions_Interaction_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Interaction_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type

        resize(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        insert(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Interaction_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Interaction_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Interaction_Vector

# Register Physics3D_Interactions_Interaction_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Interaction_Vector_swigregister(Physics3D_Interactions_Interaction_Vector)

class Physics3D_Interactions_Interaction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Interaction1DOF_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Interaction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Interaction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type j) -> Physics3D_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type

        __setslice__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type j, Physics3D_Interactions_Interaction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type

        __delitem__(Physics3D_Interactions_Interaction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Interaction1DOF_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Interaction1DOF_Vector self, PySliceObject * slice, Physics3D_Interactions_Interaction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > > > const &

        __setitem__(Physics3D_Interactions_Interaction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Interaction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Interaction1DOF_Vector self, Physics3D_Interactions_Interaction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Interaction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Interaction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator

        erase(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Interaction1DOF_Vector self) -> Physics3D_Interactions_Interaction1DOF_Vector
        __init__(Physics3D_Interactions_Interaction1DOF_Vector self, Physics3D_Interactions_Interaction1DOF_Vector other) -> Physics3D_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > > const &

        __init__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type size) -> Physics3D_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type

        __init__(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & value) -> Physics3D_Interactions_Interaction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Interaction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type

        resize(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        insert(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Interaction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Interaction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Interaction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Interaction1DOF_Vector

# Register Physics3D_Interactions_Interaction1DOF_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Interaction1DOF_Vector_swigregister(Physics3D_Interactions_Interaction1DOF_Vector)

class Physics3D_Interactions_LinearRange_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_LinearRange_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_LinearRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_LinearRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type j) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type

        __setslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type j, Physics3D_Interactions_LinearRange_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange >,std::allocator< std::shared_ptr< Physics3D::Interactions::LinearRange > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type

        __delitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice, Physics3D_Interactions_LinearRange_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange >,std::allocator< std::shared_ptr< Physics3D::Interactions::LinearRange > > > const &

        __setitem__(Physics3D_Interactions_LinearRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_LinearRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_LinearRange_Vector self, Physics3D_Interactions_LinearRange_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_LinearRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_LinearRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator

        erase(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_LinearRange_Vector self) -> Physics3D_Interactions_LinearRange_Vector
        __init__(Physics3D_Interactions_LinearRange_Vector self, Physics3D_Interactions_LinearRange_Vector other) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > > const &

        __init__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type size) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type

        __init__(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & value) -> Physics3D_Interactions_LinearRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearRange_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type

        resize(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        insert(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_LinearRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_LinearRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearRange_Vector

# Register Physics3D_Interactions_LinearRange_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearRange_Vector_swigregister(Physics3D_Interactions_LinearRange_Vector)

class Physics3D_Interactions_LinearSpring_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_LinearSpring_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type j) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type

        __setslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type j, Physics3D_Interactions_LinearSpring_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring >,std::allocator< std::shared_ptr< Physics3D::Interactions::LinearSpring > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type

        __delitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice, Physics3D_Interactions_LinearSpring_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring >,std::allocator< std::shared_ptr< Physics3D::Interactions::LinearSpring > > > const &

        __setitem__(Physics3D_Interactions_LinearSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_LinearSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_LinearSpring_Vector self, Physics3D_Interactions_LinearSpring_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_LinearSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_LinearSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator

        erase(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_LinearSpring_Vector self) -> Physics3D_Interactions_LinearSpring_Vector
        __init__(Physics3D_Interactions_LinearSpring_Vector self, Physics3D_Interactions_LinearSpring_Vector other) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > > const &

        __init__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type size) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type

        __init__(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & value) -> Physics3D_Interactions_LinearSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearSpring_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type

        resize(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        insert(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_LinearSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_LinearSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearSpring_Vector

# Register Physics3D_Interactions_LinearSpring_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearSpring_Vector_swigregister(Physics3D_Interactions_LinearSpring_Vector)

class Physics3D_Interactions_LinearVelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type j) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        __setslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type j, Physics3D_Interactions_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        __delitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > > > const &

        __setitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_LinearVelocityMotor_Vector self, Physics3D_Interactions_LinearVelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_LinearVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_LinearVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator

        erase(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> Physics3D_Interactions_LinearVelocityMotor_Vector
        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self, Physics3D_Interactions_LinearVelocityMotor_Vector other) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > > const &

        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type size) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type

        __init__(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & value) -> Physics3D_Interactions_LinearVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_LinearVelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type

        resize(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        insert(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_LinearVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_LinearVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_LinearVelocityMotor_Vector

# Register Physics3D_Interactions_LinearVelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_LinearVelocityMotor_Vector_swigregister(Physics3D_Interactions_LinearVelocityMotor_Vector)

class Physics3D_Interactions_Lock_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Lock > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Lock_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Lock_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Lock_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type j) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type

        __setslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type j, Physics3D_Interactions_Lock_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Lock >,std::allocator< std::shared_ptr< Physics3D::Interactions::Lock > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type

        __delitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice, Physics3D_Interactions_Lock_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Lock >,std::allocator< std::shared_ptr< Physics3D::Interactions::Lock > > > const &

        __setitem__(Physics3D_Interactions_Lock_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Lock_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Lock_Vector self, Physics3D_Interactions_Lock_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Lock_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Lock_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator

        erase(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Lock_Vector self) -> Physics3D_Interactions_Lock_Vector
        __init__(Physics3D_Interactions_Lock_Vector self, Physics3D_Interactions_Lock_Vector other) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > > const &

        __init__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type size) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type

        __init__(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & value) -> Physics3D_Interactions_Lock_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Lock_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Lock_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type

        resize(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        insert(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Lock_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Lock_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Lock > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Lock_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Lock_Vector

# Register Physics3D_Interactions_Lock_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Lock_Vector_swigregister(Physics3D_Interactions_Lock_Vector)

class Physics3D_Interactions_Mate_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Mate > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Mate_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type j) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type

        __setslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type j, Physics3D_Interactions_Mate_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Mate >,std::allocator< std::shared_ptr< Physics3D::Interactions::Mate > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type

        __delitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice, Physics3D_Interactions_Mate_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Mate >,std::allocator< std::shared_ptr< Physics3D::Interactions::Mate > > > const &

        __setitem__(Physics3D_Interactions_Mate_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Mate_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Mate_Vector self, Physics3D_Interactions_Mate_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Mate_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Mate_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator

        erase(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Mate_Vector self) -> Physics3D_Interactions_Mate_Vector
        __init__(Physics3D_Interactions_Mate_Vector self, Physics3D_Interactions_Mate_Vector other) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > > const &

        __init__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type size) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type

        __init__(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & value) -> Physics3D_Interactions_Mate_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Mate_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Mate_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type

        resize(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        insert(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Mate_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Mate_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Mate > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Mate_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Mate_Vector

# Register Physics3D_Interactions_Mate_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Mate_Vector_swigregister(Physics3D_Interactions_Mate_Vector)

class Physics3D_Interactions_MateAxisData_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_MateAxisData_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_MateAxisData_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_MateAxisData_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type j) -> Physics3D_Interactions_MateAxisData_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type

        __setslice__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type j, Physics3D_Interactions_MateAxisData_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData >,std::allocator< std::shared_ptr< Physics3D::Interactions::MateAxisData > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type

        __delitem__(Physics3D_Interactions_MateAxisData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_MateAxisData_Vector self, PySliceObject * slice) -> Physics3D_Interactions_MateAxisData_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_MateAxisData_Vector self, PySliceObject * slice, Physics3D_Interactions_MateAxisData_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData >,std::allocator< std::shared_ptr< Physics3D::Interactions::MateAxisData > > > const &

        __setitem__(Physics3D_Interactions_MateAxisData_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_MateAxisData_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_MateAxisData_Vector self, Physics3D_Interactions_MateAxisData_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_MateAxisData_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_MateAxisData_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator

        erase(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_MateAxisData_Vector self) -> Physics3D_Interactions_MateAxisData_Vector
        __init__(Physics3D_Interactions_MateAxisData_Vector self, Physics3D_Interactions_MateAxisData_Vector other) -> Physics3D_Interactions_MateAxisData_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > > const &

        __init__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type size) -> Physics3D_Interactions_MateAxisData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type

        __init__(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & value) -> Physics3D_Interactions_MateAxisData_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_MateAxisData_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type

        resize(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        insert(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_MateAxisData_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_MateAxisData_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateAxisData > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_MateAxisData_Vector

# Register Physics3D_Interactions_MateAxisData_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_MateAxisData_Vector_swigregister(Physics3D_Interactions_MateAxisData_Vector)

class Physics3D_Interactions_MateDamping_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_MateDamping_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_MateDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_MateDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type j) -> Physics3D_Interactions_MateDamping_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type

        __setslice__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type j, Physics3D_Interactions_MateDamping_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping >,std::allocator< std::shared_ptr< Physics3D::Interactions::MateDamping > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type

        __delitem__(Physics3D_Interactions_MateDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_MateDamping_Vector self, PySliceObject * slice) -> Physics3D_Interactions_MateDamping_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_MateDamping_Vector self, PySliceObject * slice, Physics3D_Interactions_MateDamping_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping >,std::allocator< std::shared_ptr< Physics3D::Interactions::MateDamping > > > const &

        __setitem__(Physics3D_Interactions_MateDamping_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_MateDamping_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_MateDamping_Vector self, Physics3D_Interactions_MateDamping_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_MateDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_MateDamping_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator

        erase(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_MateDamping_Vector self) -> Physics3D_Interactions_MateDamping_Vector
        __init__(Physics3D_Interactions_MateDamping_Vector self, Physics3D_Interactions_MateDamping_Vector other) -> Physics3D_Interactions_MateDamping_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > > const &

        __init__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type size) -> Physics3D_Interactions_MateDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type

        __init__(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & value) -> Physics3D_Interactions_MateDamping_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_MateDamping_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type

        resize(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        insert(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_MateDamping_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_MateDamping_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateDamping > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_MateDamping_Vector

# Register Physics3D_Interactions_MateDamping_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_MateDamping_Vector_swigregister(Physics3D_Interactions_MateDamping_Vector)

class Physics3D_Interactions_MateStiffness_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_MateStiffness_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_MateStiffness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_MateStiffness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type j) -> Physics3D_Interactions_MateStiffness_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type

        __setslice__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type j, Physics3D_Interactions_MateStiffness_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness >,std::allocator< std::shared_ptr< Physics3D::Interactions::MateStiffness > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type

        __delitem__(Physics3D_Interactions_MateStiffness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_MateStiffness_Vector self, PySliceObject * slice) -> Physics3D_Interactions_MateStiffness_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_MateStiffness_Vector self, PySliceObject * slice, Physics3D_Interactions_MateStiffness_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness >,std::allocator< std::shared_ptr< Physics3D::Interactions::MateStiffness > > > const &

        __setitem__(Physics3D_Interactions_MateStiffness_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_MateStiffness_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_MateStiffness_Vector self, Physics3D_Interactions_MateStiffness_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_MateStiffness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_MateStiffness_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator

        erase(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_MateStiffness_Vector self) -> Physics3D_Interactions_MateStiffness_Vector
        __init__(Physics3D_Interactions_MateStiffness_Vector self, Physics3D_Interactions_MateStiffness_Vector other) -> Physics3D_Interactions_MateStiffness_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > > const &

        __init__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type size) -> Physics3D_Interactions_MateStiffness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type

        __init__(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & value) -> Physics3D_Interactions_MateStiffness_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_MateStiffness_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type

        resize(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        insert(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_MateStiffness_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_MateStiffness_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::MateStiffness > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_MateStiffness_Vector

# Register Physics3D_Interactions_MateStiffness_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_MateStiffness_Vector_swigregister(Physics3D_Interactions_MateStiffness_Vector)

class Physics3D_Interactions_Prismatic_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_Prismatic_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type j) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type

        __setslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type j, Physics3D_Interactions_Prismatic_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic >,std::allocator< std::shared_ptr< Physics3D::Interactions::Prismatic > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type

        __delitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice, Physics3D_Interactions_Prismatic_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic >,std::allocator< std::shared_ptr< Physics3D::Interactions::Prismatic > > > const &

        __setitem__(Physics3D_Interactions_Prismatic_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_Prismatic_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_Prismatic_Vector self, Physics3D_Interactions_Prismatic_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_Prismatic_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_Prismatic_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator

        erase(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_Prismatic_Vector self) -> Physics3D_Interactions_Prismatic_Vector
        __init__(Physics3D_Interactions_Prismatic_Vector self, Physics3D_Interactions_Prismatic_Vector other) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > > const &

        __init__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type size) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type

        __init__(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & value) -> Physics3D_Interactions_Prismatic_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_Prismatic_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type

        resize(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        insert(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_Prismatic_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_Prismatic_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::Prismatic > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_Prismatic_Vector

# Register Physics3D_Interactions_Prismatic_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_Prismatic_Vector_swigregister(Physics3D_Interactions_Prismatic_Vector)

class Physics3D_Interactions_RangeInteraction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        __setslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j, Physics3D_Interactions_RangeInteraction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        __delitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice, Physics3D_Interactions_RangeInteraction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > > > const &

        __setitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_RangeInteraction1DOF_Vector self, Physics3D_Interactions_RangeInteraction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_RangeInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_RangeInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        erase(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> Physics3D_Interactions_RangeInteraction1DOF_Vector
        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, Physics3D_Interactions_RangeInteraction1DOF_Vector other) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > > const &

        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type size) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type

        __init__(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & value) -> Physics3D_Interactions_RangeInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RangeInteraction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type

        resize(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        insert(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_RangeInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_RangeInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RangeInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RangeInteraction1DOF_Vector

# Register Physics3D_Interactions_RangeInteraction1DOF_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RangeInteraction1DOF_Vector_swigregister(Physics3D_Interactions_RangeInteraction1DOF_Vector)

class Physics3D_Interactions_RotationalRange_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_RotationalRange_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_RotationalRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_RotationalRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type j) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type

        __setslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type j, Physics3D_Interactions_RotationalRange_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange >,std::allocator< std::shared_ptr< Physics3D::Interactions::RotationalRange > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type

        __delitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice, Physics3D_Interactions_RotationalRange_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange >,std::allocator< std::shared_ptr< Physics3D::Interactions::RotationalRange > > > const &

        __setitem__(Physics3D_Interactions_RotationalRange_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_RotationalRange_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_RotationalRange_Vector self, Physics3D_Interactions_RotationalRange_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_RotationalRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_RotationalRange_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator

        erase(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_RotationalRange_Vector self) -> Physics3D_Interactions_RotationalRange_Vector
        __init__(Physics3D_Interactions_RotationalRange_Vector self, Physics3D_Interactions_RotationalRange_Vector other) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > > const &

        __init__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type size) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type

        __init__(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & value) -> Physics3D_Interactions_RotationalRange_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RotationalRange_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type

        resize(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        insert(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_RotationalRange_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_RotationalRange_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalRange > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RotationalRange_Vector

# Register Physics3D_Interactions_RotationalRange_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RotationalRange_Vector_swigregister(Physics3D_Interactions_RotationalRange_Vector)

class Physics3D_Interactions_RotationalVelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        __setslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j, Physics3D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        __delitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor >,std::allocator< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > > > const &

        __setitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_RotationalVelocityMotor_Vector self, Physics3D_Interactions_RotationalVelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_RotationalVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_RotationalVelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        erase(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> Physics3D_Interactions_RotationalVelocityMotor_Vector
        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, Physics3D_Interactions_RotationalVelocityMotor_Vector other) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > > const &

        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type size) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type

        __init__(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & value) -> Physics3D_Interactions_RotationalVelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_RotationalVelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type

        resize(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        insert(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_RotationalVelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_RotationalVelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_RotationalVelocityMotor_Vector

# Register Physics3D_Interactions_RotationalVelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_RotationalVelocityMotor_Vector_swigregister(Physics3D_Interactions_RotationalVelocityMotor_Vector)

class Physics3D_Interactions_SpringInteraction1DOF_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        __setslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j, Physics3D_Interactions_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        __delitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice, Physics3D_Interactions_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF >,std::allocator< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > > > const &

        __setitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_SpringInteraction1DOF_Vector self, Physics3D_Interactions_SpringInteraction1DOF_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_SpringInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_SpringInteraction1DOF_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        erase(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> Physics3D_Interactions_SpringInteraction1DOF_Vector
        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, Physics3D_Interactions_SpringInteraction1DOF_Vector other) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > > const &

        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type size) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type

        __init__(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & value) -> Physics3D_Interactions_SpringInteraction1DOF_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SpringInteraction1DOF_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type

        resize(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        insert(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_SpringInteraction1DOF_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_SpringInteraction1DOF_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SpringInteraction1DOF > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SpringInteraction1DOF_Vector

# Register Physics3D_Interactions_SpringInteraction1DOF_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SpringInteraction1DOF_Vector_swigregister(Physics3D_Interactions_SpringInteraction1DOF_Vector)

class Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type j) -> Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type

        __setslice__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type j, Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel >,std::allocator< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type

        __delitem__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, PySliceObject * slice) -> Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, PySliceObject * slice, Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel >,std::allocator< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > > > const &

        __setitem__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator

        erase(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector
        __init__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector other) -> Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > > const &

        __init__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type size) -> Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type

        __init__(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & value) -> Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type

        resize(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        insert(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector

# Register Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector_swigregister(Physics3D_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_Vector)

class Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        __setslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel >,std::allocator< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        __delitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel >,std::allocator< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > > const &

        __setitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        erase(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector
        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector other) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > > const &

        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type size) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type

        __init__(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & value) -> Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type

        resize(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        insert(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector

# Register Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector_swigregister(Physics3D_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_Vector)

class Physics3D_Interactions_TorsionSpring_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_TorsionSpring_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type j) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type

        __setslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type j, Physics3D_Interactions_TorsionSpring_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring >,std::allocator< std::shared_ptr< Physics3D::Interactions::TorsionSpring > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type

        __delitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice, Physics3D_Interactions_TorsionSpring_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring >,std::allocator< std::shared_ptr< Physics3D::Interactions::TorsionSpring > > > const &

        __setitem__(Physics3D_Interactions_TorsionSpring_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_TorsionSpring_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_TorsionSpring_Vector self, Physics3D_Interactions_TorsionSpring_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_TorsionSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_TorsionSpring_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator

        erase(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_TorsionSpring_Vector self) -> Physics3D_Interactions_TorsionSpring_Vector
        __init__(Physics3D_Interactions_TorsionSpring_Vector self, Physics3D_Interactions_TorsionSpring_Vector other) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > > const &

        __init__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type size) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type

        __init__(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & value) -> Physics3D_Interactions_TorsionSpring_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_TorsionSpring_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type

        resize(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        insert(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_TorsionSpring_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_TorsionSpring_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::TorsionSpring > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_TorsionSpring_Vector

# Register Physics3D_Interactions_TorsionSpring_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_TorsionSpring_Vector_swigregister(Physics3D_Interactions_TorsionSpring_Vector)

class Physics3D_Interactions_VelocityMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Interactions_VelocityMotor_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type j) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type

        __setslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type j, Physics3D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor >,std::allocator< std::shared_ptr< Physics3D::Interactions::VelocityMotor > > > const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type

        __delitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice, Physics3D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor >,std::allocator< std::shared_ptr< Physics3D::Interactions::VelocityMotor > > > const &

        __setitem__(Physics3D_Interactions_VelocityMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Interactions_VelocityMotor_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Interactions_VelocityMotor_Vector self, Physics3D_Interactions_VelocityMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > > &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Interactions_VelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Interactions_VelocityMotor_Vector self)"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator

        erase(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator first, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Interactions_VelocityMotor_Vector self) -> Physics3D_Interactions_VelocityMotor_Vector
        __init__(Physics3D_Interactions_VelocityMotor_Vector self, Physics3D_Interactions_VelocityMotor_Vector other) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > > const &

        __init__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type size) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type

        __init__(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type size, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & value) -> Physics3D_Interactions_VelocityMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Interactions_VelocityMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type

        resize(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        insert(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type n, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Interactions_VelocityMotor_Vector self, std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type

        """
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Interactions_VelocityMotor_Vector self) -> std::vector< std::shared_ptr< Physics3D::Interactions::VelocityMotor > >::size_type"""
        return _Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Interactions_VelocityMotor_Vector

# Register Physics3D_Interactions_VelocityMotor_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Interactions_VelocityMotor_Vector_swigregister(Physics3D_Interactions_VelocityMotor_Vector)

class Physics3D_Signals_HingeAngleOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_HingeAngleOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_HingeAngleOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_HingeAngleOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type j) -> Physics3D_Signals_HingeAngleOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type

        __setslice__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type j, Physics3D_Signals_HingeAngleOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type

        __delitem__(Physics3D_Signals_HingeAngleOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_HingeAngleOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_HingeAngleOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_HingeAngleOutput_Vector self, PySliceObject * slice, Physics3D_Signals_HingeAngleOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > > > const &

        __setitem__(Physics3D_Signals_HingeAngleOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_HingeAngleOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_HingeAngleOutput_Vector self, Physics3D_Signals_HingeAngleOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_HingeAngleOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_HingeAngleOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator

        erase(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_HingeAngleOutput_Vector self) -> Physics3D_Signals_HingeAngleOutput_Vector
        __init__(Physics3D_Signals_HingeAngleOutput_Vector self, Physics3D_Signals_HingeAngleOutput_Vector other) -> Physics3D_Signals_HingeAngleOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > > const &

        __init__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type size) -> Physics3D_Signals_HingeAngleOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type

        __init__(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & value) -> Physics3D_Signals_HingeAngleOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_HingeAngleOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type

        resize(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        insert(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_HingeAngleOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_HingeAngleOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngleOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_HingeAngleOutput_Vector

# Register Physics3D_Signals_HingeAngleOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_HingeAngleOutput_Vector_swigregister(Physics3D_Signals_HingeAngleOutput_Vector)

class Physics3D_Signals_HingeAngularVelocityOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type j) -> Physics3D_Signals_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type

        __setslice__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type j, Physics3D_Signals_HingeAngularVelocityOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type

        __delitem__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, PySliceObject * slice, Physics3D_Signals_HingeAngularVelocityOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > > > const &

        __setitem__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, Physics3D_Signals_HingeAngularVelocityOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_HingeAngularVelocityOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_HingeAngularVelocityOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator

        erase(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> Physics3D_Signals_HingeAngularVelocityOutput_Vector
        __init__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, Physics3D_Signals_HingeAngularVelocityOutput_Vector other) -> Physics3D_Signals_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > > const &

        __init__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type size) -> Physics3D_Signals_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type

        __init__(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & value) -> Physics3D_Signals_HingeAngularVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_HingeAngularVelocityOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type

        resize(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        insert(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_HingeAngularVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_HingeAngularVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::HingeAngularVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_HingeAngularVelocityOutput_Vector

# Register Physics3D_Signals_HingeAngularVelocityOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_HingeAngularVelocityOutput_Vector_swigregister(Physics3D_Signals_HingeAngularVelocityOutput_Vector)

class Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type j) -> Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type

        __setslice__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type j, Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type

        __delitem__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice) -> Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice, Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > > > const &

        __setitem__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator

        erase(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector
        __init__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector other) -> Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > > const &

        __init__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type size) -> Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type

        __init__(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & value) -> Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type

        resize(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        insert(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::LinearVelocityMotorVelocityInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector

# Register Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector_swigregister(Physics3D_Signals_LinearVelocityMotorVelocityInput_Vector)

class Physics3D_Signals_PrismaticPositionOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type j) -> Physics3D_Signals_PrismaticPositionOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type

        __setslice__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type j, Physics3D_Signals_PrismaticPositionOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type

        __delitem__(Physics3D_Signals_PrismaticPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_PrismaticPositionOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_PrismaticPositionOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_PrismaticPositionOutput_Vector self, PySliceObject * slice, Physics3D_Signals_PrismaticPositionOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > > > const &

        __setitem__(Physics3D_Signals_PrismaticPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_PrismaticPositionOutput_Vector self, Physics3D_Signals_PrismaticPositionOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_PrismaticPositionOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_PrismaticPositionOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator

        erase(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> Physics3D_Signals_PrismaticPositionOutput_Vector
        __init__(Physics3D_Signals_PrismaticPositionOutput_Vector self, Physics3D_Signals_PrismaticPositionOutput_Vector other) -> Physics3D_Signals_PrismaticPositionOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > > const &

        __init__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type size) -> Physics3D_Signals_PrismaticPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type

        __init__(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & value) -> Physics3D_Signals_PrismaticPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_PrismaticPositionOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type

        resize(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        insert(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_PrismaticPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_PrismaticPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticPositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_PrismaticPositionOutput_Vector

# Register Physics3D_Signals_PrismaticPositionOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_PrismaticPositionOutput_Vector_swigregister(Physics3D_Signals_PrismaticPositionOutput_Vector)

class Physics3D_Signals_PrismaticVelocityOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type j) -> Physics3D_Signals_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type

        __setslice__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type j, Physics3D_Signals_PrismaticVelocityOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type

        __delitem__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, PySliceObject * slice, Physics3D_Signals_PrismaticVelocityOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > > > const &

        __setitem__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_PrismaticVelocityOutput_Vector self, Physics3D_Signals_PrismaticVelocityOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_PrismaticVelocityOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_PrismaticVelocityOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator

        erase(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> Physics3D_Signals_PrismaticVelocityOutput_Vector
        __init__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, Physics3D_Signals_PrismaticVelocityOutput_Vector other) -> Physics3D_Signals_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > > const &

        __init__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type size) -> Physics3D_Signals_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type

        __init__(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & value) -> Physics3D_Signals_PrismaticVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_PrismaticVelocityOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type

        resize(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        insert(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_PrismaticVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_PrismaticVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::PrismaticVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_PrismaticVelocityOutput_Vector

# Register Physics3D_Signals_PrismaticVelocityOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_PrismaticVelocityOutput_Vector_swigregister(Physics3D_Signals_PrismaticVelocityOutput_Vector)

class Physics3D_Signals_RigidBodyPositionOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type j) -> Physics3D_Signals_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type

        __setslice__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type j, Physics3D_Signals_RigidBodyPositionOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type

        __delitem__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, PySliceObject * slice, Physics3D_Signals_RigidBodyPositionOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > > > const &

        __setitem__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_RigidBodyPositionOutput_Vector self, Physics3D_Signals_RigidBodyPositionOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_RigidBodyPositionOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_RigidBodyPositionOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator

        erase(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> Physics3D_Signals_RigidBodyPositionOutput_Vector
        __init__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, Physics3D_Signals_RigidBodyPositionOutput_Vector other) -> Physics3D_Signals_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > > const &

        __init__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type size) -> Physics3D_Signals_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type

        __init__(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & value) -> Physics3D_Signals_RigidBodyPositionOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_RigidBodyPositionOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type

        resize(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        insert(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_RigidBodyPositionOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_RigidBodyPositionOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyPositionOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_RigidBodyPositionOutput_Vector

# Register Physics3D_Signals_RigidBodyPositionOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_RigidBodyPositionOutput_Vector_swigregister(Physics3D_Signals_RigidBodyPositionOutput_Vector)

class Physics3D_Signals_RigidBodyRPYOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type j) -> Physics3D_Signals_RigidBodyRPYOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type

        __setslice__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type j, Physics3D_Signals_RigidBodyRPYOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type

        __delitem__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_RigidBodyRPYOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, PySliceObject * slice, Physics3D_Signals_RigidBodyRPYOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > > > const &

        __setitem__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_RigidBodyRPYOutput_Vector self, Physics3D_Signals_RigidBodyRPYOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_RigidBodyRPYOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_RigidBodyRPYOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator

        erase(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> Physics3D_Signals_RigidBodyRPYOutput_Vector
        __init__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, Physics3D_Signals_RigidBodyRPYOutput_Vector other) -> Physics3D_Signals_RigidBodyRPYOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > > const &

        __init__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type size) -> Physics3D_Signals_RigidBodyRPYOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type

        __init__(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & value) -> Physics3D_Signals_RigidBodyRPYOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_RigidBodyRPYOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type

        resize(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        insert(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_RigidBodyRPYOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_RigidBodyRPYOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyRPYOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_RigidBodyRPYOutput_Vector

# Register Physics3D_Signals_RigidBodyRPYOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_RigidBodyRPYOutput_Vector_swigregister(Physics3D_Signals_RigidBodyRPYOutput_Vector)

class Physics3D_Signals_RigidBodyVelocityOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type j) -> Physics3D_Signals_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type

        __setslice__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type j, Physics3D_Signals_RigidBodyVelocityOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type

        __delitem__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, PySliceObject * slice) -> Physics3D_Signals_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, PySliceObject * slice, Physics3D_Signals_RigidBodyVelocityOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput >,std::allocator< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > > > const &

        __setitem__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, Physics3D_Signals_RigidBodyVelocityOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_RigidBodyVelocityOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_RigidBodyVelocityOutput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator

        erase(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> Physics3D_Signals_RigidBodyVelocityOutput_Vector
        __init__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, Physics3D_Signals_RigidBodyVelocityOutput_Vector other) -> Physics3D_Signals_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > > const &

        __init__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type size) -> Physics3D_Signals_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type

        __init__(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & value) -> Physics3D_Signals_RigidBodyVelocityOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_RigidBodyVelocityOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type

        resize(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        insert(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_RigidBodyVelocityOutput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_RigidBodyVelocityOutput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RigidBodyVelocityOutput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_RigidBodyVelocityOutput_Vector

# Register Physics3D_Signals_RigidBodyVelocityOutput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_RigidBodyVelocityOutput_Vector_swigregister(Physics3D_Signals_RigidBodyVelocityOutput_Vector)

class Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type j) -> Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type

        __setslice__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type j, Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type

        __delitem__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice) -> Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice, Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput >,std::allocator< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > > > const &

        __setitem__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator

        erase(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector
        __init__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector other) -> Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > > const &

        __init__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type size) -> Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type

        __init__(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & value) -> Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type

        resize(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        insert(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::RotationalVelocityMotorVelocityInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector

# Register Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector_swigregister(Physics3D_Signals_RotationalVelocityMotorVelocityInput_Vector)

class Physics3D_Signals_TorsionSpringAngleInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type j) -> Physics3D_Signals_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type

        __setslice__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type j, Physics3D_Signals_TorsionSpringAngleInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput >,std::allocator< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > > > const &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type

        __delitem__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, PySliceObject * slice) -> Physics3D_Signals_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, PySliceObject * slice, Physics3D_Signals_TorsionSpringAngleInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput >,std::allocator< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > > > const &

        __setitem__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Signals_TorsionSpringAngleInput_Vector self, Physics3D_Signals_TorsionSpringAngleInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > > &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Signals_TorsionSpringAngleInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Signals_TorsionSpringAngleInput_Vector self)"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator

        erase(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator first, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> Physics3D_Signals_TorsionSpringAngleInput_Vector
        __init__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, Physics3D_Signals_TorsionSpringAngleInput_Vector other) -> Physics3D_Signals_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > > const &

        __init__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type size) -> Physics3D_Signals_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type

        __init__(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type size, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & value) -> Physics3D_Signals_TorsionSpringAngleInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Signals_TorsionSpringAngleInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type

        resize(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        insert(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type n, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Signals_TorsionSpringAngleInput_Vector self, std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type

        """
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Signals_TorsionSpringAngleInput_Vector self) -> std::vector< std::shared_ptr< Physics3D::Signals::TorsionSpringAngleInput > >::size_type"""
        return _Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Signals_TorsionSpringAngleInput_Vector

# Register Physics3D_Signals_TorsionSpringAngleInput_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Signals_TorsionSpringAngleInput_Vector_swigregister(Physics3D_Signals_TorsionSpringAngleInput_Vector)

class Physics3D_System_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::System > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_System_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_System_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j) -> Physics3D_System_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        __setslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j, Physics3D_System_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::System >,std::allocator< std::shared_ptr< Physics3D::System > > > const &

        """
        return _Physics3DSwig.Physics3D_System_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        __delitem__(Physics3D_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_System_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_System_Vector self, PySliceObject * slice) -> Physics3D_System_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type

        """
        return _Physics3DSwig.Physics3D_System_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_System_Vector self, PySliceObject * slice, Physics3D_System_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::System >,std::allocator< std::shared_ptr< Physics3D::System > > > const &

        __setitem__(Physics3D_System_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::difference_type i, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::System > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type"""
        return _Physics3DSwig.Physics3D_System_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_System_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_System_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_System_Vector self, Physics3D_System_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::System > > &

        """
        return _Physics3DSwig.Physics3D_System_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_System_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_System_Vector self)"""
        return _Physics3DSwig.Physics3D_System_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::allocator_type"""
        return _Physics3DSwig.Physics3D_System_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_System_Vector self)"""
        return _Physics3DSwig.Physics3D_System_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::System > >::iterator

        erase(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator first, std::vector< std::shared_ptr< Physics3D::System > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::System > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::System > >::iterator

        """
        return _Physics3DSwig.Physics3D_System_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_System_Vector self) -> Physics3D_System_Vector
        __init__(Physics3D_System_Vector self, Physics3D_System_Vector other) -> Physics3D_System_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::System > > const &

        __init__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type size) -> Physics3D_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::System > >::size_type

        __init__(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type size, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & value) -> Physics3D_System_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        _Physics3DSwig.Physics3D_System_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_System_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type const &"""
        return _Physics3DSwig.Physics3D_System_Vector_front(self)

    def back(self):
        r"""back(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::value_type const &"""
        return _Physics3DSwig.Physics3D_System_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type n, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::System > >::size_type

        resize(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator pos, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::System > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::System > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        insert(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::iterator pos, std::vector< std::shared_ptr< Physics3D::System > >::size_type n, std::vector< std::shared_ptr< Physics3D::System > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::System > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::System > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::System > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_System_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_System_Vector self, std::vector< std::shared_ptr< Physics3D::System > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::System > >::size_type

        """
        return _Physics3DSwig.Physics3D_System_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_System_Vector self) -> std::vector< std::shared_ptr< Physics3D::System > >::size_type"""
        return _Physics3DSwig.Physics3D_System_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_System_Vector

# Register Physics3D_System_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_System_Vector_swigregister(Physics3D_System_Vector)

class Physics3D_Transform_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Physics3D::Transform > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Physics3D_Transform_Vector self) -> SwigPyIterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Physics3D_Transform_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Transform_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Physics3D_Transform_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Transform_Vector___bool__(self)

    def __len__(self):
        r"""__len__(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::size_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j) -> Physics3D_Transform_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        __setslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j, Physics3D_Transform_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        v: std::vector< std::shared_ptr< Physics3D::Transform >,std::allocator< std::shared_ptr< Physics3D::Transform > > > const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        j: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        __delitem__(Physics3D_Transform_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Physics3D_Transform_Vector self, PySliceObject * slice) -> Physics3D_Transform_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Physics3D_Transform_Vector self, PySliceObject * slice, Physics3D_Transform_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Physics3D::Transform >,std::allocator< std::shared_ptr< Physics3D::Transform > > > const &

        __setitem__(Physics3D_Transform_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type i, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Physics3D::Transform > >::difference_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_pop(self)

    def append(self, x):
        r"""
        append(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_append(self, x)

    def empty(self):
        r"""empty(Physics3D_Transform_Vector self) -> bool"""
        return _Physics3DSwig.Physics3D_Transform_Vector_empty(self)

    def size(self):
        r"""size(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::size_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_size(self)

    def swap(self, v):
        r"""
        swap(Physics3D_Transform_Vector self, Physics3D_Transform_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Physics3D::Transform > > &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_swap(self, v)

    def begin(self):
        r"""begin(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_begin(self)

    def end(self):
        r"""end(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_end(self)

    def rbegin(self):
        r"""rbegin(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_rbegin(self)

    def rend(self):
        r"""rend(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::reverse_iterator"""
        return _Physics3DSwig.Physics3D_Transform_Vector_rend(self)

    def clear(self):
        r"""clear(Physics3D_Transform_Vector self)"""
        return _Physics3DSwig.Physics3D_Transform_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::allocator_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Physics3D_Transform_Vector self)"""
        return _Physics3DSwig.Physics3D_Transform_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator pos) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        erase(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator first, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator last) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator
        last: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Physics3D_Transform_Vector self) -> Physics3D_Transform_Vector
        __init__(Physics3D_Transform_Vector self, Physics3D_Transform_Vector other) -> Physics3D_Transform_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Physics3D::Transform > > const &

        __init__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type size) -> Physics3D_Transform_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type

        __init__(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type size, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & value) -> Physics3D_Transform_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        value: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        _Physics3DSwig.Physics3D_Transform_Vector_swiginit(self, _Physics3DSwig.new_Physics3D_Transform_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_push_back(self, x)

    def front(self):
        r"""front(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Transform_Vector_front(self)

    def back(self):
        r"""back(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &"""
        return _Physics3DSwig.Physics3D_Transform_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type n, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type

        resize(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type new_size, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x) -> std::vector< std::shared_ptr< Physics3D::Transform > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        insert(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::iterator pos, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type n, std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Physics3D::Transform > >::iterator
        n: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type
        x: std::vector< std::shared_ptr< Physics3D::Transform > >::value_type const &

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Physics3D_Transform_Vector self, std::vector< std::shared_ptr< Physics3D::Transform > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Physics3D::Transform > >::size_type

        """
        return _Physics3DSwig.Physics3D_Transform_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Physics3D_Transform_Vector self) -> std::vector< std::shared_ptr< Physics3D::Transform > >::size_type"""
        return _Physics3DSwig.Physics3D_Transform_Vector_capacity(self)
    __swig_destroy__ = _Physics3DSwig.delete_Physics3D_Transform_Vector

# Register Physics3D_Transform_Vector in _Physics3DSwig:
_Physics3DSwig.Physics3D_Transform_Vector_swigregister(Physics3D_Transform_Vector)

class Bodies_Body(rebrick.Physics.Bodies_Body):
    r"""Proxy of C++ Physics3D::Bodies::Body class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_Body self) -> Bodies_Body"""
        _Physics3DSwig.Bodies_Body_swiginit(self, _Physics3DSwig.new_Bodies_Body())

    def kinematics(self):
        r"""kinematics(Bodies_Body self) -> std::shared_ptr< Physics3D::Bodies::Kinematics >"""
        return _Physics3DSwig.Bodies_Body_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_Body self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Bodies_Body_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_Body self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Bodies_Body_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_Body self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Bodies_Body_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_Body self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Bodies_Body_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_Body self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Bodies_Body_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_Body self)"""
        return _Physics3DSwig.Bodies_Body_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Bodies_Body

# Register Bodies_Body in _Physics3DSwig:
_Physics3DSwig.Bodies_Body_swigregister(Bodies_Body)

class Bodies_Inertia(rebrick.Physics.Bodies_Inertia):
    r"""Proxy of C++ Physics3D::Bodies::Inertia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_Inertia self) -> Bodies_Inertia"""
        _Physics3DSwig.Bodies_Inertia_swiginit(self, _Physics3DSwig.new_Bodies_Inertia())

    def mass(self):
        r"""mass(Bodies_Inertia self) -> double"""
        return _Physics3DSwig.Bodies_Inertia_mass(self)

    def tensor(self):
        r"""tensor(Bodies_Inertia self) -> std::shared_ptr< Math::Matrix3x3 >"""
        return _Physics3DSwig.Bodies_Inertia_tensor(self)

    @staticmethod
    def symmetric_tensor(diag, e01_10, e02_20, e12_21):
        r"""
        symmetric_tensor(std::shared_ptr< Math::Vec3 > diag, double e01_10, double e02_20, double e12_21) -> std::shared_ptr< Math::Matrix3x3 >

        Parameters
        ----------
        diag: std::shared_ptr< Math::Vec3 >
        e01_10: double
        e02_20: double
        e12_21: double

        """
        return _Physics3DSwig.Bodies_Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_Inertia self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Bodies_Inertia_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_Inertia self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Bodies_Inertia_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_Inertia self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Bodies_Inertia_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_Inertia self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Bodies_Inertia_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_Inertia self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Bodies_Inertia_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_Inertia self)"""
        return _Physics3DSwig.Bodies_Inertia_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Bodies_Inertia

# Register Bodies_Inertia in _Physics3DSwig:
_Physics3DSwig.Bodies_Inertia_swigregister(Bodies_Inertia)

def Bodies_Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21):
    r"""
    Bodies_Inertia_symmetric_tensor(std::shared_ptr< Math::Vec3 > diag, double e01_10, double e02_20, double e12_21) -> std::shared_ptr< Math::Matrix3x3 >

    Parameters
    ----------
    diag: std::shared_ptr< Math::Vec3 >
    e01_10: double
    e02_20: double
    e12_21: double

    """
    return _Physics3DSwig.Bodies_Inertia_symmetric_tensor(diag, e01_10, e02_20, e12_21)

class Bodies_Kinematics(rebrick.Physics.Bodies_Kinematics):
    r"""Proxy of C++ Physics3D::Bodies::Kinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_Kinematics self) -> Bodies_Kinematics"""
        _Physics3DSwig.Bodies_Kinematics_swiginit(self, _Physics3DSwig.new_Bodies_Kinematics())

    def local_transform(self):
        r"""local_transform(Bodies_Kinematics self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.Bodies_Kinematics_local_transform(self)

    def linearVelocity(self):
        r"""linearVelocity(Bodies_Kinematics self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Bodies_Kinematics_linearVelocity(self)

    def angularVelocity(self):
        r"""angularVelocity(Bodies_Kinematics self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Bodies_Kinematics_angularVelocity(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_Kinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Bodies_Kinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_Kinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Bodies_Kinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_Kinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Bodies_Kinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_Kinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Bodies_Kinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_Kinematics self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Bodies_Kinematics_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_Kinematics self)"""
        return _Physics3DSwig.Bodies_Kinematics_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Bodies_Kinematics

# Register Bodies_Kinematics in _Physics3DSwig:
_Physics3DSwig.Bodies_Kinematics_swigregister(Bodies_Kinematics)

class Bodies_RigidBody(Bodies_Body):
    r"""Proxy of C++ Physics3D::Bodies::RigidBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_RigidBody self) -> Bodies_RigidBody"""
        _Physics3DSwig.Bodies_RigidBody_swiginit(self, _Physics3DSwig.new_Bodies_RigidBody())

    def inertia(self):
        r"""inertia(Bodies_RigidBody self) -> std::shared_ptr< Physics3D::Bodies::Inertia >"""
        return _Physics3DSwig.Bodies_RigidBody_inertia(self)

    def kinematics(self):
        r"""kinematics(Bodies_RigidBody self) -> std::shared_ptr< Physics3D::Bodies::RigidBodyKinematics >"""
        return _Physics3DSwig.Bodies_RigidBody_kinematics(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_RigidBody self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Bodies_RigidBody_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_RigidBody self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Bodies_RigidBody_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_RigidBody self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Bodies_RigidBody_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_RigidBody self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Bodies_RigidBody_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_RigidBody self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Bodies_RigidBody_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_RigidBody self)"""
        return _Physics3DSwig.Bodies_RigidBody_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Bodies_RigidBody

# Register Bodies_RigidBody in _Physics3DSwig:
_Physics3DSwig.Bodies_RigidBody_swigregister(Bodies_RigidBody)

class Bodies_RigidBodyKinematics(Bodies_Kinematics):
    r"""Proxy of C++ Physics3D::Bodies::RigidBodyKinematics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bodies_RigidBodyKinematics self) -> Bodies_RigidBodyKinematics"""
        _Physics3DSwig.Bodies_RigidBodyKinematics_swiginit(self, _Physics3DSwig.new_Bodies_RigidBodyKinematics())

    def local_cm_transform(self):
        r"""local_cm_transform(Bodies_RigidBodyKinematics self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.Bodies_RigidBodyKinematics_local_cm_transform(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Bodies_RigidBodyKinematics self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Bodies_RigidBodyKinematics_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Bodies_RigidBodyKinematics self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Bodies_RigidBodyKinematics_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Bodies_RigidBodyKinematics self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Bodies_RigidBodyKinematics_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Bodies_RigidBodyKinematics self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Bodies_RigidBodyKinematics_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Bodies_RigidBodyKinematics self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Bodies_RigidBodyKinematics_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Bodies_RigidBodyKinematics self)"""
        return _Physics3DSwig.Bodies_RigidBodyKinematics_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Bodies_RigidBodyKinematics

# Register Bodies_RigidBodyKinematics in _Physics3DSwig:
_Physics3DSwig.Bodies_RigidBodyKinematics_swigregister(Bodies_RigidBodyKinematics)

class Charges_ContactGeometry(rebrick.Physics.Charges_ContactGeometry):
    r"""Proxy of C++ Physics3D::Charges::ContactGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_ContactGeometry self) -> Charges_ContactGeometry"""
        _Physics3DSwig.Charges_ContactGeometry_swiginit(self, _Physics3DSwig.new_Charges_ContactGeometry())

    def local_transform(self):
        r"""local_transform(Charges_ContactGeometry self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.Charges_ContactGeometry_local_transform(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_ContactGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_ContactGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_ContactGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_ContactGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_ContactGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_ContactGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_ContactGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_ContactGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_ContactGeometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_ContactGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_ContactGeometry self)"""
        return _Physics3DSwig.Charges_ContactGeometry_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_ContactGeometry

# Register Charges_ContactGeometry in _Physics3DSwig:
_Physics3DSwig.Charges_ContactGeometry_swigregister(Charges_ContactGeometry)

class Charges_Box(Charges_ContactGeometry):
    r"""Proxy of C++ Physics3D::Charges::Box class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_Box self) -> Charges_Box"""
        _Physics3DSwig.Charges_Box_swiginit(self, _Physics3DSwig.new_Charges_Box())

    def size(self):
        r"""size(Charges_Box self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Charges_Box_size(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_Box self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_Box_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_Box self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_Box_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_Box self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_Box_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_Box self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_Box_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_Box self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_Box_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_Box self)"""
        return _Physics3DSwig.Charges_Box_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_Box

# Register Charges_Box in _Physics3DSwig:
_Physics3DSwig.Charges_Box_swigregister(Charges_Box)

class Charges_Capsule(Charges_ContactGeometry):
    r"""Proxy of C++ Physics3D::Charges::Capsule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_Capsule self) -> Charges_Capsule"""
        _Physics3DSwig.Charges_Capsule_swiginit(self, _Physics3DSwig.new_Charges_Capsule())

    def radius(self):
        r"""radius(Charges_Capsule self) -> double"""
        return _Physics3DSwig.Charges_Capsule_radius(self)

    def height(self):
        r"""height(Charges_Capsule self) -> double"""
        return _Physics3DSwig.Charges_Capsule_height(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_Capsule self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_Capsule_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_Capsule self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_Capsule_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_Capsule self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_Capsule_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_Capsule self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_Capsule_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_Capsule self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_Capsule_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_Capsule self)"""
        return _Physics3DSwig.Charges_Capsule_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_Capsule

# Register Charges_Capsule in _Physics3DSwig:
_Physics3DSwig.Charges_Capsule_swigregister(Charges_Capsule)

class Charges_TriMeshGeometry(Charges_ContactGeometry):
    r"""Proxy of C++ Physics3D::Charges::TriMeshGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_TriMeshGeometry self) -> Charges_TriMeshGeometry"""
        _Physics3DSwig.Charges_TriMeshGeometry_swiginit(self, _Physics3DSwig.new_Charges_TriMeshGeometry())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_TriMeshGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_TriMeshGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_TriMeshGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_TriMeshGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_TriMeshGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_TriMeshGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_TriMeshGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_TriMeshGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_TriMeshGeometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_TriMeshGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_TriMeshGeometry self)"""
        return _Physics3DSwig.Charges_TriMeshGeometry_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_TriMeshGeometry

# Register Charges_TriMeshGeometry in _Physics3DSwig:
_Physics3DSwig.Charges_TriMeshGeometry_swigregister(Charges_TriMeshGeometry)

class Charges_ConvexMesh(Charges_TriMeshGeometry):
    r"""Proxy of C++ Physics3D::Charges::ConvexMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_ConvexMesh self) -> Charges_ConvexMesh"""
        _Physics3DSwig.Charges_ConvexMesh_swiginit(self, _Physics3DSwig.new_Charges_ConvexMesh())

    def vertices(self):
        r"""vertices(Charges_ConvexMesh self) -> Math_Vec3_Vector"""
        return _Physics3DSwig.Charges_ConvexMesh_vertices(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_ConvexMesh self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_ConvexMesh_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_ConvexMesh self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_ConvexMesh_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_ConvexMesh self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_ConvexMesh_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_ConvexMesh self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_ConvexMesh_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_ConvexMesh self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_ConvexMesh_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_ConvexMesh self)"""
        return _Physics3DSwig.Charges_ConvexMesh_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_ConvexMesh

# Register Charges_ConvexMesh in _Physics3DSwig:
_Physics3DSwig.Charges_ConvexMesh_swigregister(Charges_ConvexMesh)

class Charges_Cylinder(Charges_ContactGeometry):
    r"""Proxy of C++ Physics3D::Charges::Cylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_Cylinder self) -> Charges_Cylinder"""
        _Physics3DSwig.Charges_Cylinder_swiginit(self, _Physics3DSwig.new_Charges_Cylinder())

    def radius(self):
        r"""radius(Charges_Cylinder self) -> double"""
        return _Physics3DSwig.Charges_Cylinder_radius(self)

    def height(self):
        r"""height(Charges_Cylinder self) -> double"""
        return _Physics3DSwig.Charges_Cylinder_height(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_Cylinder self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_Cylinder_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_Cylinder self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_Cylinder_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_Cylinder self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_Cylinder_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_Cylinder self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_Cylinder_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_Cylinder self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_Cylinder_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_Cylinder self)"""
        return _Physics3DSwig.Charges_Cylinder_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_Cylinder

# Register Charges_Cylinder in _Physics3DSwig:
_Physics3DSwig.Charges_Cylinder_swigregister(Charges_Cylinder)

class Charges_MateConnector(rebrick.Physics.Charges_Charge):
    r"""Proxy of C++ Physics3D::Charges::MateConnector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_MateConnector self) -> Charges_MateConnector"""
        _Physics3DSwig.Charges_MateConnector_swiginit(self, _Physics3DSwig.new_Charges_MateConnector())

    def position(self):
        r"""position(Charges_MateConnector self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Charges_MateConnector_position(self)

    def main_axis(self):
        r"""main_axis(Charges_MateConnector self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Charges_MateConnector_main_axis(self)

    def normal(self):
        r"""normal(Charges_MateConnector self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Charges_MateConnector_normal(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_MateConnector self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_MateConnector_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_MateConnector self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_MateConnector_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_MateConnector self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_MateConnector_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_MateConnector self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_MateConnector_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_MateConnector self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_MateConnector_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_MateConnector self)"""
        return _Physics3DSwig.Charges_MateConnector_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_MateConnector

# Register Charges_MateConnector in _Physics3DSwig:
_Physics3DSwig.Charges_MateConnector_swigregister(Charges_MateConnector)

class Charges_ObjGeometry(Charges_TriMeshGeometry):
    r"""Proxy of C++ Physics3D::Charges::ObjGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_ObjGeometry self) -> Charges_ObjGeometry"""
        _Physics3DSwig.Charges_ObjGeometry_swiginit(self, _Physics3DSwig.new_Charges_ObjGeometry())

    def path(self):
        r"""path(Charges_ObjGeometry self) -> std::string"""
        return _Physics3DSwig.Charges_ObjGeometry_path(self)

    def scale(self):
        r"""scale(Charges_ObjGeometry self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Charges_ObjGeometry_scale(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_ObjGeometry self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_ObjGeometry_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_ObjGeometry self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_ObjGeometry_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_ObjGeometry self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_ObjGeometry_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_ObjGeometry self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_ObjGeometry_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_ObjGeometry self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_ObjGeometry_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_ObjGeometry self)"""
        return _Physics3DSwig.Charges_ObjGeometry_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_ObjGeometry

# Register Charges_ObjGeometry in _Physics3DSwig:
_Physics3DSwig.Charges_ObjGeometry_swigregister(Charges_ObjGeometry)

class Charges_Sphere(Charges_ContactGeometry):
    r"""Proxy of C++ Physics3D::Charges::Sphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_Sphere self) -> Charges_Sphere"""
        _Physics3DSwig.Charges_Sphere_swiginit(self, _Physics3DSwig.new_Charges_Sphere())

    def radius(self):
        r"""radius(Charges_Sphere self) -> double"""
        return _Physics3DSwig.Charges_Sphere_radius(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_Sphere self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_Sphere_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_Sphere self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_Sphere_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_Sphere self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_Sphere_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_Sphere self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_Sphere_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_Sphere self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_Sphere_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_Sphere self)"""
        return _Physics3DSwig.Charges_Sphere_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_Sphere

# Register Charges_Sphere in _Physics3DSwig:
_Physics3DSwig.Charges_Sphere_swigregister(Charges_Sphere)

class Charges_TriMesh(Charges_TriMeshGeometry):
    r"""Proxy of C++ Physics3D::Charges::TriMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Charges_TriMesh self) -> Charges_TriMesh"""
        _Physics3DSwig.Charges_TriMesh_swiginit(self, _Physics3DSwig.new_Charges_TriMesh())

    def vertices(self):
        r"""vertices(Charges_TriMesh self) -> Math_Vec3_Vector"""
        return _Physics3DSwig.Charges_TriMesh_vertices(self)

    def indices(self):
        r"""indices(Charges_TriMesh self) -> std::vector< int64_t,std::allocator< int64_t > >"""
        return _Physics3DSwig.Charges_TriMesh_indices(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Charges_TriMesh self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Charges_TriMesh_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Charges_TriMesh self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Charges_TriMesh_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Charges_TriMesh self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Charges_TriMesh_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Charges_TriMesh self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Charges_TriMesh_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Charges_TriMesh self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Charges_TriMesh_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Charges_TriMesh self)"""
        return _Physics3DSwig.Charges_TriMesh_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Charges_TriMesh

# Register Charges_TriMesh in _Physics3DSwig:
_Physics3DSwig.Charges_TriMesh_swigregister(Charges_TriMesh)

class Interactions_Interaction(rebrick.Physics.Interactions_Interaction):
    r"""Proxy of C++ Physics3D::Interactions::Interaction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Interaction self) -> Interactions_Interaction"""
        _Physics3DSwig.Interactions_Interaction_swiginit(self, _Physics3DSwig.new_Interactions_Interaction())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Interaction self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Interaction_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Interaction self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Interaction_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Interaction self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Interaction_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Interaction self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Interaction_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Interaction self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Interaction_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Interaction self)"""
        return _Physics3DSwig.Interactions_Interaction_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Interaction

# Register Interactions_Interaction in _Physics3DSwig:
_Physics3DSwig.Interactions_Interaction_swigregister(Interactions_Interaction)

class Interactions_Mate(Interactions_Interaction):
    r"""Proxy of C++ Physics3D::Interactions::Mate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Mate self) -> Interactions_Mate"""
        _Physics3DSwig.Interactions_Mate_swiginit(self, _Physics3DSwig.new_Interactions_Mate())

    def charges(self):
        r"""charges(Interactions_Mate self) -> Physics3D_Charges_MateConnector_Vector"""
        return _Physics3DSwig.Interactions_Mate_charges(self)

    def stiffness(self):
        r"""stiffness(Interactions_Mate self) -> std::shared_ptr< Physics3D::Interactions::MateStiffness >"""
        return _Physics3DSwig.Interactions_Mate_stiffness(self)

    def damping(self):
        r"""damping(Interactions_Mate self) -> std::shared_ptr< Physics3D::Interactions::MateDamping >"""
        return _Physics3DSwig.Interactions_Mate_damping(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Mate self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Mate_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Mate self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Mate_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Mate self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Mate_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Mate self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Mate_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Mate self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Mate_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Mate self)"""
        return _Physics3DSwig.Interactions_Mate_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Mate

# Register Interactions_Mate in _Physics3DSwig:
_Physics3DSwig.Interactions_Mate_swigregister(Interactions_Mate)

class Interactions_Cylindrical(Interactions_Mate):
    r"""Proxy of C++ Physics3D::Interactions::Cylindrical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Cylindrical self) -> Interactions_Cylindrical"""
        _Physics3DSwig.Interactions_Cylindrical_swiginit(self, _Physics3DSwig.new_Interactions_Cylindrical())

    def initial_angle(self):
        r"""initial_angle(Interactions_Cylindrical self) -> double"""
        return _Physics3DSwig.Interactions_Cylindrical_initial_angle(self)

    def position(self):
        r"""position(Interactions_Cylindrical self) -> double"""
        return _Physics3DSwig.Interactions_Cylindrical_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Cylindrical self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Cylindrical_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Cylindrical self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Cylindrical_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Cylindrical self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Cylindrical_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Cylindrical self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Cylindrical_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Cylindrical self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Cylindrical_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Cylindrical self)"""
        return _Physics3DSwig.Interactions_Cylindrical_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Cylindrical

# Register Interactions_Cylindrical in _Physics3DSwig:
_Physics3DSwig.Interactions_Cylindrical_swigregister(Interactions_Cylindrical)

class Interactions_Friction_OrientedDryFrictionType(rebrick.Physics.Interactions_Friction_DryFrictionType):
    r"""Proxy of C++ Physics3D::Interactions::Friction::OrientedDryFrictionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Friction_OrientedDryFrictionType self) -> Interactions_Friction_OrientedDryFrictionType"""
        _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_swiginit(self, _Physics3DSwig.new_Interactions_Friction_OrientedDryFrictionType())

    def primary_direction(self):
        r"""primary_direction(Interactions_Friction_OrientedDryFrictionType self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_primary_direction(self)

    def secondary_coefficient(self):
        r"""secondary_coefficient(Interactions_Friction_OrientedDryFrictionType self) -> double"""
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_secondary_coefficient(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Friction_OrientedDryFrictionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Friction_OrientedDryFrictionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Friction_OrientedDryFrictionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Friction_OrientedDryFrictionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Friction_OrientedDryFrictionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Friction_OrientedDryFrictionType self)"""
        return _Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Friction_OrientedDryFrictionType

# Register Interactions_Friction_OrientedDryFrictionType in _Physics3DSwig:
_Physics3DSwig.Interactions_Friction_OrientedDryFrictionType_swigregister(Interactions_Friction_OrientedDryFrictionType)

class Interactions_Friction_BodyOrientedDryFrictionType(Interactions_Friction_OrientedDryFrictionType):
    r"""Proxy of C++ Physics3D::Interactions::Friction::BodyOrientedDryFrictionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Friction_BodyOrientedDryFrictionType self) -> Interactions_Friction_BodyOrientedDryFrictionType"""
        _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_swiginit(self, _Physics3DSwig.new_Interactions_Friction_BodyOrientedDryFrictionType())

    def reference_body(self):
        r"""reference_body(Interactions_Friction_BodyOrientedDryFrictionType self) -> std::shared_ptr< Physics3D::Bodies::Body >"""
        return _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_reference_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Friction_BodyOrientedDryFrictionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Friction_BodyOrientedDryFrictionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Friction_BodyOrientedDryFrictionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Friction_BodyOrientedDryFrictionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Friction_BodyOrientedDryFrictionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Friction_BodyOrientedDryFrictionType self)"""
        return _Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Friction_BodyOrientedDryFrictionType

# Register Interactions_Friction_BodyOrientedDryFrictionType in _Physics3DSwig:
_Physics3DSwig.Interactions_Friction_BodyOrientedDryFrictionType_swigregister(Interactions_Friction_BodyOrientedDryFrictionType)

class Interactions_Friction_GeometryOrientedDryFrictionType(Interactions_Friction_OrientedDryFrictionType):
    r"""Proxy of C++ Physics3D::Interactions::Friction::GeometryOrientedDryFrictionType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Friction_GeometryOrientedDryFrictionType self) -> Interactions_Friction_GeometryOrientedDryFrictionType"""
        _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_swiginit(self, _Physics3DSwig.new_Interactions_Friction_GeometryOrientedDryFrictionType())

    def reference_geometry(self):
        r"""reference_geometry(Interactions_Friction_GeometryOrientedDryFrictionType self) -> std::shared_ptr< Physics3D::Charges::ContactGeometry >"""
        return _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_reference_geometry(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Friction_GeometryOrientedDryFrictionType self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Friction_GeometryOrientedDryFrictionType self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Friction_GeometryOrientedDryFrictionType self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Friction_GeometryOrientedDryFrictionType self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Friction_GeometryOrientedDryFrictionType self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Friction_GeometryOrientedDryFrictionType self)"""
        return _Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Friction_GeometryOrientedDryFrictionType

# Register Interactions_Friction_GeometryOrientedDryFrictionType in _Physics3DSwig:
_Physics3DSwig.Interactions_Friction_GeometryOrientedDryFrictionType_swigregister(Interactions_Friction_GeometryOrientedDryFrictionType)

class Interactions_Hinge(Interactions_Mate):
    r"""Proxy of C++ Physics3D::Interactions::Hinge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Hinge self) -> Interactions_Hinge"""
        _Physics3DSwig.Interactions_Hinge_swiginit(self, _Physics3DSwig.new_Interactions_Hinge())

    def initial_angle(self):
        r"""initial_angle(Interactions_Hinge self) -> double"""
        return _Physics3DSwig.Interactions_Hinge_initial_angle(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Hinge self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Hinge_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Hinge self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Hinge_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Hinge self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Hinge_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Hinge self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Hinge_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Hinge self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Hinge_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Hinge self)"""
        return _Physics3DSwig.Interactions_Hinge_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Hinge

# Register Interactions_Hinge in _Physics3DSwig:
_Physics3DSwig.Interactions_Hinge_swigregister(Interactions_Hinge)

class Interactions_Interaction1DOF(Interactions_Interaction):
    r"""Proxy of C++ Physics3D::Interactions::Interaction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Interaction1DOF self) -> Interactions_Interaction1DOF"""
        _Physics3DSwig.Interactions_Interaction1DOF_swiginit(self, _Physics3DSwig.new_Interactions_Interaction1DOF())

    def min_force(self):
        r"""min_force(Interactions_Interaction1DOF self) -> double"""
        return _Physics3DSwig.Interactions_Interaction1DOF_min_force(self)

    def max_force(self):
        r"""max_force(Interactions_Interaction1DOF self) -> double"""
        return _Physics3DSwig.Interactions_Interaction1DOF_max_force(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Interaction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Interaction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Interaction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Interaction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Interaction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Interaction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Interaction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Interaction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Interaction1DOF self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Interaction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Interaction1DOF self)"""
        return _Physics3DSwig.Interactions_Interaction1DOF_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Interaction1DOF

# Register Interactions_Interaction1DOF in _Physics3DSwig:
_Physics3DSwig.Interactions_Interaction1DOF_swigregister(Interactions_Interaction1DOF)

class Interactions_RangeInteraction1DOF(Interactions_Interaction1DOF):
    r"""Proxy of C++ Physics3D::Interactions::RangeInteraction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_RangeInteraction1DOF self) -> Interactions_RangeInteraction1DOF"""
        _Physics3DSwig.Interactions_RangeInteraction1DOF_swiginit(self, _Physics3DSwig.new_Interactions_RangeInteraction1DOF())

    def elasticity(self):
        r"""elasticity(Interactions_RangeInteraction1DOF self) -> std::shared_ptr< Physics::Interactions::SurfaceContact::ElasticityType >"""
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_elasticity(self)

    def start(self):
        r"""start(Interactions_RangeInteraction1DOF self) -> double"""
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_start(self)

    def end(self):
        r"""end(Interactions_RangeInteraction1DOF self) -> double"""
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_end(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_RangeInteraction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_RangeInteraction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_RangeInteraction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_RangeInteraction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_RangeInteraction1DOF self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_RangeInteraction1DOF self)"""
        return _Physics3DSwig.Interactions_RangeInteraction1DOF_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_RangeInteraction1DOF

# Register Interactions_RangeInteraction1DOF in _Physics3DSwig:
_Physics3DSwig.Interactions_RangeInteraction1DOF_swigregister(Interactions_RangeInteraction1DOF)

class Interactions_LinearRange(Interactions_RangeInteraction1DOF):
    r"""Proxy of C++ Physics3D::Interactions::LinearRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_LinearRange self) -> Interactions_LinearRange"""
        _Physics3DSwig.Interactions_LinearRange_swiginit(self, _Physics3DSwig.new_Interactions_LinearRange())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_LinearRange self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_LinearRange_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_LinearRange self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_LinearRange_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_LinearRange self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_LinearRange_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_LinearRange self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_LinearRange_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_LinearRange self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_LinearRange_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_LinearRange self)"""
        return _Physics3DSwig.Interactions_LinearRange_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_LinearRange

# Register Interactions_LinearRange in _Physics3DSwig:
_Physics3DSwig.Interactions_LinearRange_swigregister(Interactions_LinearRange)

class Interactions_SpringInteraction1DOF(Interactions_Interaction1DOF):
    r"""Proxy of C++ Physics3D::Interactions::SpringInteraction1DOF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SpringInteraction1DOF self) -> Interactions_SpringInteraction1DOF"""
        _Physics3DSwig.Interactions_SpringInteraction1DOF_swiginit(self, _Physics3DSwig.new_Interactions_SpringInteraction1DOF())

    def damping(self):
        r"""damping(Interactions_SpringInteraction1DOF self) -> double"""
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_damping(self)

    def stiffness(self):
        r"""stiffness(Interactions_SpringInteraction1DOF self) -> double"""
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_stiffness(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SpringInteraction1DOF self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SpringInteraction1DOF self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SpringInteraction1DOF self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SpringInteraction1DOF self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SpringInteraction1DOF self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SpringInteraction1DOF self)"""
        return _Physics3DSwig.Interactions_SpringInteraction1DOF_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_SpringInteraction1DOF

# Register Interactions_SpringInteraction1DOF in _Physics3DSwig:
_Physics3DSwig.Interactions_SpringInteraction1DOF_swigregister(Interactions_SpringInteraction1DOF)

class Interactions_LinearSpring(Interactions_SpringInteraction1DOF):
    r"""Proxy of C++ Physics3D::Interactions::LinearSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_LinearSpring self) -> Interactions_LinearSpring"""
        _Physics3DSwig.Interactions_LinearSpring_swiginit(self, _Physics3DSwig.new_Interactions_LinearSpring())

    def position(self):
        r"""position(Interactions_LinearSpring self) -> double"""
        return _Physics3DSwig.Interactions_LinearSpring_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_LinearSpring self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_LinearSpring_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_LinearSpring self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_LinearSpring_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_LinearSpring self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_LinearSpring_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_LinearSpring self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_LinearSpring_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_LinearSpring self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_LinearSpring_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_LinearSpring self)"""
        return _Physics3DSwig.Interactions_LinearSpring_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_LinearSpring

# Register Interactions_LinearSpring in _Physics3DSwig:
_Physics3DSwig.Interactions_LinearSpring_swigregister(Interactions_LinearSpring)

class Interactions_VelocityMotor(Interactions_Interaction1DOF):
    r"""Proxy of C++ Physics3D::Interactions::VelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_VelocityMotor self) -> Interactions_VelocityMotor"""
        _Physics3DSwig.Interactions_VelocityMotor_swiginit(self, _Physics3DSwig.new_Interactions_VelocityMotor())

    def gain(self):
        r"""gain(Interactions_VelocityMotor self) -> double"""
        return _Physics3DSwig.Interactions_VelocityMotor_gain(self)

    def desired_speed(self):
        r"""desired_speed(Interactions_VelocityMotor self) -> double"""
        return _Physics3DSwig.Interactions_VelocityMotor_desired_speed(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_VelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_VelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_VelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_VelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_VelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_VelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_VelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_VelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_VelocityMotor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_VelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_VelocityMotor self)"""
        return _Physics3DSwig.Interactions_VelocityMotor_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_VelocityMotor

# Register Interactions_VelocityMotor in _Physics3DSwig:
_Physics3DSwig.Interactions_VelocityMotor_swigregister(Interactions_VelocityMotor)

class Interactions_LinearVelocityMotor(Interactions_VelocityMotor):
    r"""Proxy of C++ Physics3D::Interactions::LinearVelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_LinearVelocityMotor self) -> Interactions_LinearVelocityMotor"""
        _Physics3DSwig.Interactions_LinearVelocityMotor_swiginit(self, _Physics3DSwig.new_Interactions_LinearVelocityMotor())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_LinearVelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_LinearVelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_LinearVelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_LinearVelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_LinearVelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_LinearVelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_LinearVelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_LinearVelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_LinearVelocityMotor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_LinearVelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_LinearVelocityMotor self)"""
        return _Physics3DSwig.Interactions_LinearVelocityMotor_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_LinearVelocityMotor

# Register Interactions_LinearVelocityMotor in _Physics3DSwig:
_Physics3DSwig.Interactions_LinearVelocityMotor_swigregister(Interactions_LinearVelocityMotor)

class Interactions_Lock(Interactions_Mate):
    r"""Proxy of C++ Physics3D::Interactions::Lock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Lock self) -> Interactions_Lock"""
        _Physics3DSwig.Interactions_Lock_swiginit(self, _Physics3DSwig.new_Interactions_Lock())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Lock self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Lock_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Lock self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Lock_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Lock self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Lock_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Lock self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Lock_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Lock self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Lock_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Lock self)"""
        return _Physics3DSwig.Interactions_Lock_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Lock

# Register Interactions_Lock in _Physics3DSwig:
_Physics3DSwig.Interactions_Lock_swigregister(Interactions_Lock)

class Interactions_MateAxisData(rebrick.Core.Object):
    r"""Proxy of C++ Physics3D::Interactions::MateAxisData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_MateAxisData self) -> Interactions_MateAxisData"""
        _Physics3DSwig.Interactions_MateAxisData_swiginit(self, _Physics3DSwig.new_Interactions_MateAxisData())

    def along_main(self):
        r"""along_main(Interactions_MateAxisData self) -> double"""
        return _Physics3DSwig.Interactions_MateAxisData_along_main(self)

    def along_normal(self):
        r"""along_normal(Interactions_MateAxisData self) -> double"""
        return _Physics3DSwig.Interactions_MateAxisData_along_normal(self)

    def along_cross(self):
        r"""along_cross(Interactions_MateAxisData self) -> double"""
        return _Physics3DSwig.Interactions_MateAxisData_along_cross(self)

    def around_main(self):
        r"""around_main(Interactions_MateAxisData self) -> double"""
        return _Physics3DSwig.Interactions_MateAxisData_around_main(self)

    def around_normal(self):
        r"""around_normal(Interactions_MateAxisData self) -> double"""
        return _Physics3DSwig.Interactions_MateAxisData_around_normal(self)

    def around_cross(self):
        r"""around_cross(Interactions_MateAxisData self) -> double"""
        return _Physics3DSwig.Interactions_MateAxisData_around_cross(self)

    @staticmethod
    def create(value):
        r"""
        create(double value) -> std::shared_ptr< Physics3D::Interactions::MateAxisData >

        Parameters
        ----------
        value: double

        """
        return _Physics3DSwig.Interactions_MateAxisData_create(value)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_MateAxisData self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_MateAxisData_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_MateAxisData self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_MateAxisData_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_MateAxisData self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_MateAxisData_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_MateAxisData self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_MateAxisData_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_MateAxisData self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_MateAxisData_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_MateAxisData self)"""
        return _Physics3DSwig.Interactions_MateAxisData_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_MateAxisData

# Register Interactions_MateAxisData in _Physics3DSwig:
_Physics3DSwig.Interactions_MateAxisData_swigregister(Interactions_MateAxisData)

def Interactions_MateAxisData_create(value):
    r"""
    Interactions_MateAxisData_create(double value) -> std::shared_ptr< Physics3D::Interactions::MateAxisData >

    Parameters
    ----------
    value: double

    """
    return _Physics3DSwig.Interactions_MateAxisData_create(value)

class Interactions_MateDamping(Interactions_MateAxisData):
    r"""Proxy of C++ Physics3D::Interactions::MateDamping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_MateDamping self) -> Interactions_MateDamping"""
        _Physics3DSwig.Interactions_MateDamping_swiginit(self, _Physics3DSwig.new_Interactions_MateDamping())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_MateDamping self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_MateDamping_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_MateDamping self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_MateDamping_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_MateDamping self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_MateDamping_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_MateDamping self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_MateDamping_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_MateDamping self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_MateDamping_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_MateDamping self)"""
        return _Physics3DSwig.Interactions_MateDamping_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_MateDamping

# Register Interactions_MateDamping in _Physics3DSwig:
_Physics3DSwig.Interactions_MateDamping_swigregister(Interactions_MateDamping)

class Interactions_MateStiffness(Interactions_MateAxisData):
    r"""Proxy of C++ Physics3D::Interactions::MateStiffness class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_MateStiffness self) -> Interactions_MateStiffness"""
        _Physics3DSwig.Interactions_MateStiffness_swiginit(self, _Physics3DSwig.new_Interactions_MateStiffness())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_MateStiffness self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_MateStiffness_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_MateStiffness self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_MateStiffness_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_MateStiffness self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_MateStiffness_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_MateStiffness self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_MateStiffness_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_MateStiffness self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_MateStiffness_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_MateStiffness self)"""
        return _Physics3DSwig.Interactions_MateStiffness_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_MateStiffness

# Register Interactions_MateStiffness in _Physics3DSwig:
_Physics3DSwig.Interactions_MateStiffness_swigregister(Interactions_MateStiffness)

class Interactions_Prismatic(Interactions_Mate):
    r"""Proxy of C++ Physics3D::Interactions::Prismatic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_Prismatic self) -> Interactions_Prismatic"""
        _Physics3DSwig.Interactions_Prismatic_swiginit(self, _Physics3DSwig.new_Interactions_Prismatic())

    def position(self):
        r"""position(Interactions_Prismatic self) -> double"""
        return _Physics3DSwig.Interactions_Prismatic_position(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_Prismatic self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_Prismatic_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_Prismatic self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_Prismatic_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_Prismatic self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_Prismatic_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_Prismatic self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_Prismatic_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_Prismatic self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_Prismatic_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_Prismatic self)"""
        return _Physics3DSwig.Interactions_Prismatic_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_Prismatic

# Register Interactions_Prismatic in _Physics3DSwig:
_Physics3DSwig.Interactions_Prismatic_swigregister(Interactions_Prismatic)

class Interactions_RotationalRange(Interactions_RangeInteraction1DOF):
    r"""Proxy of C++ Physics3D::Interactions::RotationalRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_RotationalRange self) -> Interactions_RotationalRange"""
        _Physics3DSwig.Interactions_RotationalRange_swiginit(self, _Physics3DSwig.new_Interactions_RotationalRange())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_RotationalRange self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_RotationalRange_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_RotationalRange self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_RotationalRange_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_RotationalRange self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_RotationalRange_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_RotationalRange self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_RotationalRange_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_RotationalRange self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_RotationalRange_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_RotationalRange self)"""
        return _Physics3DSwig.Interactions_RotationalRange_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_RotationalRange

# Register Interactions_RotationalRange in _Physics3DSwig:
_Physics3DSwig.Interactions_RotationalRange_swigregister(Interactions_RotationalRange)

class Interactions_RotationalVelocityMotor(Interactions_VelocityMotor):
    r"""Proxy of C++ Physics3D::Interactions::RotationalVelocityMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_RotationalVelocityMotor self) -> Interactions_RotationalVelocityMotor"""
        _Physics3DSwig.Interactions_RotationalVelocityMotor_swiginit(self, _Physics3DSwig.new_Interactions_RotationalVelocityMotor())

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_RotationalVelocityMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_RotationalVelocityMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_RotationalVelocityMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_RotationalVelocityMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_RotationalVelocityMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_RotationalVelocityMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_RotationalVelocityMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_RotationalVelocityMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_RotationalVelocityMotor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_RotationalVelocityMotor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_RotationalVelocityMotor self)"""
        return _Physics3DSwig.Interactions_RotationalVelocityMotor_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_RotationalVelocityMotor

# Register Interactions_RotationalVelocityMotor in _Physics3DSwig:
_Physics3DSwig.Interactions_RotationalVelocityMotor_swigregister(Interactions_RotationalVelocityMotor)

class Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel(rebrick.Physics.Interactions_SurfaceContact_Model):
    r"""Proxy of C++ Physics3D::Interactions::SurfaceContact::AreaDependentElasticityDryFrictionModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self) -> Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel"""
        _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_swiginit(self, _Physics3DSwig.new_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel())

    def elasticity(self):
        r"""elasticity(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self) -> std::shared_ptr< Physics::Interactions::SurfaceContact::AreaDependentElasticityType >"""
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_elasticity(self)

    def friction(self):
        r"""friction(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self) -> std::shared_ptr< Physics::Interactions::Friction::DryFrictionType >"""
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_friction(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel self)"""
        return _Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel

# Register Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel in _Physics3DSwig:
_Physics3DSwig.Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel_swigregister(Interactions_SurfaceContact_AreaDependentElasticityDryFrictionModel)

class Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel(rebrick.Physics.Interactions_SurfaceContact_Model):
    r"""Proxy of C++ Physics3D::Interactions::SurfaceContact::PointwiseElasticityDryFrictionModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self) -> Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel"""
        _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_swiginit(self, _Physics3DSwig.new_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel())

    def elasticity(self):
        r"""elasticity(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self) -> std::shared_ptr< Physics::Interactions::SurfaceContact::PointwiseElasticityType >"""
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_elasticity(self)

    def friction(self):
        r"""friction(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self) -> std::shared_ptr< Physics::Interactions::Friction::DryFrictionType >"""
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_friction(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel self)"""
        return _Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel

# Register Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel in _Physics3DSwig:
_Physics3DSwig.Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel_swigregister(Interactions_SurfaceContact_PointwiseElasticityDryFrictionModel)

class Interactions_TorsionSpring(Interactions_SpringInteraction1DOF):
    r"""Proxy of C++ Physics3D::Interactions::TorsionSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Interactions_TorsionSpring self) -> Interactions_TorsionSpring"""
        _Physics3DSwig.Interactions_TorsionSpring_swiginit(self, _Physics3DSwig.new_Interactions_TorsionSpring())

    def angle(self):
        r"""angle(Interactions_TorsionSpring self) -> double"""
        return _Physics3DSwig.Interactions_TorsionSpring_angle(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Interactions_TorsionSpring self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Interactions_TorsionSpring_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Interactions_TorsionSpring self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Interactions_TorsionSpring_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Interactions_TorsionSpring self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Interactions_TorsionSpring_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Interactions_TorsionSpring self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Interactions_TorsionSpring_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Interactions_TorsionSpring self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Interactions_TorsionSpring_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Interactions_TorsionSpring self)"""
        return _Physics3DSwig.Interactions_TorsionSpring_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Interactions_TorsionSpring

# Register Interactions_TorsionSpring in _Physics3DSwig:
_Physics3DSwig.Interactions_TorsionSpring_swigregister(Interactions_TorsionSpring)

class Signals_HingeAngleOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Physics3D::Signals::HingeAngleOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_HingeAngleOutput self) -> Signals_HingeAngleOutput"""
        _Physics3DSwig.Signals_HingeAngleOutput_swiginit(self, _Physics3DSwig.new_Signals_HingeAngleOutput())

    def hinge(self):
        r"""hinge(Signals_HingeAngleOutput self) -> std::shared_ptr< Physics3D::Interactions::Hinge >"""
        return _Physics3DSwig.Signals_HingeAngleOutput_hinge(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_HingeAngleOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_HingeAngleOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_HingeAngleOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_HingeAngleOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_HingeAngleOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_HingeAngleOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_HingeAngleOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_HingeAngleOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_HingeAngleOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_HingeAngleOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_HingeAngleOutput self)"""
        return _Physics3DSwig.Signals_HingeAngleOutput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_HingeAngleOutput

# Register Signals_HingeAngleOutput in _Physics3DSwig:
_Physics3DSwig.Signals_HingeAngleOutput_swigregister(Signals_HingeAngleOutput)

class Signals_HingeAngularVelocityOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Physics3D::Signals::HingeAngularVelocityOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_HingeAngularVelocityOutput self) -> Signals_HingeAngularVelocityOutput"""
        _Physics3DSwig.Signals_HingeAngularVelocityOutput_swiginit(self, _Physics3DSwig.new_Signals_HingeAngularVelocityOutput())

    def hinge(self):
        r"""hinge(Signals_HingeAngularVelocityOutput self) -> std::shared_ptr< Physics3D::Interactions::Hinge >"""
        return _Physics3DSwig.Signals_HingeAngularVelocityOutput_hinge(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_HingeAngularVelocityOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_HingeAngularVelocityOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_HingeAngularVelocityOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_HingeAngularVelocityOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_HingeAngularVelocityOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_HingeAngularVelocityOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_HingeAngularVelocityOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_HingeAngularVelocityOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_HingeAngularVelocityOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_HingeAngularVelocityOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_HingeAngularVelocityOutput self)"""
        return _Physics3DSwig.Signals_HingeAngularVelocityOutput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_HingeAngularVelocityOutput

# Register Signals_HingeAngularVelocityOutput in _Physics3DSwig:
_Physics3DSwig.Signals_HingeAngularVelocityOutput_swigregister(Signals_HingeAngularVelocityOutput)

class Signals_LinearVelocityMotorVelocityInput(rebrick.Physics.Signals_Input):
    r"""Proxy of C++ Physics3D::Signals::LinearVelocityMotorVelocityInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_LinearVelocityMotorVelocityInput self) -> Signals_LinearVelocityMotorVelocityInput"""
        _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_swiginit(self, _Physics3DSwig.new_Signals_LinearVelocityMotorVelocityInput())

    def motor(self):
        r"""motor(Signals_LinearVelocityMotorVelocityInput self) -> std::shared_ptr< Physics3D::Interactions::LinearVelocityMotor >"""
        return _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_motor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_LinearVelocityMotorVelocityInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_LinearVelocityMotorVelocityInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_LinearVelocityMotorVelocityInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_LinearVelocityMotorVelocityInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_LinearVelocityMotorVelocityInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_LinearVelocityMotorVelocityInput self)"""
        return _Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_LinearVelocityMotorVelocityInput

# Register Signals_LinearVelocityMotorVelocityInput in _Physics3DSwig:
_Physics3DSwig.Signals_LinearVelocityMotorVelocityInput_swigregister(Signals_LinearVelocityMotorVelocityInput)

class Signals_PrismaticPositionOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Physics3D::Signals::PrismaticPositionOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_PrismaticPositionOutput self) -> Signals_PrismaticPositionOutput"""
        _Physics3DSwig.Signals_PrismaticPositionOutput_swiginit(self, _Physics3DSwig.new_Signals_PrismaticPositionOutput())

    def prismatic(self):
        r"""prismatic(Signals_PrismaticPositionOutput self) -> std::shared_ptr< Physics3D::Interactions::Prismatic >"""
        return _Physics3DSwig.Signals_PrismaticPositionOutput_prismatic(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_PrismaticPositionOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_PrismaticPositionOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_PrismaticPositionOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_PrismaticPositionOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_PrismaticPositionOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_PrismaticPositionOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_PrismaticPositionOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_PrismaticPositionOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_PrismaticPositionOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_PrismaticPositionOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_PrismaticPositionOutput self)"""
        return _Physics3DSwig.Signals_PrismaticPositionOutput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_PrismaticPositionOutput

# Register Signals_PrismaticPositionOutput in _Physics3DSwig:
_Physics3DSwig.Signals_PrismaticPositionOutput_swigregister(Signals_PrismaticPositionOutput)

class Signals_PrismaticVelocityOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Physics3D::Signals::PrismaticVelocityOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_PrismaticVelocityOutput self) -> Signals_PrismaticVelocityOutput"""
        _Physics3DSwig.Signals_PrismaticVelocityOutput_swiginit(self, _Physics3DSwig.new_Signals_PrismaticVelocityOutput())

    def prismatic(self):
        r"""prismatic(Signals_PrismaticVelocityOutput self) -> std::shared_ptr< Physics3D::Interactions::Prismatic >"""
        return _Physics3DSwig.Signals_PrismaticVelocityOutput_prismatic(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_PrismaticVelocityOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_PrismaticVelocityOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_PrismaticVelocityOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_PrismaticVelocityOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_PrismaticVelocityOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_PrismaticVelocityOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_PrismaticVelocityOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_PrismaticVelocityOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_PrismaticVelocityOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_PrismaticVelocityOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_PrismaticVelocityOutput self)"""
        return _Physics3DSwig.Signals_PrismaticVelocityOutput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_PrismaticVelocityOutput

# Register Signals_PrismaticVelocityOutput in _Physics3DSwig:
_Physics3DSwig.Signals_PrismaticVelocityOutput_swigregister(Signals_PrismaticVelocityOutput)

class Signals_RigidBodyPositionOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Physics3D::Signals::RigidBodyPositionOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RigidBodyPositionOutput self) -> Signals_RigidBodyPositionOutput"""
        _Physics3DSwig.Signals_RigidBodyPositionOutput_swiginit(self, _Physics3DSwig.new_Signals_RigidBodyPositionOutput())

    def rigid_body(self):
        r"""rigid_body(Signals_RigidBodyPositionOutput self) -> std::shared_ptr< Physics3D::Bodies::RigidBody >"""
        return _Physics3DSwig.Signals_RigidBodyPositionOutput_rigid_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RigidBodyPositionOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_RigidBodyPositionOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RigidBodyPositionOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_RigidBodyPositionOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RigidBodyPositionOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_RigidBodyPositionOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RigidBodyPositionOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_RigidBodyPositionOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RigidBodyPositionOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_RigidBodyPositionOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RigidBodyPositionOutput self)"""
        return _Physics3DSwig.Signals_RigidBodyPositionOutput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_RigidBodyPositionOutput

# Register Signals_RigidBodyPositionOutput in _Physics3DSwig:
_Physics3DSwig.Signals_RigidBodyPositionOutput_swigregister(Signals_RigidBodyPositionOutput)

class Signals_RigidBodyRPYOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Physics3D::Signals::RigidBodyRPYOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RigidBodyRPYOutput self) -> Signals_RigidBodyRPYOutput"""
        _Physics3DSwig.Signals_RigidBodyRPYOutput_swiginit(self, _Physics3DSwig.new_Signals_RigidBodyRPYOutput())

    def rigid_body(self):
        r"""rigid_body(Signals_RigidBodyRPYOutput self) -> std::shared_ptr< Physics3D::Bodies::RigidBody >"""
        return _Physics3DSwig.Signals_RigidBodyRPYOutput_rigid_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RigidBodyRPYOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_RigidBodyRPYOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RigidBodyRPYOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_RigidBodyRPYOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RigidBodyRPYOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_RigidBodyRPYOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RigidBodyRPYOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_RigidBodyRPYOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RigidBodyRPYOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_RigidBodyRPYOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RigidBodyRPYOutput self)"""
        return _Physics3DSwig.Signals_RigidBodyRPYOutput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_RigidBodyRPYOutput

# Register Signals_RigidBodyRPYOutput in _Physics3DSwig:
_Physics3DSwig.Signals_RigidBodyRPYOutput_swigregister(Signals_RigidBodyRPYOutput)

class Signals_RigidBodyVelocityOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Physics3D::Signals::RigidBodyVelocityOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RigidBodyVelocityOutput self) -> Signals_RigidBodyVelocityOutput"""
        _Physics3DSwig.Signals_RigidBodyVelocityOutput_swiginit(self, _Physics3DSwig.new_Signals_RigidBodyVelocityOutput())

    def rigid_body(self):
        r"""rigid_body(Signals_RigidBodyVelocityOutput self) -> std::shared_ptr< Physics3D::Bodies::RigidBody >"""
        return _Physics3DSwig.Signals_RigidBodyVelocityOutput_rigid_body(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RigidBodyVelocityOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_RigidBodyVelocityOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RigidBodyVelocityOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_RigidBodyVelocityOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RigidBodyVelocityOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_RigidBodyVelocityOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RigidBodyVelocityOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_RigidBodyVelocityOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RigidBodyVelocityOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_RigidBodyVelocityOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RigidBodyVelocityOutput self)"""
        return _Physics3DSwig.Signals_RigidBodyVelocityOutput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_RigidBodyVelocityOutput

# Register Signals_RigidBodyVelocityOutput in _Physics3DSwig:
_Physics3DSwig.Signals_RigidBodyVelocityOutput_swigregister(Signals_RigidBodyVelocityOutput)

class Signals_RotationalVelocityMotorVelocityInput(rebrick.Physics.Signals_Input):
    r"""Proxy of C++ Physics3D::Signals::RotationalVelocityMotorVelocityInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_RotationalVelocityMotorVelocityInput self) -> Signals_RotationalVelocityMotorVelocityInput"""
        _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_swiginit(self, _Physics3DSwig.new_Signals_RotationalVelocityMotorVelocityInput())

    def motor(self):
        r"""motor(Signals_RotationalVelocityMotorVelocityInput self) -> std::shared_ptr< Physics3D::Interactions::RotationalVelocityMotor >"""
        return _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_motor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_RotationalVelocityMotorVelocityInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_RotationalVelocityMotorVelocityInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_RotationalVelocityMotorVelocityInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_RotationalVelocityMotorVelocityInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_RotationalVelocityMotorVelocityInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_RotationalVelocityMotorVelocityInput self)"""
        return _Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_RotationalVelocityMotorVelocityInput

# Register Signals_RotationalVelocityMotorVelocityInput in _Physics3DSwig:
_Physics3DSwig.Signals_RotationalVelocityMotorVelocityInput_swigregister(Signals_RotationalVelocityMotorVelocityInput)

class Signals_TorsionSpringAngleInput(rebrick.Physics.Signals_Input):
    r"""Proxy of C++ Physics3D::Signals::TorsionSpringAngleInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_TorsionSpringAngleInput self) -> Signals_TorsionSpringAngleInput"""
        _Physics3DSwig.Signals_TorsionSpringAngleInput_swiginit(self, _Physics3DSwig.new_Signals_TorsionSpringAngleInput())

    def spring(self):
        r"""spring(Signals_TorsionSpringAngleInput self) -> std::shared_ptr< Physics3D::Interactions::TorsionSpring >"""
        return _Physics3DSwig.Signals_TorsionSpringAngleInput_spring(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_TorsionSpringAngleInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Signals_TorsionSpringAngleInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_TorsionSpringAngleInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Signals_TorsionSpringAngleInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_TorsionSpringAngleInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Signals_TorsionSpringAngleInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_TorsionSpringAngleInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Signals_TorsionSpringAngleInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_TorsionSpringAngleInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Signals_TorsionSpringAngleInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_TorsionSpringAngleInput self)"""
        return _Physics3DSwig.Signals_TorsionSpringAngleInput_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Signals_TorsionSpringAngleInput

# Register Signals_TorsionSpringAngleInput in _Physics3DSwig:
_Physics3DSwig.Signals_TorsionSpringAngleInput_swigregister(Signals_TorsionSpringAngleInput)

class System(rebrick.Physics.System):
    r"""Proxy of C++ Physics3D::System class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(System self) -> System"""
        _Physics3DSwig.System_swiginit(self, _Physics3DSwig.new_System())

    def local_transform(self):
        r"""local_transform(System self) -> std::shared_ptr< Physics3D::Transform >"""
        return _Physics3DSwig.System_local_transform(self)

    def onInit(self):
        r"""onInit(System self)"""
        return _Physics3DSwig.System_onInit(self)

    def kinematically_controlled(self):
        r"""kinematically_controlled(System self) -> Physics3D_Bodies_RigidBody_Vector"""
        return _Physics3DSwig.System_kinematically_controlled(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(System self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.System_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(System self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.System_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(System self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.System_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(System self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.System_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(System self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.System_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(System self)"""
        return _Physics3DSwig.System_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_System

# Register System in _Physics3DSwig:
_Physics3DSwig.System_swigregister(System)

class Transform(rebrick.Core.Object):
    r"""Proxy of C++ Physics3D::Transform class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Transform self) -> Transform"""
        _Physics3DSwig.Transform_swiginit(self, _Physics3DSwig.new_Transform())

    def position(self):
        r"""position(Transform self) -> std::shared_ptr< Math::Vec3 >"""
        return _Physics3DSwig.Transform_position(self)

    def rotation(self):
        r"""rotation(Transform self) -> std::shared_ptr< Math::Quat >"""
        return _Physics3DSwig.Transform_rotation(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Transform self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _Physics3DSwig.Transform_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Transform self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _Physics3DSwig.Transform_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Transform self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _Physics3DSwig.Transform_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Transform self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _Physics3DSwig.Transform_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Transform self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _Physics3DSwig.Transform_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Transform self)"""
        return _Physics3DSwig.Transform_triggerOnInit(self)
    __swig_destroy__ = _Physics3DSwig.delete_Transform

# Register Transform in _Physics3DSwig:
_Physics3DSwig.Transform_swigregister(Transform)



