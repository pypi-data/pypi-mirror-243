# -*- coding: utf-8 -*-
KEYWORDS = {'imageCount': {'arg': ['image'], 'doc': 'Image Count\n Count how many times the same picture is detected in screen.\n\n Examples:\n | ${image_cnt}=  |  Image Count  | test.png  |'}, 'waitMobilePageContainText': {'arg': ['text', 'exactMatch=true', 'timeOut=10'], 'doc': 'Wait Mobile Page Contain Text\nExamples:\n| Wait Mobile Page Contain Text | text | exactMatch=true | timeOut: default 10s'}, 'changeScreenId': {'arg': ['screenId'], 'doc': 'Change screen id\n For multi display, user could use this keyword to switch to the correct screen\n\n Examples:\n | Change screen id | 1 |'}, 'selectRegion': {'arg': ['message'], 'doc': 'Select Region\n\n Allow user to select a region and capture it.\n Return array of [capturedImagePath, x, y, w, h]\n\n Examples:\n | @{SelectedRegion}= | Select region |'}, 'setRoi': {'arg': ['coordinates', 'timeout=0'], 'doc': 'Set ROI\n\n Set region of interest on screen\n Optionally pass highlight timeout.\n\n Examples:${coordinates} | set variable | @{x, y, w, h] |\n | Set ROI | ${coordinates} |\n | Set ROI | ${coordinates} | 2 |'}, 'highlightRoi': {'arg': ['timeout'], 'doc': 'Highlight ROI'}, 'clickText': {'arg': ['text'], 'doc': 'Click Text\n\nClick on text.\nExamples:\n| Click Text | Hello |'}, 'setPsm': {'arg': ['psm'], 'doc': 'Set PSM\nExamples:\n| Set PSM | 1 - 13 |'}, 'mobileElementShouldNotContainText': {'arg': ['locator', 'text'], 'doc': 'Mobile Element Should Not Contain Text\nExamples:\n| Mobile Element Should Not Contain Text | locator | text |'}, 'mouseDown': {'arg': ['*mouseButtons'], 'doc': 'Mouse down\n Press and hold the specified buttons\n\n @mouseButtons: Could be LEFT, MIDDLE, RIGHT\n\n Examples:\n | Mouse Move   | test.png | \n | Mouse Down   | LEFT     | RIGHT |\n | Mouse Up     |'}, 'mobilePageShouldContainElement': {'arg': ['locator'], 'doc': 'Mobile Page Should Contain Element\nExamples:\n| Mobile Page Should Contain Element | locator |'}, 'closeMobileApplication': {'arg': [], 'doc': 'Close Mobile Application'}, 'tapOnBestMobileImage': {'arg': ['images'], 'doc': 'Tap On Best Mobile Image\n\nTap an best image with similarity and offset.\nExamples:\n| Mobile Tap On Best Image | hello.png |'}, 'addImagePath': {'arg': ['path'], 'doc': 'Add image path'}, 'mobilePageShouldContainText': {'arg': ['text'], 'doc': 'Mobile Page Should Contain Text\nExamples:\n| Mobile Page Should Contain Element | text |'}, 'tapWordOnMobile': {'arg': ['text', 'colorOption=0'], 'doc': 'Tap Word On Mobile\n\nTap an Tap Word On Mobile  with similarity and offset.\nExamples:\n| Tap Word On Mobile | Hello |  Text Color : 0 (default) 1 (light white) 2 (light gray)'}, 'resetOCRSetting': {'arg': [], 'doc': 'Reset OCR Setting\nSet Reset Font Setting'}, 'wheelDown': {'arg': ['steps', 'image='], 'doc': 'Wheel down\n Move mouse to the target, and wheel down with give steps\n\n Examples:\n | Wheel Down     | 5   | \n | Wheel Down     | 5   |  test.png   |'}, 'closeApplication': {'arg': ['name'], 'doc': 'Close application'}, 'swipeUntilTextVisible': {'arg': ['text'], 'doc': 'Swipe Until Text Visible\nExamples:\n| Swipe Until Text Visible | text |'}, 'getScreenCoordinates': {'arg': [], 'doc': 'Get screen coordinates\n\nReturn screen coordinates for active screen\n\nExamples:\n| @{coordinates}=  | Get Screen Coordinates | 0 |'}, 'getCurrentScreenId': {'arg': [], 'doc': 'Get current screen id'}, 'hideMobileKeyboard': {'arg': [], 'doc': 'Hide Mobile Keyboard'}, 'stop_remote_server': {'arg': [], 'doc': 'Stops the remote server.\n\nThe server may be configured so that users cannot stop it.'}, 'mouseMoveLocation': {'arg': ['x=0', 'y=0'], 'doc': 'Mouse move locationMove the mouse pointer to the target location\n\n @x: x cooridnate where mouse should move\n\n @y: y cooridnate where mouse should move\n\n Examples:\n | Mouse Move Location | 20 | 20 |'}, 'captureMobileScreen': {'arg': ['imagePath'], 'doc': 'Capture Mobile Screen\nExamples:\n| Mobile Capture Screen | demo.png |'}, 'waitForImage': {'arg': ['wantedImage', 'notWantedImage', 'timeout'], 'doc': 'Wait For Image\n\n Check wantedImage exist. If notWantedImage appear or timeout happened, throw exception\n\n @wantedImage: expected image in screen\n\n @notWantedImage: unexpected image in screen\n\n @timeout: wait seconds\n\n Examples:\n | Wait For Image  | wanted.png | notWanted.png | 5 |'}, 'clearAllHighlights': {'arg': [], 'doc': 'Clear all highlights from screen'}, 'fromRegionJumpTo': {'arg': ['region', 'direction', 'jumps', 'margin'], 'doc': "From Region Jump To\n Create a region and translate it related to the given region, the created region will have the exactly same height and width as the passed one \n ${jumps} = number of 'jumps' to move, like on a chess game, jumps will be the number of squares a piece moves \n ${direction} = | below | above | left | right | \n ${margem} = add a space between jumps, must be >= 1 \n |${translated_region} =    |    From Region Jump To  |  ${original_region}  |    below   |   4   |    1   |"}, 'waitUntilScreenContain': {'arg': ['image', 'timeout'], 'doc': 'Wait until screen contain\n Wait until image shown in screen'}, 'getText': {'arg': ['image='], 'doc': 'Get text\n\n If image is not given, keyword will get text from whole Screen\n If image is given, keyword will get text from matched region\n Call keyword setOcrTextRead to set OcrTextRead as true, before using text recognition keywords\n\n Examples:\n | Set Ocr Text Read  | true       |\n | Get Text           |\n | Get Text           | test.png   |'}, 'setOcrLanguage': {'arg': ['ocrTextLanguage'], 'doc': 'Set OCR language\n\nSet OCR language\nThree letters parameter\nDefault : eng for English language\nExamples:\n| Set OCR Language | eng |\n| Set OCR Language | fra |'}, 'tapTextOnMobile': {'arg': ['text', 'colorOption=0'], 'doc': 'Tap Text On Mobile\n\nTap an Tap Text On Mobile  with similarity and offset.\nExamples:\n| Tap Text On Mobile | Hello World | Text Color : 0 (default) 1 (light white) 2 (light gray)'}, 'setAppiumImplicitWait': {'arg': ['millisecond'], 'doc': 'Set Appium Implicit Wait\nExamples:\n| Set Appium Implicit Wait | MILLISECONDS |'}, 'isTextExistOnMobileScreen': {'arg': ['text'], 'doc': 'Is Text Exist On Mobile Screen\nExamples:\n| Is Text Exist On Mobile Screen | text |'}, 'click': {'arg': ['image', 'xOffset=0', 'yOffset=0'], 'doc': 'Click\n\nClick on an image with similarity and offset.\nExamples:\n| Click | hello.png |'}, 'isTextExistOnScreen': {'arg': ['text'], 'doc': 'Is Text Exist On Screen\n\nIs Text Exist On Screen.\nExamples:\n| Is Text Exist On Screen | Hello |'}, 'clickMobileElement': {'arg': ['locator'], 'doc': 'Click Mobile Element\nExamples:\n| Mobile Click Element | locator |'}, 'tapOnBestMobileImageAndWaitText': {'arg': ['images', 'text'], 'doc': 'Tap On Best Mobile Image And Wait Text\n\nTap an best image with similarity and offset.\nExamples:\n| Mobile Tap On Best Image | hello.png | text |'}, 'waitUntilMobileScreenContainAny': {'arg': ['images', 'timeOut=10'], 'doc': 'Wait Until Mobile Screen Contain Any\nExamples:\n| Wait Until Mobile Screen Contain Any | images | timeOut: default 10s'}, 'doubleClick': {'arg': ['image', 'xOffset=0', 'yOffset=0'], 'doc': 'Double click'}, 'getExtendedRegionFromImage': {'arg': ['image', 'direction', 'number of times to repeat'], 'doc': 'Get Extended Region From Image\n Extended the given image creating a new region above, below, on the left or on the right side, with the same height and width\n The height and width can change using the multiplier @number_of_times_to_repeat \n If orginal if giver as arguments, the region will be exactly the same location as the image, last argument is ignored \n Ex: If 2 is given and direction = below the new region will have twice the height of the given image and will be located right below it\n |${region} =    |    Get Extended Region From Image  |  image.png  |    below   |   1   |\n |${region} =    |    Get Extended Region From Image  |  image.png  |    original   |   1 #this argument is ignored   |'}, 'mouseUp': {'arg': ['*mouseButtons'], 'doc': 'Mouse up\n Release the specified mouse buttons\n\n @mouseButtons: Could be LEFT, MIDDLE, RIGHT. If empty, all currently held buttons are released\n\n Examples:\n | Mouse Move   | test.png | \n | Mouse Down   | LEFT     | RIGHT |\n | Mouse Up     | LEFT     | RIGHT |'}, 'pasteText': {'arg': ['image', 'text'], 'doc': 'Paste text. Image could be empty'}, 'mouseMoveRegion': {'arg': ['coordinates', 'highlight_timeout'], 'doc': 'Mouse move regionMove the mouse pointer to the target region\n\n @coordinates: coordinates where mouse should move\n\n Examples:\n | Mouse Move region | [20, 20, 20, 20] |'}, 'waitForMultipleImages': {'arg': ['timeout', 'pollingInterval', 'expectedImages', 'notExpectedImages'], 'doc': 'Wait For Multiple Images\n\n Check if images exists in expectedImages or notExpectedImages list. If image appears that is listed in notExpectedImages list or timeout happened, throw exception If image appears that is listed in expectedImageslist return succesfully. \n\n @timeout: wait seconds\n\n @pollingInterval: time in seconds between screen checks\n\n @expectedImages: list of expected images in screen\n\n @notExpectedImages: list of not expected images in screen\n\n Examples:\n | @{wanted_images} =  | Create List | wanted_image1.png | wanted_image2.png |\n | @{not_wanted_images} =  | Create List | not_wanted_image1.png | not_wanted_image2.png | not_wanted_image3.png |\n | Wait For Multiple Images | 900 | 10 | ${wanted_images} | ${not_wanted_images} |'}, 'clickAny': {'arg': ['images', 'timeout'], 'doc': 'Click Any\n\n Click any best image matched\n\n Examples:\n | Click Any | image1.png,image2.png,image3.png | timeout'}, 'screenShouldContainText': {'arg': ['text'], 'doc': 'Screen Should Contain Text\n\nScreen Should Contain Text.\nExamples:\n| Screen Should Contain Text | Hello |'}, 'tapTextAndTypeTextOnMobile': {'arg': ['textTap', 'textInput', 'colorOption=0'], 'doc': 'Tap Text And Type Text On Mobile\n\nTap an Tap Text And Type Text On Mobile  with similarity and offset.\nExamples:\n| Tap Text And Type Text On Mobile | Hello World | Text | Text Color : 0 (default) 1 (light white) 2 (light gray)'}, 'RegionClickText': {'arg': ['text'], 'doc': 'Region Click Text\n\nClick on text in region.\nSet a region before.\nExamples:\n| Region Click Text | Hello |'}, 'mobileElementShouldContainText': {'arg': ['locator', 'text'], 'doc': 'Mobile Element Should Contain Text\nExamples:\n| Mobile Element Should Contain Text | locator | text |'}, 'keyUp': {'arg': ['keyConstant'], 'doc': 'Key up\n Release keyboard key.\n\n For a list of possible Keys view docs for org.sikuli.script.Key .\n\n Examples:\n | Click | textFieldWithDefaultText.png | \n | Key UP | CTRL | '}, 'setWaitScanRate': {'arg': ['delay'], 'doc': 'Set wait scan rate\n Specify the number of times actual search operations are performed per second while waiting for a pattern to appear or vanish.'}, 'setSmallFont': {'arg': [], 'doc': 'Set Small Font\nSet Small Font Option'}, 'setMobileTimeout': {'arg': ['timeout'], 'doc': 'Set Mobile TimeOut\nExamples:\n| Set Mobile TimeOut | 10 |'}, 'highlightRegion': {'arg': ['coordinates', 'timeout'], 'doc': 'Highlight region'}, 'typeWithModifiers': {'arg': ['text', '*modifiers'], 'doc': 'Type with modifiers\n\n Examples:\n |Type With Modifiers| A | CTRL |'}, 'clickTextAndWaitTextOnMobile': {'arg': ['textClick', 'textWait', 'timeOut=10', 'exactMatch=True'], 'doc': 'Click Text And Wait Text On Mobile\nExamples:\n| Click Text And Wait Text On Mobile | textClick | textWait | timeOut | exactMatch | '}, 'setShowActions': {'arg': ['showActions'], 'doc': 'Set show actions'}, 'wheelUp': {'arg': ['steps', 'image='], 'doc': 'Wheel up\n Move mouse to the target, and wheel up with give steps\n\n Examples:\n | Wheel Up     | 5   | \n | Wheel Up     | 5   |  test.png   |'}, 'rightClick': {'arg': ['image', 'xOffset=0', 'yOffset=0'], 'doc': 'Right click\n\nClick on an image with similarity and offset.\nExamples:\n| Click | hello.png |'}, 'clickOnMatch': {'arg': ['match'], 'doc': "Click On Match\n there's no offset to be configured\n works with the keyword Return Match From Region"}, 'getExtendedRegionFromRegion': {'arg': ['image', 'direction', 'number of times to repeat'], 'doc': 'Get Extended Region From Region\n Extended the given image creating a region above, below, in the left side or on the right, with the same height and width\n The height and width can change using the multiplier @number_of_times_to_repeat \n If 2 is given and direction = below the new region will have twice the height of the orignal and will be located right below it\n |${below_region} =    |    Get Extended Region From Region  |  ${another_region}  |    below   |   1   |'}, 'setTimeout': {'arg': ['timeout'], 'doc': 'Set timeout\n\nSet Sikuli timeout(seconds)\nExamples:\n| Set timeout | 10 |'}, 'dragAndDropByOffset': {'arg': ['srcImage', 'xOffset', 'yOffset'], 'doc': 'Drag the source image to target by offset.\nIf source image is empty, drag the last match and drop at given target'}, 'doubleClickOnRegion': {'arg': ['region'], 'doc': "Double Click On Region\n there's no offset to be configured\n works with the keyword Get Extended Region From"}, 'clickAndSendTextOnMobile': {'arg': ['textClick', 'textInput'], 'doc': 'Click And Send Text On Mobile\nExamples:\n| Click And Send Text On Mobile | textClick | textInput'}, 'exists': {'arg': ['image', 'timeout='], 'doc': 'Exists\n\n Check whether image exists in screen\n @image: expected image in screen\n @timeout: wait seconds\n\n Examples:\n | ${is_exist}=  | Exists | image.png | 0 |'}, 'waitUntilScreenContainAny': {'arg': ['images', 'timeOut=10'], 'doc': 'Wait Until Screen Contain Any\nExamples:\n| Wait Until Screen Contain Any | images | timeOut: default 10s'}, 'removeImagePath': {'arg': ['path'], 'doc': 'Remove image path'}, 'getMatchScore': {'arg': ['image'], 'doc': 'Get match scoreTries to find the image on the screen, returns accuracy score (0-1)\n\n Examples:\n | ${score} = | Get Match Score |  somethingThatMayExist.png |\n | Run Keyword if | ${score} > 0.95 | keyword1 | ELSE | keyword2 |'}, 'tapOnMobileImage': {'arg': ['image'], 'doc': 'Tap On Mobile Image\n\nTap On Mobile an image with similarity and offset.\nExamples:\n| Mobile Tap On Image | hello.png |'}, 'setAlwaysResize': {'arg': ['resize'], 'doc': 'Set Always Resize\nA decimal value greater 0 and not equal to 1 to switch the feature on.\nWith this setting you can tell SikuliX to generally resize all given images before a search operation using the given factor, which is applied to both width and height. The implementation internally uses the standard behavior of resizing a Java-AWT-BufferedImage.\n\nTo switch the feature off again, just assign 0 or 1.'}, 'tapMobileImageAndWaitBestImage': {'arg': ['image', 'checks'], 'doc': 'Tap Mobile Image And Wait Best Image\n\nTap Image On Mobile And Wait Best Image with similarity and offset.\nExamples:\n| Mobile Tap Image And Wait Best Image | tap.png | wait.png'}, 'returnMatchFromRegion': {'arg': ['region', 'target'], 'doc': 'Return Match From Region\n expect a region (from keyword Get Extended Region From) and a target to be search for (an image.png)\n returns the target as a object (string), it can be used with Click On Match keywords'}, 'captureRegion': {'arg': ['coordinates', 'imageName='], 'doc': 'Capture region\n\n\nCapture region passed\nExamples:\n| ${coor} | Create List | x | y | w | h |\n| ${screenshotname}= | Capture region | ${coor} | demo.png |\n| ${screenshotname}= | Capture region | ${coor} | '}, 'clickAndTypeTextOnMobile': {'arg': ['textClick', 'textType', 'exactMatch=True', 'hide=False'], 'doc': 'Click And Type Text On Mobile\nExamples:\n| Click And Type Text On Mobile | text_click | text | hide keyboard'}, 'doubleClickOnMatch': {'arg': ['match'], 'doc': "Double Click On Match\n there's no offset to be configured\n works with the keyword Return Match From Region"}, 'clickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Click in. \nClick target image in area image.'}, 'setTesseractPath': {'arg': ['path'], 'doc': 'Set Tesseract Path\nExamples:\n| Set Tesseract Path | Path Trained Data |'}, 'pickDate': {'arg': ['date', 'month', 'year'], 'doc': 'Pick Date\nExamples:\n| Pick Date | 10 | November | 2000 |'}, 'mobileElementShouldBe': {'arg': ['locator', 'text'], 'doc': 'Mobile Element Should Be\nExamples:\n| Mobile Element Should Be | locator | text |'}, 'getExtendedRegionFrom': {'arg': ['image', 'direction', 'number_of_times_to_repeat'], 'doc': 'Get extended region from\n Extended the given image creating a region above or below with the same width\n The height can change using the multiplier @number_of_times_to_repeat, if 2 is given the new region will have twice the height of the orignalge '}, 'clearTextOnMobileElement': {'arg': ['locator'], 'doc': 'Clear Text On Mobile Element\nExamples:\n| Clear Text On Mobile Element | locator |'}, 'getNumberOfScreens': {'arg': [], 'doc': 'Get number of screens'}, 'waitUntilScreenContainAndClick': {'arg': ['image', 'timeout'], 'doc': 'Wait until screen contain and click\n Wait until image shown in screen and click to the image'}, 'clickAndPress': {'arg': ['image', 'keyConstant'], 'doc': 'Click And Press\n\n Click image and press key C_END.\n\n For a list of possible Keys view docs for org.sikuli.script.Key .\n\n Examples:\n | Click And Press To End | textFieldWithDefaultText.png | '}, 'tapWordAndSendTextOnMobile': {'arg': ['textTap', 'textInput', 'colorOption=0'], 'doc': 'Tap Word And Send Text On Mobile\n\nTap an Tap Word And Send Text On Mobile  with similarity and offset.\nExamples:\n| Tap Word And Send Text On Mobile | Hello | World | Text Color : 0 (default) 1 (light white) 2 (light gray)'}, 'setOcrTextRead': {'arg': ['ocrTextRead'], 'doc': 'OCR text read\nIf needed use Set OCR Language before.`\nDefault language : English (eng).'}, 'inputTextOnMobileElement': {'arg': ['locator', 'text'], 'doc': 'Input Text On Mobile Element\nExamples:\n| Mobile Input Text On Element | locator | text |'}, 'goBackOnMobileApplication': {'arg': [], 'doc': 'Go Back On Mobile Application'}, 'openApplication': {'arg': ['path'], 'doc': 'Open application\n To open app with parameters, refer:\n https://sikulix-2014.readthedocs.io/en/latest/appclass.html#App.App'}, 'clickTextOnMobile': {'arg': ['textClick', 'exactMatch=True', 'number=1'], 'doc': 'Click Text On Mobile\nExamples:\n| Click Text On Mobile | textClick | exactMatch | click 1 time'}, 'openMobileApplication': {'arg': ['appiumUrl', 'capabilities'], 'doc': 'Open Mobile Application\nExamples:\n| Mobile Open Application | appiumUrl | capabilities'}, 'tapOnBestMobileImageAndWaitBestImage': {'arg': ['images', 'checks'], 'doc': 'Tap On Best Mobile Image And Wait Best Image\n\nTap Best Image On Mobile And Wait Best Image with similarity and offset.\nExamples:\n| Mobile Tap On Best Image And Wait Best Image | tap.png | wait.png'}, 'typeTextOnMobile': {'arg': ['text'], 'doc': 'Type Text On Mobile\nExamples:\n| Type Text On Mobile | text |'}, 'clearTextOnMobile': {'arg': ['text', 'exactMatch=true'], 'doc': 'Clear Text On Mobile\nExamples:\n| Clear Text On Mobile | text |'}, 'inputText': {'arg': ['image', 'text'], 'doc': 'Input text.\n Image could be empty\n\n Examples:\n | Input text | image.png | Sikuli |\n | Input text | ${EMPTY} | Sikuli |'}, 'doubleClickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Double click in. \nDouble click target image in area image.'}, 'captureScreen': {'arg': [], 'doc': 'Capture whole screen, file name is returned'}, 'swipeInMobile': {'arg': ['startX', 'startY', 'endX', 'endY'], 'doc': 'Swipe In Mobile\nExamples:\n| Swipe In Mobile | start x | start y | end x | end y |'}, 'tapWordAndClearOnMobile': {'arg': ['textTap', 'colorOption=0'], 'doc': 'Tap Word And Clear On Mobile\n\nTap an Tap Word And Clear Text On Mobile  with similarity and offset.\nExamples:\n| Tap Word And Clear On Mobile | Hello | Text Color : 0 (default) 1 (light white) 2 (light gray)'}, 'screenShouldContain': {'arg': ['image'], 'doc': 'Screen should contain'}, 'clearHighlight': {'arg': ['image'], 'doc': 'Clear highlight from screen'}, 'waitMobilePageNotContainText': {'arg': ['text', 'timeOut=10'], 'doc': 'Wait Mobile Page Not Contain Text\nExamples:\n| Wait Mobile Page Not Contain Text | text | timeOut: default 10s'}, 'tapMobileImageAndWaitImage': {'arg': ['image', 'check'], 'doc': 'Tap Mobile Image And Wait Image\n\nTap Image On Mobile And Wait image with similarity and offset.\nExamples:\n| Mobile Tap Image And Wait Image | tap.png | wait.png'}, 'readTextFromRegion': {'arg': ['reg'], 'doc': 'Read text from region'}, 'setCaptureFolder': {'arg': ['path'], 'doc': 'Set captured folder\n\nSet folder for captured images\nExamples:\n| Set captured folder | PATH |'}, 'setMinSimilarity': {'arg': ['minSimilarity'], 'doc': 'Set min similarity (accuracy of matching elements).\n\nminSimilarity can be a decimal number between 0 and 1\n\nExample:\n\n| Set Min Similarity | 0.85 |'}, 'clickNth': {'arg': ['image', 'index', 'sortByColumn=true'], 'doc': 'Click nth\n\n Click on specific image.\n Optionally pass similarity and sort by column or row.\n\n Examples:\n | Click on nth image in region | image.png | 1 |\n | Click on nth image in region | image.png | 1 | ${FALSE} |'}, 'setMobileStepWait': {'arg': ['time'], 'doc': 'Set Mobile Step Wait\nExamples:\n| Set Mobile Step Wait | 10 |'}, 'getTextFromMobileElement': {'arg': ['locator'], 'doc': 'Get Text From Mobile Element\nExamples:\n| Get Text From Mobile Element | locator |'}, 'mobilePageShouldNotContainText': {'arg': ['text'], 'doc': 'Mobile Page Should Not Contain Text\nExamples:\n| Mobile Page Should Not Contain Text | text |'}, 'getMobileSession': {'arg': [], 'doc': 'Get Current Mobile Session'}, 'dragAndDrop': {'arg': ['srcImage', 'targetImage'], 'doc': 'Drag the source image to target image.\nIf source image is empty, drag the last match and drop at given target'}, 'highlight': {'arg': ['image', 'secs='], 'doc': 'Highlight matched image.\n If secs is set, highlight will vanish automatically after setted seconds'}, 'setGrayFont': {'arg': [], 'doc': 'Set Gray Font\nTurn on OCR Gray Font Option'}, 'clickOnRegion': {'arg': ['region'], 'doc': "Click On Region\n there's no offset to be configured\n works with the keyword Get Extended Region From"}, 'setSlowMotionDelay': {'arg': ['delay'], 'doc': 'Set slow motion delay\n Control the duration of the visual effect (seconds).'}, 'pressSpecialKey': {'arg': ['keyConstant'], 'doc': 'Press special key\n\n Presses a special keyboard key.\n\n For a list of possible Keys view docs for org.sikuli.script.Key .\n\n Examples:\n | Double Click | textFieldWithDefaultText.png | \n | Press Special Key | DELETE | '}, 'setLightFont': {'arg': [], 'doc': 'Set Light Font\nTurn on OCR Light Font Option'}, 'setMoveMouseDelay': {'arg': ['delay'], 'doc': 'Set move mouse delay'}, 'rightClickIn': {'arg': ['areaImage', 'targetImage'], 'doc': 'Right click in. \nRight click target image in area image.'}, 'resetRoi': {'arg': [], 'doc': 'Reset Roi\n Set Region of interest to full screen\n\n Examples:\n | Reset roi |'}, 'captureRoi': {'arg': ['imageName='], 'doc': 'Capture Roi'}, 'clickRegion': {'arg': ['coordinates', 'waitChange=0', 'timeout=0'], 'doc': 'Click region\n\n Click on defined region cooridinates.\n Optionally Wait for specified time to ensure region has changed.\n Also, optionally set highlight\n\n Examples:\n | ${coor} | Create List | 0 | 0 | 100 | 100 |\n | Click Region | ${coor} |\n | Click Region | ${coor} | 0 |\n | Click Region | ${coor} | 0 | 2 |'}, 'mouseMove': {'arg': ['image='], 'doc': 'Mouse moveMove the mouse pointer to the target\n\n @image: if image is empty, will move mouse to the last matched.\n\n Examples:\n | Mouse Move              | test.png | \n | Screen Should Contain   | test.png | \n | Mouse Move |'}, 'waitUntilMobileScreenContain': {'arg': ['image', 'timeOut'], 'doc': 'Wait Until Mobile Screen Contain\nExamples:\n| Wait Until Mobile Screen Contain | image | timeOut: default 10s'}, 'waitUntilScreenNotContain': {'arg': ['image', 'timeout'], 'doc': 'Wait until screen not contain\n Wait until image not in screen'}, 'tapMobileImageAndWaitText': {'arg': ['image', 'check'], 'doc': 'Tap Mobile Image And Wait Text\n\nTap Image On Mobile And Wait Text with similarity and offset.\nExamples:\n| Mobile Tap Image And Wait Text | tap.png | text'}, 'isScreenContain': {'arg': ['image'], 'doc': 'Is Screen Contain\n\n Check screen contain image\n\n Return: true | false'}, 'resetFontSetting': {'arg': [], 'doc': 'Reset Font Setting\nSet Reset Font Setting'}, 'screenShouldNotContain': {'arg': ['image'], 'doc': 'Screen should not contain\n Screen should not contain image\n\n Examples:\n | Screen should not contain | image.png |'}, 'quitMobileSession': {'arg': [], 'doc': 'Quit Mobile Session'}, 'getImageCoordinates': {'arg': ['image', 'coordinates=[]'], 'doc': 'Get Image Coordinates\n\n Return image coordinates, within region\n Examples:\n | ${imageCoordinates}= | Get Image Coordinates | image.png=0.75 |\n | ${imageCoordinates}= | Get Image Coordinates | image.png=0.75 | [x, y, w, z] |'}, 'configureAppiumPageTimeOuts': {'arg': ['time'], 'doc': 'Configure Appium Page TimeOuts\nExamples:\n| Configure Appium Page TimeOuts | time |'}, 'keyDown': {'arg': ['keyConstant'], 'doc': 'Key down\n Press keyboard key and hold it.\n\n For a list of possible Keys view docs for org.sikuli.script.Key .\n\n Examples:\n | Key down | CTRL | \n | Click | textFieldWithDefaultText.png | '}, 'setCaptureMatchedImage': {'arg': ['value'], 'doc': 'Set capture matched image\n\nSet capture matched images, the default value is true\nExamples:\n| Set Capture Matched Image | false |'}, 'start_sikuli_process': {'arg': ['port=None'], 'doc': '\n        This keyword is used to start sikuli java process.\n        If library is inited with mode "OLD", sikuli java process is started automatically.\n        If library is inited with mode "NEW", this keyword should be used.\n\n        :param port: port of sikuli java process, if value is None or 0, a random free port will be used\n        :return: None\n        '}}