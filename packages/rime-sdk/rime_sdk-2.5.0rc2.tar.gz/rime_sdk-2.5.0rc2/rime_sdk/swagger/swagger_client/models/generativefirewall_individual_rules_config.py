# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallIndividualRulesConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_leakage': 'GenerativefirewallDataLeakageRuleConfig',
        'off_topic': 'GenerativefirewallOffTopicRuleConfig',
        'consistency_with_knowledgebase': 'GenerativefirewallConsistencyWithKnowledgebaseRuleConfig',
        'pii_detection_input': 'GenerativefirewallPiiDetectionRuleConfig',
        'pii_detection_output': 'GenerativefirewallPiiDetectionRuleConfig',
        'denial_of_service_input': 'GenerativefirewallDenialOfServiceRuleConfig',
        'denial_of_service_output': 'GenerativefirewallDenialOfServiceRuleConfig',
        'unknown_external_source': 'GenerativefirewallUnknownExternalSourceRuleConfig'
    }

    attribute_map = {
        'data_leakage': 'dataLeakage',
        'off_topic': 'offTopic',
        'consistency_with_knowledgebase': 'consistencyWithKnowledgebase',
        'pii_detection_input': 'piiDetectionInput',
        'pii_detection_output': 'piiDetectionOutput',
        'denial_of_service_input': 'denialOfServiceInput',
        'denial_of_service_output': 'denialOfServiceOutput',
        'unknown_external_source': 'unknownExternalSource'
    }

    def __init__(self, data_leakage=None, off_topic=None, consistency_with_knowledgebase=None, pii_detection_input=None, pii_detection_output=None, denial_of_service_input=None, denial_of_service_output=None, unknown_external_source=None):  # noqa: E501
        """GenerativefirewallIndividualRulesConfig - a model defined in Swagger"""  # noqa: E501
        self._data_leakage = None
        self._off_topic = None
        self._consistency_with_knowledgebase = None
        self._pii_detection_input = None
        self._pii_detection_output = None
        self._denial_of_service_input = None
        self._denial_of_service_output = None
        self._unknown_external_source = None
        self.discriminator = None
        if data_leakage is not None:
            self.data_leakage = data_leakage
        if off_topic is not None:
            self.off_topic = off_topic
        if consistency_with_knowledgebase is not None:
            self.consistency_with_knowledgebase = consistency_with_knowledgebase
        if pii_detection_input is not None:
            self.pii_detection_input = pii_detection_input
        if pii_detection_output is not None:
            self.pii_detection_output = pii_detection_output
        if denial_of_service_input is not None:
            self.denial_of_service_input = denial_of_service_input
        if denial_of_service_output is not None:
            self.denial_of_service_output = denial_of_service_output
        if unknown_external_source is not None:
            self.unknown_external_source = unknown_external_source

    @property
    def data_leakage(self):
        """Gets the data_leakage of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The data_leakage of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallDataLeakageRuleConfig
        """
        return self._data_leakage

    @data_leakage.setter
    def data_leakage(self, data_leakage):
        """Sets the data_leakage of this GenerativefirewallIndividualRulesConfig.


        :param data_leakage: The data_leakage of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallDataLeakageRuleConfig
        """

        self._data_leakage = data_leakage

    @property
    def off_topic(self):
        """Gets the off_topic of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The off_topic of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallOffTopicRuleConfig
        """
        return self._off_topic

    @off_topic.setter
    def off_topic(self, off_topic):
        """Sets the off_topic of this GenerativefirewallIndividualRulesConfig.


        :param off_topic: The off_topic of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallOffTopicRuleConfig
        """

        self._off_topic = off_topic

    @property
    def consistency_with_knowledgebase(self):
        """Gets the consistency_with_knowledgebase of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The consistency_with_knowledgebase of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallConsistencyWithKnowledgebaseRuleConfig
        """
        return self._consistency_with_knowledgebase

    @consistency_with_knowledgebase.setter
    def consistency_with_knowledgebase(self, consistency_with_knowledgebase):
        """Sets the consistency_with_knowledgebase of this GenerativefirewallIndividualRulesConfig.


        :param consistency_with_knowledgebase: The consistency_with_knowledgebase of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallConsistencyWithKnowledgebaseRuleConfig
        """

        self._consistency_with_knowledgebase = consistency_with_knowledgebase

    @property
    def pii_detection_input(self):
        """Gets the pii_detection_input of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The pii_detection_input of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallPiiDetectionRuleConfig
        """
        return self._pii_detection_input

    @pii_detection_input.setter
    def pii_detection_input(self, pii_detection_input):
        """Sets the pii_detection_input of this GenerativefirewallIndividualRulesConfig.


        :param pii_detection_input: The pii_detection_input of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallPiiDetectionRuleConfig
        """

        self._pii_detection_input = pii_detection_input

    @property
    def pii_detection_output(self):
        """Gets the pii_detection_output of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The pii_detection_output of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallPiiDetectionRuleConfig
        """
        return self._pii_detection_output

    @pii_detection_output.setter
    def pii_detection_output(self, pii_detection_output):
        """Sets the pii_detection_output of this GenerativefirewallIndividualRulesConfig.


        :param pii_detection_output: The pii_detection_output of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallPiiDetectionRuleConfig
        """

        self._pii_detection_output = pii_detection_output

    @property
    def denial_of_service_input(self):
        """Gets the denial_of_service_input of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The denial_of_service_input of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallDenialOfServiceRuleConfig
        """
        return self._denial_of_service_input

    @denial_of_service_input.setter
    def denial_of_service_input(self, denial_of_service_input):
        """Sets the denial_of_service_input of this GenerativefirewallIndividualRulesConfig.


        :param denial_of_service_input: The denial_of_service_input of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallDenialOfServiceRuleConfig
        """

        self._denial_of_service_input = denial_of_service_input

    @property
    def denial_of_service_output(self):
        """Gets the denial_of_service_output of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The denial_of_service_output of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallDenialOfServiceRuleConfig
        """
        return self._denial_of_service_output

    @denial_of_service_output.setter
    def denial_of_service_output(self, denial_of_service_output):
        """Sets the denial_of_service_output of this GenerativefirewallIndividualRulesConfig.


        :param denial_of_service_output: The denial_of_service_output of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallDenialOfServiceRuleConfig
        """

        self._denial_of_service_output = denial_of_service_output

    @property
    def unknown_external_source(self):
        """Gets the unknown_external_source of this GenerativefirewallIndividualRulesConfig.  # noqa: E501


        :return: The unknown_external_source of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :rtype: GenerativefirewallUnknownExternalSourceRuleConfig
        """
        return self._unknown_external_source

    @unknown_external_source.setter
    def unknown_external_source(self, unknown_external_source):
        """Sets the unknown_external_source of this GenerativefirewallIndividualRulesConfig.


        :param unknown_external_source: The unknown_external_source of this GenerativefirewallIndividualRulesConfig.  # noqa: E501
        :type: GenerativefirewallUnknownExternalSourceRuleConfig
        """

        self._unknown_external_source = unknown_external_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallIndividualRulesConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallIndividualRulesConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
