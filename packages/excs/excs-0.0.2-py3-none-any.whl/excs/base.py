# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_base.ipynb.

# %% auto 0
__all__ = ['Except']

# %% ../nbs/02_base.ipynb 6
from inspect import signature as getsig, getfullargspec as getspec, isclass
from functools import wraps, singledispatch

# %% ../nbs/02_base.ipynb 8
from types import TracebackType
from typing import Self, Type, TypeVar, ParamSpec, Callable

# %% ../nbs/02_base.ipynb 10
#| export

# %% ../nbs/02_base.ipynb 12
#| export


# %% ../nbs/02_base.ipynb 14
from .type import P, E
from .meta import ExceptionMeta

# %% ../nbs/02_base.ipynb 16
class Except(Exception, metaclass=ExceptionMeta):
    '''
    A base exception class for creating custom exceptions.

    Except exceptions can be used as a mixin or as a decorator to make other 
    exceptions have Except properties.


    Methods
    -------
    call(self)
        Raises the exception if `__bool__` is `True`.

    __bool__(self)
        True by default.

    __enter__(self)
        Context manager entry method.

    __exit__(self, exc_type, exc_value, traceback)
        Context manager exit method. Suppresses the exception if hushed.
    '''
    
    def __init__(self, *args: P.args, **kwargs: P.kwargs):
        '''
        Initializes a new instance of the BaseException exception.

        Parameters
        ----------
        *args
            Positional arguments to be passed to the base Exception class.
        **kwargs
            Keyword arguments to be passed to the base Exception class.
        '''
        super().__init__(*args, **kwargs)

    def call(self: Self) -> Self:
        '''Raises the exception if the '__bool__()' evaluated to True.'''
        if self: raise self
        return self

    def __bool__(self):
        '''
        Determines the truth value of the Except instance.

        Returns
        -------
        bool
            Returns False if the exception is hushed (suppressed), True otherwise.
        '''
        return not getattr(self, 'hush', False)
    
    def __enter__(self: Self) -> Self:
        '''
        Entry method for the context manager.

        This method is called when entering a context managed by a Hushable instance.
        It does nothing special but allows the Hushable exception to be used with the
        'with' statement.
        '''
        # Context manager entry does nothing special
        return self

    def __exit__(self: Self, exc_type: type, exc_value: Exception, traceback: TracebackType) -> bool:
        '''
        Exit method for the context manager.

        This method is called when exiting a context managed by a Hushable instance.
        If the 'hush' attribute is True, it suppresses the exception; otherwise, it allows
        the exception to be raised.

        Parameters
        ----------
        exc_type : type
            The type of the exception being handled (if any).
        exc_value : Exception
            The exception instance being handled (if any).
        traceback : traceback
            A traceback object representing the point in the code where the exception occurred.

        Returns
        -------
        bool
            True to suppress the exception, False to allow it to be raised.
        '''
        # Suppress the exception if hush is True
        return not self

# %% ../nbs/02_base.ipynb 18
#| export
