# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_meta.ipynb.

# %% auto 0
__all__ = ['ExceptionMeta']

# %% ../nbs/01_meta.ipynb 6
from inspect import signature as getsig, getfullargspec as getspec, isclass
from functools import wraps, singledispatch

# %% ../nbs/01_meta.ipynb 8
from typing import Self, Type, TypeVar, ParamSpec, Callable

# %% ../nbs/01_meta.ipynb 10
#| export

# %% ../nbs/01_meta.ipynb 12
#| export


# %% ../nbs/01_meta.ipynb 14
from .type import P, E

# %% ../nbs/01_meta.ipynb 16
class ExceptionMeta(type):
    '''
    A metaclass for creating hushable exception classes.

    This metaclass allows the creation of exception classes that can be used both
    as regular exception classes and as decorators to make other exception classes
    hushable.

    Methods
    -------
    __new__(mcls: Type[Self], name: str, bases: tuple[type, ...], namespace: dict[str, Any]) -> Exception
        Called to create a new instance of the metaclass. Sets up the class.

    __call__(cls: Self, *args: P.args, **kwargs: P.kwargs) -> Exception:
        Overrides the normal behavior when the class is called. If used as a 
        decorator, it applies the hushable functionality; otherwise, it behaves 
        as a standard class constructor.

    decorate(cls: Self, kls: Exception) -> Exception:
        A decorator method that returns a new class combining the hushable functionality 
        with the provided class `kls`. This allows any exception class to become hushable.

    capture(cls: Self, call: Callable, *cargs: P.args, **ckwargs: P.kwargs) -> Callable
        A class method that returns a decorator. This decorator captures exceptions 
        thrown by the callable `call` and, based on the hush attribute, either suppresses 
        or raises the exception.
    '''
    def __new__(mcls: Type[Self], name: str, bases: tuple[type, ...], namespace: dict) -> E:
        '''
        Called to create a new instance of the metaclass.

        This method is invoked during the creation of classes that use the ExceptionMeta
        metaclass. It constructs and returns the new class object.

        Parameters
        ----------
        mcls : Type[Self]
            The metaclass instance.

        name : str
            The name of the class being constructed.

        bases : tuple[type, ...]
            A tuple of the base classes the class is derived from.

        namespace : dict
            A namespace dictionary containing the class's attributes.

        Returns
        -------
        A new class object with the given name, bases, and attributes.
        '''
        return super().__new__(mcls, name, bases, namespace)
    
    def __call__(cls: Self, *args: P.args, **kwargs: P.kwargs) -> E:
        '''
        Overrides the normal behavior when the class is called.

        This method is invoked when an attempt is made to instantiate classes of this metaclass,
        or when used as a decorator for another class. It either creates an instance of the class
        or applies the hushable functionality to another class.

        Parameters
        ----------
        *args : P.args
            Positional arguments passed to the class.

        **kwargs : P.kwargs
            Keyword arguments passed to the class.

        Returns
        -------
        An instance of the class or a modified class if used as a decorator.
        '''
        # Detect if being used as a decorator
        if len(args) == 1 and isclass(args[0]):
            return cls.decorate(args[0])
        return super().__call__(*args, **kwargs)
    
    def decorate(cls: Self, kls: E) -> E:
        '''
        A decorator method to add hushable functionality to an existing exception class.

        Parameters
        ----------
        cls : Self
            The metaclass instance.
            
        kls : E
            The class to which the hushable functionality is to be added.

        Returns
        -------
        A new class that inherits from both the provided class `kls` and the Hushable class.
        '''
        @wraps(kls, updated=())
        class WrappedException(kls, cls):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, **kwargs)
        return WrappedException
    
    def capture(cls: Self, call: Callable, *cargs: P.args, **ckwargs: P.kwargs) -> Callable:
        '''
        A class method that returns a decorator for capturing exceptions.

        This decorator captures exceptions thrown by the callable `call`. Based on the hush
        attribute of the exception class, it either suppresses or raises the exception.

        Parameters
        ----------
        call : Callable
            The callable whose exceptions are to be captured.

        *cargs : P.args
            Positional arguments to pass to the callable.
            
        **ckwargs : P.kwargs
            Keyword arguments to pass to the callable.

        Returns
        -------
        A decorator function that wraps the callable `call`.
        '''     
        @wraps(call)
        def captured(*args: P.args, **kwargs: P.kwargs):
            try:
                res = call(*cargs, **ckwargs)
                return res
            except Exception as e:
                err = cls(*args, **kwargs)
                if getattr(err, 'hush', False): return e
                raise e
        return captured

# %% ../nbs/01_meta.ipynb 18
#| export
