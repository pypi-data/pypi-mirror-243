# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_base.ipynb.

# %% auto 0
__all__ = ['Except']

# %% ../nbs/02_base.ipynb 6
from abc import abstractmethod
from inspect import signature as getsig, getfullargspec as getspec, isclass
from functools import wraps, singledispatch

# %% ../nbs/02_base.ipynb 8
from types import TracebackType
from typing import Self, Type, TypeVar, ParamSpec, Callable

# %% ../nbs/02_base.ipynb 10
#| export

# %% ../nbs/02_base.ipynb 12
#| export


# %% ../nbs/02_base.ipynb 14
from .type import P, E
from .meta import ExceptionMeta

# %% ../nbs/02_base.ipynb 16
class Except(Exception, metaclass=ExceptionMeta):
    '''
    A base exception class for creating custom exceptions.

    Except exceptions can be used as a mixin or as a decorator to make other 
    exceptions have Except properties.


    Methods
    -------
    call(self)
        Abstract Method to be overwritten for custom handling of 
        excepts and when to raise them. Default behavior is to the 
        same as `throw`.

    force(self)
        Raises the exception regardless of all else.
        
    throw(self)
        Raises the exception if '__bool__()' evaluated to True.

    __raise__(self)
        The `Except`'s truth value. Used by `__bool__` to determine
        if the exception should be raised.

    __bool__(self)
        True by default.

    __enter__(self)
        Context manager entry method.

    __exit__(self, exc_type, exc_value, traceback)
        Context manager exit method. Suppresses the exception if hushed.

    Notes
    -----
    The call chain is as follows:
        call -> throw --> __bool__ --> __raise__
    This gives the user two convenient points of customization:

    `__raise__` 
        While one could shortcut `__raise__` and directly overwrite `__bool__`, `__raise__` is both more 
        semantic for what it does and since `__bool__` just calls `__raise__`, this still allows for the convenince
        of `if self: self.force()`.

    `call` 
        Overwriting call gives more complex control over when the exception is raised. By default `call` is the same 
        as `throw`, which checks the `__bool__` to determine if the exception should be raised. The use of both `__raise__`
        and `call` affords some extra flexibility.

    
    Since `throw` checks `__bool__` to determine if the exception should be raised, users need only concern themselves 
    with `__raise__` and `call`.

    As a last resort, `force` can be used to raise the exception regardless of all else.
    '''
    
    def __init__(self, *args: P.args, **kwargs: P.kwargs):
        '''
        Initializes a new instance of the BaseException exception.

        Parameters
        ----------
        *args
            Positional arguments to be passed to the base Exception class.
        **kwargs
            Keyword arguments to be passed to the base Exception class.
        '''
        super().__init__(*args)

    def force(self: Self) -> None:
        '''Raises the exception regardless of all else'''
        raise self

    def throw(self: Self) -> None:
        '''Raises the exception if the '__bool__()' evaluated to True.'''
        if self: self.force()
        return self
        
    @abstractmethod
    def call(self: Self) -> Self:
        '''Abstract Method to be overwritten for custom handling of 
        `Except`s and when to raise them. Default behavior is to the same as `throw`.
        
        See Also
        --------
        Except.throw : Raises the exception if the '__bool__()' evaluated to True.
        '''
        return self.throw()
    
    @abstractmethod
    def __raise__(self: Self) -> Self:
        '''Abstract Method to be overwritten for custom handling of 
        `Except`s and when to raise them. `__bool__` checks the the value of `__raise__` to determine 
        if the exception should be raised.'''
        return not getattr(self, 'hush', False)

    def __bool__(self):
        '''
        Determines the truth value of the Except instance.

        Returns
        -------
        bool
            Returns False if the exception is hushed (suppressed), True otherwise.
        '''
        if callable((state := getattr(self, '__raise__', True))): return state()
        return bool(state)
    
    def __enter__(self: Self) -> Self:
        '''
        Entry method for the context manager.

        This method is called when entering a context managed by a Hushable instance.
        It does nothing special but allows the Hushable exception to be used with the
        'with' statement.
        '''
        # Context manager entry does nothing special
        return self

    def __exit__(self: Self, exc_type: type, exc_value: Exception, traceback: TracebackType) -> bool:
        '''
        Exit method for the context manager.

        This method is called when exiting a context managed by a Hushable instance.
        If the 'hush' attribute is True, it suppresses the exception; otherwise, it allows
        the exception to be raised.

        Parameters
        ----------
        exc_type : type
            The type of the exception being handled (if any).
        exc_value : Exception
            The exception instance being handled (if any).
        traceback : traceback
            A traceback object representing the point in the code where the exception occurred.

        Returns
        -------
        bool
            True to suppress the exception, False to allow it to be raised.
        '''
        # Suppress the exception if hush is True
        return not self

# %% ../nbs/02_base.ipynb 18
#| export
