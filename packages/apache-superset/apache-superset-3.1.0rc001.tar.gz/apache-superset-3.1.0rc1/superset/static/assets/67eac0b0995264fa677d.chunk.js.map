{"version":3,"file":"67eac0b0995264fa677d.chunk.js","mappings":"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","sources":["webpack://superset/./src/pages/DatabaseList/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  getExtensionsRegistry,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport rison from 'rison';\nimport { useSelector } from 'react-redux';\nimport { useQueryParams, BooleanParam } from 'use-query-params';\nimport { LocalStorageKeys, setItem } from 'src/utils/localStorageHelpers';\n\nimport Loading from 'src/components/Loading';\nimport { useListViewResource } from 'src/views/CRUD/hooks';\nimport { createErrorHandler, uploadUserPerms } from 'src/views/CRUD/utils';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport DeleteModal from 'src/components/DeleteModal';\nimport { getUrlParam } from 'src/utils/urlUtils';\nimport { URL_PARAMS } from 'src/constants';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons from 'src/components/Icons';\nimport { isUserAdmin } from 'src/dashboard/util/permissionUtils';\nimport ListView, { FilterOperator, Filters } from 'src/components/ListView';\nimport handleResourceExport from 'src/utils/export';\nimport { ExtensionConfigs } from 'src/features/home/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport type { MenuObjectProps } from 'src/types/bootstrapTypes';\nimport DatabaseModal from 'src/features/databases/DatabaseModal';\nimport { DatabaseObject } from 'src/features/databases/types';\n\nconst extensionsRegistry = getExtensionsRegistry();\nconst DatabaseDeleteRelatedExtension = extensionsRegistry.get(\n  'database.delete.related',\n);\nconst dbConfigExtraExtension = extensionsRegistry.get(\n  'databaseconnection.extraOption',\n);\n\nconst PAGE_SIZE = 25;\n\ninterface DatabaseDeleteObject extends DatabaseObject {\n  chart_count: number;\n  dashboard_count: number;\n  sqllab_tab_count: number;\n}\ninterface DatabaseListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n}\n\nconst IconCheck = styled(Icons.Check)`\n  color: ${({ theme }) => theme.colors.grayscale.dark1};\n`;\n\nconst IconCancelX = styled(Icons.CancelX)`\n  color: ${({ theme }) => theme.colors.grayscale.light1};\n`;\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n\n  .action-button {\n    display: inline-block;\n    height: 100%;\n  }\n`;\n\nfunction BooleanDisplay({ value }: { value: Boolean }) {\n  return value ? <IconCheck /> : <IconCancelX />;\n}\n\nfunction DatabaseList({ addDangerToast, addSuccessToast }: DatabaseListProps) {\n  const {\n    state: {\n      loading,\n      resourceCount: databaseCount,\n      resourceCollection: databases,\n    },\n    hasPerm,\n    fetchData,\n    refreshData,\n  } = useListViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n  );\n  const user = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const showDatabaseModal = getUrlParam(URL_PARAMS.showDatabaseModal);\n\n  const [query, setQuery] = useQueryParams({\n    databaseAdded: BooleanParam,\n  });\n\n  const [databaseModalOpen, setDatabaseModalOpen] = useState<boolean>(\n    showDatabaseModal || false,\n  );\n  const [databaseCurrentlyDeleting, setDatabaseCurrentlyDeleting] =\n    useState<DatabaseDeleteObject | null>(null);\n  const [currentDatabase, setCurrentDatabase] = useState<DatabaseObject | null>(\n    null,\n  );\n  const [allowUploads, setAllowUploads] = useState<boolean>(false);\n  const isAdmin = isUserAdmin(user);\n  const showUploads = allowUploads || isAdmin;\n\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const { roles } = user;\n  const {\n    CSV_EXTENSIONS,\n    COLUMNAR_EXTENSIONS,\n    EXCEL_EXTENSIONS,\n    ALLOWED_EXTENSIONS,\n  } = useSelector<any, ExtensionConfigs>(state => state.common.conf);\n\n  useEffect(() => {\n    if (query?.databaseAdded) {\n      setQuery({ databaseAdded: undefined });\n      refreshData();\n    }\n  }, [query, setQuery, refreshData]);\n\n  const openDatabaseDeleteModal = (database: DatabaseObject) =>\n    SupersetClient.get({\n      endpoint: `/api/v1/database/${database.id}/related_objects/`,\n    })\n      .then(({ json = {} }) => {\n        setDatabaseCurrentlyDeleting({\n          ...database,\n          chart_count: json.charts.count,\n          dashboard_count: json.dashboards.count,\n          sqllab_tab_count: json.sqllab_tab_states.count,\n        });\n      })\n      .catch(\n        createErrorHandler(errMsg =>\n          t(\n            'An error occurred while fetching database related data: %s',\n            errMsg,\n          ),\n        ),\n      );\n\n  function handleDatabaseDelete(database: DatabaseObject) {\n    const { id, database_name: dbName } = database;\n    SupersetClient.delete({\n      endpoint: `/api/v1/database/${id}`,\n    }).then(\n      () => {\n        refreshData();\n        addSuccessToast(t('Deleted: %s', dbName));\n\n        // Remove any extension-related data\n        if (dbConfigExtraExtension?.onDelete) {\n          dbConfigExtraExtension.onDelete(database);\n        }\n\n        // Delete user-selected db from local storage\n        setItem(LocalStorageKeys.db, null);\n\n        // Close delete modal\n        setDatabaseCurrentlyDeleting(null);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(t('There was an issue deleting %s: %s', dbName, errMsg)),\n      ),\n    );\n  }\n\n  function handleDatabaseEditModal({\n    database = null,\n    modalOpen = false,\n  }: { database?: DatabaseObject | null; modalOpen?: boolean } = {}) {\n    // Set database and modal\n    setCurrentDatabase(database);\n    setDatabaseModalOpen(modalOpen);\n  }\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport =\n    hasPerm('can_export') && isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT);\n\n  const { canUploadCSV, canUploadColumnar, canUploadExcel } = uploadUserPerms(\n    roles,\n    CSV_EXTENSIONS,\n    COLUMNAR_EXTENSIONS,\n    EXCEL_EXTENSIONS,\n    ALLOWED_EXTENSIONS,\n  );\n\n  const isDisabled = isAdmin && !allowUploads;\n\n  const uploadDropdownMenu = [\n    {\n      label: t('Upload file to database'),\n      childs: [\n        {\n          label: t('Upload CSV'),\n          name: 'Upload CSV file',\n          url: '/csvtodatabaseview/form',\n          perm: canUploadCSV && showUploads,\n          disable: isDisabled,\n        },\n        {\n          label: t('Upload columnar file'),\n          name: 'Upload columnar file',\n          url: '/columnartodatabaseview/form',\n          perm: canUploadColumnar && showUploads,\n          disable: isDisabled,\n        },\n        {\n          label: t('Upload Excel file'),\n          name: 'Upload Excel file',\n          url: '/exceltodatabaseview/form',\n          perm: canUploadExcel && showUploads,\n          disable: isDisabled,\n        },\n      ],\n    },\n  ];\n\n  const hasFileUploadEnabled = () => {\n    const payload = {\n      filters: [\n        { col: 'allow_file_upload', opr: 'upload_is_enabled', value: true },\n      ],\n    };\n    SupersetClient.get({\n      endpoint: `/api/v1/database/?q=${rison.encode(payload)}`,\n    }).then(({ json }: Record<string, any>) => {\n      // There might be some existings Gsheets and Clickhouse DBs\n      // with allow_file_upload set as True which is not possible from now on\n      const allowedDatabasesWithFileUpload =\n        json?.result?.filter(\n          (database: any) => database?.engine_information?.supports_file_upload,\n        ) || [];\n      setAllowUploads(allowedDatabasesWithFileUpload?.length >= 1);\n    });\n  };\n\n  useEffect(() => hasFileUploadEnabled(), [databaseModalOpen]);\n\n  const filteredDropDown = uploadDropdownMenu.reduce((prev, cur) => {\n    // eslint-disable-next-line no-param-reassign\n    cur.childs = cur.childs.filter(item => item.perm);\n    if (!cur.childs.length) return prev;\n    prev.push(cur);\n    return prev;\n  }, [] as MenuObjectProps[]);\n\n  const menuData: SubMenuProps = {\n    activeChild: 'Databases',\n    dropDownLinks: filteredDropDown,\n    name: t('Databases'),\n  };\n\n  if (canCreate) {\n    menuData.buttons = [\n      {\n        'data-test': 'btn-create-database',\n        name: (\n          <>\n            <i className=\"fa fa-plus\" /> {t('Database')}{' '}\n          </>\n        ),\n        buttonStyle: 'primary',\n        onClick: () => {\n          // Ensure modal will be opened in add mode\n          handleDatabaseEditModal({ modalOpen: true });\n        },\n      },\n    ];\n  }\n\n  function handleDatabaseExport(database: DatabaseObject) {\n    if (database.id === undefined) {\n      return;\n    }\n\n    handleResourceExport('database', [database.id], () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  }\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'database_name',\n        Header: t('Database'),\n      },\n      {\n        accessor: 'backend',\n        Header: t('Backend'),\n        size: 'lg',\n        disableSortBy: true, // TODO: api support for sorting by 'backend'\n      },\n      {\n        accessor: 'allow_run_async',\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_run_async: allowRunAsync },\n          },\n        }: {\n          row: { original: { allow_run_async: boolean } };\n        }) => <BooleanDisplay value={allowRunAsync} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_dml',\n        Header: (\n          <Tooltip\n            id=\"allow-dml-header-tooltip\"\n            title={t('Allow data manipulation language')}\n            placement=\"top\"\n          >\n            <span>{t('DML')}</span>\n          </Tooltip>\n        ),\n        Cell: ({\n          row: {\n            original: { allow_dml: allowDML },\n          },\n        }: any) => <BooleanDisplay value={allowDML} />,\n        size: 'sm',\n      },\n      {\n        accessor: 'allow_file_upload',\n        Header: t('CSV upload'),\n        Cell: ({\n          row: {\n            original: { allow_file_upload: allowFileUpload },\n          },\n        }: any) => <BooleanDisplay value={allowFileUpload} />,\n        size: 'md',\n      },\n      {\n        accessor: 'expose_in_sqllab',\n        Header: t('Expose in SQL Lab'),\n        Cell: ({\n          row: {\n            original: { expose_in_sqllab: exposeInSqllab },\n          },\n        }: any) => <BooleanDisplay value={exposeInSqllab} />,\n        size: 'md',\n      },\n      {\n        accessor: 'created_by',\n        disableSortBy: true,\n        Header: t('Created by'),\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => changedOn,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleEdit = () =>\n            handleDatabaseEditModal({ database: original, modalOpen: true });\n          const handleDelete = () => openDatabaseDeleteModal(original);\n          const handleExport = () => handleDatabaseExport(original);\n          if (!canEdit && !canDelete && !canExport) {\n            return null;\n          }\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <span\n                  role=\"button\"\n                  tabIndex={0}\n                  className=\"action-button\"\n                  data-test=\"database-delete\"\n                  onClick={handleDelete}\n                >\n                  <Tooltip\n                    id=\"delete-action-tooltip\"\n                    title={t('Delete database')}\n                    placement=\"bottom\"\n                  >\n                    <Icons.Trash />\n                  </Tooltip>\n                </span>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    data-test=\"database-edit\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete,\n        disableSortBy: true,\n      },\n    ],\n    [canDelete, canEdit, canExport],\n  );\n\n  const filters: Filters = useMemo(\n    () => [\n      {\n        Header: t('Expose in SQL Lab'),\n        key: 'expose_in_sql_lab',\n        id: 'expose_in_sqllab',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: (\n          <Tooltip\n            id=\"allow-run-async-filter-header-tooltip\"\n            title={t('Asynchronous query execution')}\n            placement=\"top\"\n          >\n            <span>{t('AQE')}</span>\n          </Tooltip>\n        ),\n        key: 'allow_run_async',\n        id: 'allow_run_async',\n        input: 'select',\n        operator: FilterOperator.equals,\n        unfilteredLabel: t('All'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Search'),\n        key: 'search',\n        id: 'database_name',\n        input: 'search',\n        operator: FilterOperator.contains,\n      },\n    ],\n    [],\n  );\n\n  return (\n    <>\n      <SubMenu {...menuData} />\n      <DatabaseModal\n        databaseId={currentDatabase?.id}\n        show={databaseModalOpen}\n        onHide={handleDatabaseEditModal}\n        onDatabaseAdd={() => {\n          refreshData();\n        }}\n      />\n      {databaseCurrentlyDeleting && (\n        <DeleteModal\n          description={\n            <>\n              <p>\n                {t(\n                  'The database %s is linked to %s charts that appear on %s dashboards and users have %s SQL Lab tabs using this database open. Are you sure you want to continue? Deleting the database will break those objects.',\n                  databaseCurrentlyDeleting.database_name,\n                  databaseCurrentlyDeleting.chart_count,\n                  databaseCurrentlyDeleting.dashboard_count,\n                  databaseCurrentlyDeleting.sqllab_tab_count,\n                )}\n              </p>\n              {DatabaseDeleteRelatedExtension && (\n                <DatabaseDeleteRelatedExtension\n                  database={databaseCurrentlyDeleting}\n                />\n              )}\n            </>\n          }\n          onConfirm={() => {\n            if (databaseCurrentlyDeleting) {\n              handleDatabaseDelete(databaseCurrentlyDeleting);\n            }\n          }}\n          onHide={() => setDatabaseCurrentlyDeleting(null)}\n          open\n          title={t('Delete Database?')}\n        />\n      )}\n\n      <ListView<DatabaseObject>\n        className=\"database-list-view\"\n        columns={columns}\n        count={databaseCount}\n        data={databases}\n        fetchData={fetchData}\n        filters={filters}\n        initialSort={initialSort}\n        loading={loading}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        refreshData={() => {}}\n        pageSize={PAGE_SIZE}\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DatabaseList);\n"],"names":["extensionsRegistry","getExtensionsRegistry","DatabaseDeleteRelatedExtension","get","dbConfigExtraExtension","IconCheck","styled","Icons","Check","_ref","theme","colors","grayscale","dark1","IconCancelX","CancelX","_ref2","light1","Actions","div","_ref3","base","BooleanDisplay","_ref4","value","___EmotionJSX","withToasts","_ref5","addDangerToast","addSuccessToast","state","loading","resourceCount","databaseCount","resourceCollection","databases","hasPerm","fetchData","refreshData","useListViewResource","t","user","useSelector","showDatabaseModal","getUrlParam","URL_PARAMS","query","setQuery","useQueryParams","databaseAdded","BooleanParam","databaseModalOpen","setDatabaseModalOpen","useState","databaseCurrentlyDeleting","setDatabaseCurrentlyDeleting","currentDatabase","setCurrentDatabase","allowUploads","setAllowUploads","isAdmin","isUserAdmin","showUploads","preparingExport","setPreparingExport","roles","CSV_EXTENSIONS","COLUMNAR_EXTENSIONS","EXCEL_EXTENSIONS","ALLOWED_EXTENSIONS","common","conf","handleDatabaseEditModal","_temp","database","modalOpen","useEffect","undefined","canCreate","canEdit","canDelete","canExport","isFeatureEnabled","FeatureFlag","VERSIONED_EXPORT","canUploadCSV","canUploadColumnar","canUploadExcel","uploadUserPerms","isDisabled","uploadDropdownMenu","label","childs","name","url","perm","disable","SupersetClient","endpoint","rison","filters","col","opr","then","_ref7","_json$result","json","allowedDatabasesWithFileUpload","result","filter","_database$engine_info","engine_information","supports_file_upload","length","menuData","activeChild","dropDownLinks","reduce","prev","cur","item","push","buttons","React","className","buttonStyle","onClick","columns","useMemo","accessor","Header","size","disableSortBy","Tooltip","id","title","placement","Cell","_ref8","row","original","allow_run_async","allowRunAsync","_ref9","allow_dml","allowDML","_ref10","allow_file_upload","allowFileUpload","_ref11","expose_in_sqllab","exposeInSqllab","_ref12","created_by","createdBy","first_name","last_name","_ref13","changed_on_delta_humanized","changedOn","_ref14","role","tabIndex","handleDelete","openDatabaseDeleteModal","_ref6","chart_count","charts","count","dashboard_count","dashboards","sqllab_tab_count","sqllab_tab_states","catch","createErrorHandler","errMsg","Trash","handleExport","handleResourceExport","Share","handleEdit","EditAlt","hidden","key","input","operator","FilterOperator","equals","unfilteredLabel","selects","contains","SubMenu","DatabaseModal","databaseId","show","onHide","onDatabaseAdd","DeleteModal","description","database_name","onConfirm","dbName","delete","onDelete","setItem","LocalStorageKeys","db","handleDatabaseDelete","open","ListView","data","initialSort","desc","pageSize","Loading"],"sourceRoot":""}