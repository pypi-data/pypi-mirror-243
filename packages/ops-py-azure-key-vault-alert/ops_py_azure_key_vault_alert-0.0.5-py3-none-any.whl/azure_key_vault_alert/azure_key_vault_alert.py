#!/usr/bin/env python

import os
import logging
import argparse
from azure_key_vault_report import azure_key_vault_report
from slack_alert import slack_alert


########################################################################################################################

if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)

    # The actual report will be posted to the webhook exported in
    # the following environment variable
    SLACK_WEBHOOK_REPORT = os.getenv("SLACK_WEBHOOK_REPORT")

    # When all the reports have been posted, an additional POST is performed
    # to the webhook exported in following environment variable:
    SLACK_WEBHOOK_NOTIFY = os.getenv("SLACK_WEBHOOK_NOTIFY")

    # The list of key vaults to check passed as command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--vaults", nargs='+',
                        help="List of key vaults to check. E.g. kv-dev kv-test")
    parser.add_argument("-e", "--expire_threshold", type=int,
                        help="If a value (int) is set. The days to the record's Expiration Date must be above "
                             "this threshold (Default: not set)")
    parser.add_argument("-i", "--ignore_no_expiration", action='store_true', default=True,
                        help="Ignore records which has no Expiration Date set (Default: True)")
    parser.add_argument("-a", "--include_all", action='store_true', default=False,
                        help="Include all records in output (verbose). (Default: False)")

    args = parser.parse_args()
    vaults = args.vaults
    expire_threshold = args.expire_threshold
    ignore_no_expiration = args.ignore_no_expiration
    include_all = args.include_all
    if not vaults:
        logging.error("No vaults specified.")
        exit(2)

    # If only one key vault to check, it is ensured that it is treated as a list
    if isinstance(vaults, str):
        vaults = [vaults]

    # 'success' variable initially set to False.
    # It will only be set to True if one more report POST to the specified 'SLACK_WEBHOOK_REPORT' webhook
    # has return code 200
    # Only if True, the additional 'SLACK_WEBHOOK_NOTIFY' will be triggered.
    success = False

    # Post each report to the specified SLACK_WEBHOOK_REPORT
    for vault in vaults:
        # The report is generated by using the pip package ops-py-azure-key-vault-report
        kv_report = azure_key_vault_report.AzureKeyVaultReport(vault)
        kv_report.az_cmd()
        kv_report.parse_results()
        kv_report.set_report_header()
        kv_report.plaintext_report(expire_threshold=90, ignore_no_expiration=True, include_all=False)
        kv_report.set_report_footer()
        report = kv_report.get_report()

        if not SLACK_WEBHOOK_REPORT:
            logging.warning("'SLACK_WEBHOOK_REPORT' not provided. "
                            f"'{vault}' report not be sent to Slack.")

        # The report is posted to Slack by using the pip package ops-py-slack-alert
        alert = slack_alert.SlackAlert(SLACK_WEBHOOK_REPORT)
        alert.set_payload(Title=vault, Text=report)
        alert.post_payload()
        response_code = alert.get_response_code()

        if isinstance(response_code, int) and response_code == 200:
            success = True

    # If success and 'SLACK_WEBHOOK_NOTIFY' provided
    # an additional notify will be posted to the 'SLACK_WEBHOOK_NOTIFY' webhook
    if success and SLACK_WEBHOOK_NOTIFY:
        logging.info(f"Trigger alert about new slack message(s)...")
        alert = slack_alert.SlackAlert(SLACK_WEBHOOK_NOTIFY)
        alert.post_payload()
