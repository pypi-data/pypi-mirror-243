# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import connector_pb2 as connector__pb2


class ConnectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Dispatcher = channel.unary_stream(
                '/connector.connector.ConnectorService/Dispatcher',
                request_serializer=connector__pb2.DispatcherRequest.SerializeToString,
                response_deserializer=connector__pb2.DispatcherResponse.FromString,
                )
        self.Connectors = channel.unary_unary(
                '/connector.connector.ConnectorService/Connectors',
                request_serializer=connector__pb2.ConnectorsRequest.SerializeToString,
                response_deserializer=connector__pb2.ConnectorsResponse.FromString,
                )
        self.Connector = channel.unary_unary(
                '/connector.connector.ConnectorService/Connector',
                request_serializer=connector__pb2.ConnectorRequest.SerializeToString,
                response_deserializer=connector__pb2.ConnectorResponse.FromString,
                )


class ConnectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Dispatcher(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Dispatcher': grpc.unary_stream_rpc_method_handler(
                    servicer.Dispatcher,
                    request_deserializer=connector__pb2.DispatcherRequest.FromString,
                    response_serializer=connector__pb2.DispatcherResponse.SerializeToString,
            ),
            'Connectors': grpc.unary_unary_rpc_method_handler(
                    servicer.Connectors,
                    request_deserializer=connector__pb2.ConnectorsRequest.FromString,
                    response_serializer=connector__pb2.ConnectorsResponse.SerializeToString,
            ),
            'Connector': grpc.unary_unary_rpc_method_handler(
                    servicer.Connector,
                    request_deserializer=connector__pb2.ConnectorRequest.FromString,
                    response_serializer=connector__pb2.ConnectorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'connector.connector.ConnectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Dispatcher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/connector.connector.ConnectorService/Dispatcher',
            connector__pb2.DispatcherRequest.SerializeToString,
            connector__pb2.DispatcherResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connector.connector.ConnectorService/Connectors',
            connector__pb2.ConnectorsRequest.SerializeToString,
            connector__pb2.ConnectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/connector.connector.ConnectorService/Connector',
            connector__pb2.ConnectorRequest.SerializeToString,
            connector__pb2.ConnectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
