# flake8: noqa
# generated by datamodel-codegen:
#   filename:  openapi.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field


class AccessTokenResponse(BaseModel):
    access_token: str = Field(..., title="Access Token")
    token_type: Optional[str] = Field("bearer", title="Token Type")
    expires_in: int = Field(..., title="Expires In")
    expiration: Optional[int] = Field(None, title="Expiration")


class CheckProgressRequest(BaseModel):
    id: UUID = Field(..., title="Id")


class Status(Enum):
    running = "running"
    done = "done"


class CheckProgressResponse(BaseModel):
    id: UUID = Field(..., title="Id")
    status: Status = Field(..., title="Status")
    report: Optional[Any] = Field(None, title="Report")


class CheckStartRequest(BaseModel):
    s3_bucket: Optional[str] = Field(None, title="S3 Bucket")
    nfs_path: Optional[str] = Field(None, title="Nfs Path")
    package_environment: Optional[str] = Field(None, title="Package Environment")
    recipe_name: Optional[str] = Field(None, title="Recipe Name")
    recipe_args: Optional[Dict[str, Any]] = Field(None, title="Recipe Args")


class CheckStartResponse(BaseModel):
    id: UUID = Field(..., title="Id")


class Copying(BaseModel):
    src: str = Field(..., title="Src")
    dest: str = Field(..., title="Dest")
    make_dirs: bool = Field(..., title="Make Dirs")
    overwrite: bool = Field(..., title="Overwrite")


class Dataset(BaseModel):
    name: str = Field(
        ..., description="a unique name for the dataset", title="Dataset Name"
    )
    created: Optional[datetime] = Field(
        None,
        description="the date and time that the dataset was created",
        title="Created Time",
    )
    meta: Optional[str] = Field(
        "{}",
        description="An arbitrary JSON string containing metadata for your dataset",
        title="Dataset Metadata",
    )
    session: Optional[bool] = Field(
        False,
        description="True when the dataset contains examples for a user session",
        title="Session Dataset",
    )


class DatasetCreating(BaseModel):
    author: Optional[str] = Field(
        "", description="the user that authored created dataset", title="Dataset Author"
    )
    description: Optional[str] = Field(
        "",
        description="human readable description of what kind of examples the dataset contains",
        title="Dataset Description",
    )
    created: Optional[datetime] = Field(
        None,
        description="the date and time that the dataset was created",
        title="Created Time",
    )
    name: str = Field(
        ..., description="a unique name for the dataset", title="Dataset Name"
    )


class DatasetExample(BaseModel):
    id: int = Field(..., description="The database id", ge=1, title="Id")
    input_hash: int = Field(
        ..., description="The hash value of the input", title="Input Hash"
    )
    task_hash: int = Field(
        ..., description="The hash value of the task", title="Task Hash"
    )
    content: Dict[str, Any] = Field(
        ..., description="The dict content of the example", title="Content"
    )


class Deleting(BaseModel):
    path: str = Field(..., title="Path")
    missing_ok: Optional[bool] = Field(True, title="Missing Ok")
    recurse: Optional[bool] = Field(False, title="Recurse")


class Downloading(BaseModel):
    target: str = Field(..., title="Target")


class EnvCreateStatus(BaseModel):
    package_name: str = Field(..., title="Package Name")
    package_version: str = Field(..., title="Package Version")
    python_version: str = Field(..., title="Python Version")
    path: str = Field(..., title="Path")
    job_id: str = Field(..., title="Job Id")
    eval_id: str = Field(..., title="Eval Id")
    is_ready: bool = Field(..., title="Is Ready")
    alloc_id: Optional[str] = Field(None, title="Alloc Id")
    status: Optional[str] = Field(None, title="Status")
    logs: Optional[str] = Field(None, title="Logs")


class FileCopyPlan(BaseModel):
    src: str = Field(..., title="Src")
    dest: str = Field(..., title="Dest")


class FileStats(BaseModel):
    size: int = Field(..., title="Size")
    modification_time: datetime = Field(..., title="Modification Time")


class Action(Enum):
    start = "start"
    stop = "stop"
    delete = "delete"


class JobLogRequest(BaseModel):
    id: UUID = Field(..., title="Id")
    offset: Optional[int] = Field(0, title="Offset")


class JobLogResponse(BaseModel):
    text: Optional[str] = Field(None, title="Text")


class JobType(Enum):
    task = "task"
    action = "action"


class Listing(BaseModel):
    path: str = Field(..., title="Path")
    recurse: bool = Field(..., title="Recurse")
    include_stats: Optional[bool] = Field(False, title="Include Stats")


class NomadErrorResponse(BaseModel):
    status_code: int = Field(..., title="Status Code")
    body: str = Field(..., title="Body")
    url: str = Field(..., title="Url")
    method: str = Field(..., title="Method")


class NomadJobActionResponse(BaseModel):
    action: str = Field(..., title="Action")
    job_id: UUID = Field(..., title="Job Id")
    eval_id: Optional[UUID] = Field(None, title="Eval Id")
    eval_create_index: Optional[int] = Field(None, title="Eval Create Index")
    job_modify_index: Optional[int] = Field(None, title="Job Modify Index")


class PageDatasetExample(BaseModel):
    items: List[DatasetExample] = Field(..., title="Items")
    total: int = Field(..., ge=0, title="Total")
    page: int = Field(..., ge=1, title="Page")
    size: int = Field(..., ge=1, title="Size")


class PageStr(BaseModel):
    items: List[str] = Field(..., title="Items")
    total: int = Field(..., ge=0, title="Total")
    page: int = Field(..., ge=1, title="Page")
    size: int = Field(..., ge=1, title="Size")


class PamErrorResponse(BaseModel):
    status_code: int = Field(..., title="Status Code")
    body: str = Field(..., title="Body")
    url: str = Field(..., title="Url")
    method: str = Field(..., title="Method")


class PathList(BaseModel):
    paths: List[str] = Field(..., title="Paths")
    stats: Optional[List[FileStats]] = Field(None, title="Stats")
    exists: bool = Field(..., title="Exists")
    is_file: bool = Field(..., title="Is File")


class ReadExamplesRequest(BaseModel):
    datasets: List[str] = Field(..., title="Datasets")


class RecipesMeta(BaseModel):
    recipes: List = Field(..., title="Recipes")


class Requirement(BaseModel):
    name: str = Field(..., title="Name")
    specifier: Optional[str] = Field(None, title="Specifier")
    url: Optional[str] = Field(None, title="Url")
    extras: Optional[List[str]] = Field(None, title="Extras")
    marker: Optional[str] = Field(None, title="Marker")


class RsyncPlan(BaseModel):
    copy_: List[FileCopyPlan] = Field(..., title="Copy ")
    delete: List[str] = Field(..., title="Delete")
    file_exists: List[str] = Field(..., title="File Exists")
    directory_missing: List[str] = Field(..., title="Directory Missing")


class Secret(BaseModel):
    key: str = Field(..., title="Key")
    value: Dict[str, Any] = Field(..., title="Value")


class SecretReading(BaseModel):
    key: str = Field(..., title="Key")


class SecretResponse(BaseModel):
    CreateIndex: int = Field(..., title="Createindex")
    ModifyIndex: int = Field(..., title="Modifyindex")
    LockIndex: int = Field(..., title="Lockindex")
    Key: str = Field(..., title="Key")
    Flags: int = Field(..., title="Flags")
    Value: str = Field(..., title="Value")


class SessionTokenReturning(BaseModel):
    session_id: UUID = Field(..., title="Session Id")
    user_id: UUID = Field(..., title="User Id")
    task_id: UUID = Field(..., title="Task Id")
    prodigy_token: Optional[str] = Field(None, title="Prodigy Token")


class SpecValidationFailure(BaseModel):
    message: str = Field(..., title="Message")
    errors: List[Dict[str, Any]] = Field(..., title="Errors")


class Statting(BaseModel):
    path: str = Field(..., title="Path")


class StatusModel(Enum):
    Ready = "Ready"
    Error = "Error"


class TasksBaseUrl(BaseModel):
    url: str = Field(..., title="Url")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class BodyApiV1UploadFileApiV1FilesUploadPost(BaseModel):
    file: bytes = Field(..., description="File to Upload with valid name", title="File")


class CopyPlan(BaseModel):
    copy_: List[FileCopyPlan] = Field(..., title="Copy ")
    file_exists: List[str] = Field(..., title="File Exists")
    directory_missing: List[str] = Field(..., title="Directory Missing")


class EnvCreate(BaseModel):
    package_path: str = Field(..., title="Package Path")
    is_dist_package: bool = Field(..., title="Is Dist Package")
    requirements_txt: Optional[str] = Field(None, title="Requirements Txt")
    requirements: Optional[List[Requirement]] = Field(None, title="Requirements")
    deps: Optional[List[str]] = Field([], title="Deps")


class EnvCreateResponse(BaseModel):
    status: Optional[EnvCreateStatus] = None
    validation_error: Optional[SpecValidationFailure] = None
    nomad_error: Optional[NomadErrorResponse] = None


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class HealthCheck(BaseModel):
    status: StatusModel
    cluster: StatusModel
    nomad_error: Optional[NomadErrorResponse] = None


class JobActionResponse(BaseModel):
    job_id: UUID = Field(..., title="Job Id")
    attempt_id: Optional[UUID] = Field(None, title="Attempt Id")
    status: str = Field(..., title="Status")
    action: Action = Field(..., title="Action")
    job_type: JobType
    pam_error: Optional[PamErrorResponse] = None
    validation_error: Optional[SpecValidationFailure] = None
    nomad_error: Optional[NomadErrorResponse] = None
    nomad_change: Optional[NomadJobActionResponse] = None


class JobID(BaseModel):
    id: UUID = Field(..., title="Id")
    job_type: JobType
