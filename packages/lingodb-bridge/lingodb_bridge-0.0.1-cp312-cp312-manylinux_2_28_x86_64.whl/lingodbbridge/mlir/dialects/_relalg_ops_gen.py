
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import extend_opview_class as _ods_extend_opview_class, segmented_accessor as _ods_segmented_accessor, equally_sized_accessor as _ods_equally_sized_accessor, get_default_loc_context as _ods_get_default_loc_context, get_op_result_or_value as _get_op_result_or_value, get_op_results_or_values as _get_op_results_or_values
_ods_ir = _ods_cext.ir

try:
  from . import _relalg_ops_ext as _ods_ext_module
except ImportError:
  _ods_ext_module = None

import builtins


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "relalg"
  pass


@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AggrFuncOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.aggrfn"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, fn, rel, attr, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["fn"] = (fn if (
    issubclass(type(fn), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('RelAlg_AggrFunc')) else
      _ods_ir.AttrBuilder.get('RelAlg_AggrFunc')(fn, context=_ods_context))
    attributes["attr"] = (attr if (
    issubclass(type(attr), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ColumnRefAttr')) else
      _ods_ir.AttrBuilder.get('ColumnRefAttr')(attr, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def fn(self):
    return self.operation.attributes["fn"]

  @fn.setter
  def fn(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["fn"] = value

  @builtins.property
  def attr(self):
    return self.operation.attributes["attr"]

  @attr.setter
  def attr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["attr"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AggregationOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.aggregation"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, rel, group_by_cols, computed_cols, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["group_by_cols"] = (group_by_cols if (
    issubclass(type(group_by_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(group_by_cols, context=_ods_context))
    attributes["computed_cols"] = (computed_cols if (
    issubclass(type(computed_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(computed_cols, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def group_by_cols(self):
    return self.operation.attributes["group_by_cols"]

  @group_by_cols.setter
  def group_by_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["group_by_cols"] = value

  @builtins.property
  def computed_cols(self):
    return self.operation.attributes["computed_cols"]

  @computed_cols.setter
  def computed_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["computed_cols"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def aggr_func(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class AntiSemiJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.antisemijoin"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, left, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class BaseTableOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.basetable"

  _ODS_REGIONS = (0, True)

  def __init__(self, table_identifier, meta, columns, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["table_identifier"] = (table_identifier if (
    issubclass(type(table_identifier), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(table_identifier, context=_ods_context))
    attributes["meta"] = (meta if (
    issubclass(type(meta), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TableMetaDataAttr')) else
      _ods_ir.AttrBuilder.get('TableMetaDataAttr')(meta, context=_ods_context))
    attributes["columns"] = (columns if (
    issubclass(type(columns), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('DictionaryAttr')) else
      _ods_ir.AttrBuilder.get('DictionaryAttr')(columns, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def table_identifier(self):
    return self.operation.attributes["table_identifier"]

  @table_identifier.setter
  def table_identifier(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["table_identifier"] = value

  @builtins.property
  def meta(self):
    return self.operation.attributes["meta"]

  @meta.setter
  def meta(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["meta"] = value

  @builtins.property
  def columns(self):
    return self.operation.attributes["columns"]

  @columns.setter
  def columns(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["columns"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CollectionJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.collectionjoin"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, cols, collAttr, left, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["cols"] = (cols if (
    issubclass(type(cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(cols, context=_ods_context))
    attributes["collAttr"] = (collAttr if (
    issubclass(type(collAttr), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ColumnDefAttr')) else
      _ods_ir.AttrBuilder.get('ColumnDefAttr')(collAttr, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def cols(self):
    return self.operation.attributes["cols"]

  @cols.setter
  def cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["cols"] = value

  @builtins.property
  def collAttr(self):
    return self.operation.attributes["collAttr"]

  @collAttr.setter
  def collAttr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["collAttr"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ConstRelationOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.const_relation"

  _ODS_REGIONS = (0, True)

  def __init__(self, columns, values, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["columns"] = (columns if (
    issubclass(type(columns), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(columns, context=_ods_context))
    attributes["values"] = (values if (
    issubclass(type(values), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(values, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def columns(self):
    return self.operation.attributes["columns"]

  @columns.setter
  def columns(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["columns"] = value

  @builtins.property
  def values(self):
    return self.operation.attributes["values"]

  @values.setter
  def values(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["values"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CountRowsOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.count"

  _ODS_REGIONS = (0, True)

  def __init__(self, rel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class CrossProductOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.crossproduct"

  _ODS_REGIONS = (0, True)

  def __init__(self, left, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExceptOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.except"

  _ODS_REGIONS = (0, True)

  def __init__(self, set_semantic, left, right, mapping, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["set_semantic"] = (set_semantic if (
    issubclass(type(set_semantic), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('RelAlg_SetSemantic')) else
      _ods_ir.AttrBuilder.get('RelAlg_SetSemantic')(set_semantic, context=_ods_context))
    attributes["mapping"] = (mapping if (
    issubclass(type(mapping), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(mapping, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def set_semantic(self):
    return self.operation.attributes["set_semantic"]

  @set_semantic.setter
  def set_semantic(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["set_semantic"] = value

  @builtins.property
  def mapping(self):
    return self.operation.attributes["mapping"]

  @mapping.setter
  def mapping(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mapping"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ExistsOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.exists"

  _ODS_REGIONS = (0, True)

  def __init__(self, rel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class FullOuterJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.fullouterjoin"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, left, right, mapping, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mapping"] = (mapping if (
    issubclass(type(mapping), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(mapping, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def mapping(self):
    return self.operation.attributes["mapping"]

  @mapping.setter
  def mapping(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mapping"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GetListOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.getlist"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, rel, cols, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["cols"] = (cols if (
    issubclass(type(cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(cols, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def cols(self):
    return self.operation.attributes["cols"]

  @cols.setter
  def cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["cols"] = value

  @builtins.property
  def res(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GetScalarOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.getscalar"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, attr, rel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["attr"] = (attr if (
    issubclass(type(attr), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ColumnRefAttr')) else
      _ods_ir.AttrBuilder.get('ColumnRefAttr')(attr, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def attr(self):
    return self.operation.attributes["attr"]

  @attr.setter
  def attr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["attr"] = value

  @builtins.property
  def res(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class GroupJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.groupjoin"

  _ODS_REGIONS = (3, True)

  def __init__(self, result, left, right, behavior, leftCols, rightCols, mapped_cols, computed_cols, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["behavior"] = (behavior if (
    issubclass(type(behavior), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('RelAlg_GroupJoinBehavior')) else
      _ods_ir.AttrBuilder.get('RelAlg_GroupJoinBehavior')(behavior, context=_ods_context))
    attributes["leftCols"] = (leftCols if (
    issubclass(type(leftCols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(leftCols, context=_ods_context))
    attributes["rightCols"] = (rightCols if (
    issubclass(type(rightCols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(rightCols, context=_ods_context))
    attributes["mapped_cols"] = (mapped_cols if (
    issubclass(type(mapped_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(mapped_cols, context=_ods_context))
    attributes["computed_cols"] = (computed_cols if (
    issubclass(type(computed_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(computed_cols, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def behavior(self):
    return self.operation.attributes["behavior"]

  @behavior.setter
  def behavior(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["behavior"] = value

  @builtins.property
  def leftCols(self):
    return self.operation.attributes["leftCols"]

  @leftCols.setter
  def leftCols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["leftCols"] = value

  @builtins.property
  def rightCols(self):
    return self.operation.attributes["rightCols"]

  @rightCols.setter
  def rightCols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["rightCols"] = value

  @builtins.property
  def mapped_cols(self):
    return self.operation.attributes["mapped_cols"]

  @mapped_cols.setter
  def mapped_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mapped_cols"] = value

  @builtins.property
  def computed_cols(self):
    return self.operation.attributes["computed_cols"]

  @computed_cols.setter
  def computed_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["computed_cols"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

  @builtins.property
  def map_func(self):
    return self.regions[1]

  @builtins.property
  def aggr_func(self):
    return self.regions[2]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.in"

  _ODS_REGIONS = (0, True)

  def __init__(self, val, rel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(val))
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def val(self):
    return self.operation.operands[0]

  @builtins.property
  def rel(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class InnerJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.join"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, left, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class IntersectOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.intersect"

  _ODS_REGIONS = (0, True)

  def __init__(self, set_semantic, left, right, mapping, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["set_semantic"] = (set_semantic if (
    issubclass(type(set_semantic), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('RelAlg_SetSemantic')) else
      _ods_ir.AttrBuilder.get('RelAlg_SetSemantic')(set_semantic, context=_ods_context))
    attributes["mapping"] = (mapping if (
    issubclass(type(mapping), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(mapping, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def set_semantic(self):
    return self.operation.attributes["set_semantic"]

  @set_semantic.setter
  def set_semantic(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["set_semantic"] = value

  @builtins.property
  def mapping(self):
    return self.operation.attributes["mapping"]

  @mapping.setter
  def mapping(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mapping"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class LimitOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.limit"

  _ODS_REGIONS = (0, True)

  def __init__(self, max_rows, rel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["max_rows"] = (max_rows if (
    issubclass(type(max_rows), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(max_rows, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def max_rows(self):
    return self.operation.attributes["max_rows"]

  @max_rows.setter
  def max_rows(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["max_rows"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MapOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.map"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, rel, computed_cols, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["computed_cols"] = (computed_cols if (
    issubclass(type(computed_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(computed_cols, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def computed_cols(self):
    return self.operation.attributes["computed_cols"]

  @computed_cols.setter
  def computed_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["computed_cols"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MarkJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.markjoin"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, markattr, left, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["markattr"] = (markattr if (
    issubclass(type(markattr), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ColumnDefAttr')) else
      _ods_ir.AttrBuilder.get('ColumnDefAttr')(markattr, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def markattr(self):
    return self.operation.attributes["markattr"]

  @markattr.setter
  def markattr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["markattr"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class MaterializeOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.materialize"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, rel, cols, columns, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["cols"] = (cols if (
    issubclass(type(cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(cols, context=_ods_context))
    attributes["columns"] = (columns if (
    issubclass(type(columns), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(columns, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def cols(self):
    return self.operation.attributes["cols"]

  @cols.setter
  def cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["cols"] = value

  @builtins.property
  def columns(self):
    return self.operation.attributes["columns"]

  @columns.setter
  def columns(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["columns"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class NestedOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.nested"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, inputs, used_cols, available_cols, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["used_cols"] = (used_cols if (
    issubclass(type(used_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(used_cols, context=_ods_context))
    attributes["available_cols"] = (available_cols if (
    issubclass(type(available_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(available_cols, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def used_cols(self):
    return self.operation.attributes["used_cols"]

  @used_cols.setter
  def used_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["used_cols"] = value

  @builtins.property
  def available_cols(self):
    return self.operation.attributes["available_cols"]

  @available_cols.setter
  def available_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["available_cols"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def nested_fn(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class OuterJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.outerjoin"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, left, right, mapping, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mapping"] = (mapping if (
    issubclass(type(mapping), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(mapping, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def mapping(self):
    return self.operation.attributes["mapping"]

  @mapping.setter
  def mapping(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mapping"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class ProjectionOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.projection"

  _ODS_REGIONS = (0, True)

  def __init__(self, set_semantic, rel, cols, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["set_semantic"] = (set_semantic if (
    issubclass(type(set_semantic), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('RelAlg_SetSemantic')) else
      _ods_ir.AttrBuilder.get('RelAlg_SetSemantic')(set_semantic, context=_ods_context))
    attributes["cols"] = (cols if (
    issubclass(type(cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(cols, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def set_semantic(self):
    return self.operation.attributes["set_semantic"]

  @set_semantic.setter
  def set_semantic(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["set_semantic"] = value

  @builtins.property
  def cols(self):
    return self.operation.attributes["cols"]

  @cols.setter
  def cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["cols"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RankOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.rank"

  _ODS_REGIONS = (0, True)

  def __init__(self, rel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class RenamingOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.renaming"

  _ODS_REGIONS = (0, True)

  def __init__(self, rel, columns, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["columns"] = (columns if (
    issubclass(type(columns), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(columns, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def columns(self):
    return self.operation.attributes["columns"]

  @columns.setter
  def columns(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["columns"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SelectionOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.selection"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, rel, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SemiJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.semijoin"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, left, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SingleJoinOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.singlejoin"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, left, right, mapping, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mapping"] = (mapping if (
    issubclass(type(mapping), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(mapping, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def mapping(self):
    return self.operation.attributes["mapping"]

  @mapping.setter
  def mapping(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mapping"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def predicate(self):
    return self.regions[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class SortOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.sort"

  _ODS_REGIONS = (0, True)

  def __init__(self, rel, sortspecs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["sortspecs"] = (sortspecs if (
    issubclass(type(sortspecs), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(sortspecs, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def sortspecs(self):
    return self.operation.attributes["sortspecs"]

  @sortspecs.setter
  def sortspecs(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sortspecs"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TmpOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.tmp"

  _ODS_REGIONS = (0, True)

  def __init__(self, resulting, rel, cols, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["cols"] = (cols if (
    issubclass(type(cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(cols, context=_ods_context))
    results.extend(resulting)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def cols(self):
    return self.operation.attributes["cols"]

  @cols.setter
  def cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["cols"] = value

  @builtins.property
  def resulting(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TopKOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.topk"

  _ODS_REGIONS = (0, True)

  def __init__(self, max_rows, rel, sortspecs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["max_rows"] = (max_rows if (
    issubclass(type(max_rows), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(max_rows, context=_ods_context))
    attributes["sortspecs"] = (sortspecs if (
    issubclass(type(sortspecs), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(sortspecs, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def max_rows(self):
    return self.operation.attributes["max_rows"]

  @max_rows.setter
  def max_rows(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["max_rows"] = value

  @builtins.property
  def sortspecs(self):
    return self.operation.attributes["sortspecs"]

  @sortspecs.setter
  def sortspecs(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sortspecs"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class TrackTuplesOP(_ods_ir.OpView):
  OPERATION_NAME = "relalg.track_tuples"

  _ODS_REGIONS = (0, True)

  def __init__(self, rel, resultId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["resultId"] = (resultId if (
    issubclass(type(resultId), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(resultId, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def resultId(self):
    return self.operation.attributes["resultId"]

  @resultId.setter
  def resultId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["resultId"] = value

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class UnionOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.union"

  _ODS_REGIONS = (0, True)

  def __init__(self, set_semantic, left, right, mapping, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(left))
    operands.append(_get_op_result_or_value(right))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["set_semantic"] = (set_semantic if (
    issubclass(type(set_semantic), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('RelAlg_SetSemantic')) else
      _ods_ir.AttrBuilder.get('RelAlg_SetSemantic')(set_semantic, context=_ods_context))
    attributes["mapping"] = (mapping if (
    issubclass(type(mapping), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(mapping, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def set_semantic(self):
    return self.operation.attributes["set_semantic"]

  @set_semantic.setter
  def set_semantic(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["set_semantic"] = value

  @builtins.property
  def mapping(self):
    return self.operation.attributes["mapping"]

  @mapping.setter
  def mapping(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mapping"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

@_ods_cext.register_operation(_Dialect)
@_ods_extend_opview_class(_ods_ext_module)
class WindowOp(_ods_ir.OpView):
  OPERATION_NAME = "relalg.window"

  _ODS_REGIONS = (1, True)

  def __init__(self, result, rel, partition_by, order_by, computed_cols, from_, to, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(rel))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["partition_by"] = (partition_by if (
    issubclass(type(partition_by), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(partition_by, context=_ods_context))
    attributes["order_by"] = (order_by if (
    issubclass(type(order_by), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(order_by, context=_ods_context))
    attributes["computed_cols"] = (computed_cols if (
    issubclass(type(computed_cols), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
      _ods_ir.AttrBuilder.get('ArrayAttr')(computed_cols, context=_ods_context))
    attributes["from"] = (from_ if (
    issubclass(type(from_), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(from_, context=_ods_context))
    attributes["to"] = (to if (
    issubclass(type(to), _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(to, context=_ods_context))
    results.append(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def rel(self):
    return self.operation.operands[0]

  @builtins.property
  def partition_by(self):
    return self.operation.attributes["partition_by"]

  @partition_by.setter
  def partition_by(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["partition_by"] = value

  @builtins.property
  def order_by(self):
    return self.operation.attributes["order_by"]

  @order_by.setter
  def order_by(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["order_by"] = value

  @builtins.property
  def computed_cols(self):
    return self.operation.attributes["computed_cols"]

  @computed_cols.setter
  def computed_cols(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["computed_cols"] = value

  @builtins.property
  def from_(self):
    return self.operation.attributes["from"]

  @from_.setter
  def from_(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["from"] = value

  @builtins.property
  def to(self):
    return self.operation.attributes["to"]

  @to.setter
  def to(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["to"] = value

  @builtins.property
  def result(self):
    return self.operation.results[0]

  @builtins.property
  def aggr_func(self):
    return self.regions[0]
