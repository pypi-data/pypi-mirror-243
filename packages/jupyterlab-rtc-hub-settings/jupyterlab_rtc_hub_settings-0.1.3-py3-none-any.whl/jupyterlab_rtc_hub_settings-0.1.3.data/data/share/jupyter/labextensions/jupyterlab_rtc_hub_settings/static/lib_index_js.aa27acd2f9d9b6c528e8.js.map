{"version":3,"file":"lib_index_js.aa27acd2f9d9b6c528e8.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;;;;;;;;;;;;;;;;;;AClCoD;AACD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA;AACA,4BAA4B,4DAAsB;AAClD;AACA;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBgC;AACf;AACU;AACD;AACc;AACnB;AACjB;AAC1B;AACA;AACA;AACO,qCAAqC,mDAAM;AAClD;AACA;AACA;AACA,iCAAiC,qDAAM;AACvC;AACA;AACA,0CAA0C,wDAAW;AACrD;AACA,4BAA4B,yDAAa;AACzC;AACA,SAAS;AACT;AACA;AACA,sBAAsB,6DAAW,QAAQ,0DAAmB,CAAC,2DAAS,IAAI,sDAAsD,cAAc,0DAAmB,CAAC,0DAAgB,IAAI,oHAAoH;AAC1S;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;ACjDyC;AACzC;AACO,+BAA+B,4CAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0DAAmB;AACvC,gBAAgB,0DAAmB;AACnC,gBAAgB,0DAAmB;AACnC,oBAAoB,0DAAmB,YAAY,oFAAoF;AACvI,SAAS;AACT;AACA,gBAAgB,0DAAmB;AACnC,YAAY,0DAAmB,YAAY,4DAA4D;AACvG,gBAAgB,0DAAmB;AACnC;AACA;;;;;;;;;;;;;;;;;;;;;ACzBwD;AACF;AACD;AAC9C,4BAA4B,mDAAM;AACzC;AACA;AACA;AACA,0CAA0C,wDAAW;AACrD,2BAA2B,mDAAM,GAAG,qCAAqC;AACzE;AACA;AACA,2BAA2B,mDAAM,GAAG,sCAAsC;AAC1E;AACA;AACA;AACA,kCAAkC,+DAAa;AAC/C,kBAAkB,kEAAW;AAC7B;AACA,SAAS;AACT;AACA;AACA","sources":["webpack://jupyterlab_rtc_hub_settings/./lib/handler.js","webpack://jupyterlab_rtc_hub_settings/./lib/index.js","webpack://jupyterlab_rtc_hub_settings/./lib/sidebar.js","webpack://jupyterlab_rtc_hub_settings/./lib/tableWidget.js","webpack://jupyterlab_rtc_hub_settings/./lib/toolbarWidget.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-rtc-hub-settings', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ILabShell } from '@jupyterlab/application';\nimport { SharingSettingsSidebar } from './sidebar';\n/**\n * Initialization data for the jupyterlab_rtc_hub_settings extension.\n */\nconst plugin = {\n    id: 'jupyterlab_rtc_hub_settings:plugin',\n    autoStart: true,\n    requires: [ILabShell],\n    activate: (app, labShell) => {\n        console.log('JupyterLab extension jupyterlab_rtc_hub_settings is activated!');\n        // Create the sharing settings sidebar panel\n        const sidebar = new SharingSettingsSidebar();\n        sidebar.id = 'rtc-hub-settings-labextension:plugin';\n        sidebar.title.iconClass =\n            'rtc-hub-settings-SharingSettingsLogo jp-SideBar-tabIcon';\n        sidebar.title.caption = 'Sharing settings';\n        // Register sidebar panel with JupyterLab\n        labShell.add(sidebar, 'left', { rank: 600 });\n    }\n};\nexport default plugin;\n","import { Widget, PanelLayout } from '@lumino/widgets';\nimport { requestAPI } from './handler';\nimport { UsersTableWidget } from './tableWidget';\nimport { ToolbarWidget } from './toolbarWidget';\nimport { ReactWidget, UseSignal } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\nimport React from 'react';\n/**\n * Sidebar widget for displaying RTC sharing settings.\n */\nexport class SharingSettingsSidebar extends Widget {\n    constructor() {\n        super();\n        this._users = [];\n        this._valueChanged = new Signal(this);\n        this.addClass('rtc-hub-settings-SharingSettingsSidebar');\n        // Define widget layout\n        const layout = (this.layout = new PanelLayout());\n        // Add Toolbar widget\n        const toolbar = new ToolbarWidget(() => {\n            this._getUsers();\n        });\n        layout.addWidget(toolbar);\n        // Add Users table widget\n        const table = ReactWidget.create(React.createElement(UseSignal, { signal: this._valueChanged, initialArgs: this._users }, (_, oa) => (React.createElement(UsersTableWidget, { ar: oa === undefined ? [] : oa, updateUsers: arg0 => this._updateUsers(arg0), refreshUsers: () => this._getUsers() }))));\n        table.addClass('rtc-hub-settings-SharingSettingsSidebar-table-div');\n        layout.addWidget(table);\n    }\n    async _getUsers() {\n        // Return results of API request\n        requestAPI('users').then(response => {\n            // Update internal variable\n            this._users = response;\n            // Send signal for table widget to update data\n            this._valueChanged.emit(this._users);\n        });\n    }\n    async _updateUsers(users) {\n        // Send updated list of users statuses\n        requestAPI('users', {\n            method: 'POST',\n            body: JSON.stringify(users)\n        }).then(response => {\n            // Update internal variable\n            this._users = response;\n            // Send signal for table widget to update data\n            this._valueChanged.emit(this._users);\n        });\n    }\n}\n","import React, { Component } from 'react';\n// Class for table of users\nexport class UsersTableWidget extends Component {\n    constructor(props) {\n        super(props);\n        this.updateUser = (name) => {\n            const props = this.props;\n            const index = props.ar.findIndex((user) => user.name === name);\n            props.ar[index].shared = !props.ar[index].shared;\n            props.updateUsers(props.ar);\n        };\n        props.refreshUsers();\n    }\n    render() {\n        const tableRows = this.props.ar.map((user) => {\n            return (React.createElement(\"tr\", null,\n                React.createElement(\"td\", null, user.name),\n                React.createElement(\"td\", null,\n                    React.createElement(\"input\", { type: \"checkbox\", checked: user.shared, onChange: () => this.updateUser(user.name) }))));\n        });\n        // Assemble headers and rows in the full table\n        return (React.createElement(\"div\", null,\n            React.createElement(\"table\", { className: \"rtc-hub-settings-SharingSettingsSidebar-table\" },\n                React.createElement(\"tbody\", null, tableRows))));\n    }\n}\n","import { refreshIcon } from '@jupyterlab/ui-components';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nexport class ToolbarWidget extends Widget {\n    constructor(refresh) {\n        super();\n        this.addClass('rtc-hub-settings-Toolbar-layout');\n        const layout = (this.layout = new PanelLayout());\n        const header = new Widget({ node: document.createElement('div') });\n        header.node.textContent = 'Collaboration Sharing';\n        layout.addWidget(header);\n        const spacer = new Widget({ node: document.createElement('span') });\n        spacer.addClass('rtc-hub-settings-Toolbar-spacer');\n        layout.addWidget(spacer);\n        // Search button\n        const refreshButton = new ToolbarButton({\n            icon: refreshIcon,\n            onClick: refresh\n        });\n        layout.addWidget(refreshButton);\n    }\n}\n"],"names":[],"sourceRoot":""}