# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['src']

package_data = \
{'': ['*']}

install_requires = \
['deltalake>=0.13.0,<0.14.0',
 'pandas>=2.1.3,<3.0.0',
 'pyarrow>=14.0.1,<15.0.0',
 'redis>=5.0.1,<6.0.0']

setup_kwargs = {
    'name': 'deltalake-redis-lock',
    'version': '0.0.1a10',
    'description': 'deltalake-redis-lock',
    'long_description': '# deltalake-redis-lock\n\n![example workflow](https://github.com/wrapbytes/deltalake-redis-lock/actions/workflows/merge.yaml/badge.svg)\n![example workflow](https://github.com/wrapbytes/deltalake-redis-lock/actions/workflows/pr.yaml/badge.svg)\n\nA library creating an interface for a write lock for [delta-rs](https://pypi.org/project/deltalake/).\n\n## Library Usage\n\nWhen using this client, it can be used from multiple hosts. Below follow a minimal example\nto mimic this behaviour.\n\n### Redis Env Variables\n\nMake sure to set these `envs` before executing code.\n```bash\nREDIS_HOST=<host>\nREDIS_PORT=<port>\nREDIS_DB=<0>\n```\n\n### Concurrent Write Example\n\n```python\n# run.py\nimport logging\nimport os\nfrom multiprocessing import Pool\n\nfrom deltalake import DeltaTable\nfrom pandas import DataFrame\n\nfrom deltalake_redis_lock import write_redis_lock_deltalake, optimize_redis_lock_deltalake\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s [%(levelname)s] %(message)s\',\n    datefmt=\'%Y-%m-%d %H:%M:%S\'\n)\n\ndef fake_worker(args) -> None:\n    df, table_name = args\n    table_path = f"{os.getcwd()}/{table_name}"\n\n    write_redis_lock_deltalake(\n        table_or_uri=table_path,\n        lock_table_name=table_name,\n        mode="append",\n        data=df,\n        overwrite_schema=True,\n    )\n\n\ndef define_datasets(_table_name: str) -> None:\n    df1 = DataFrame({"id": [1]})\n    df2 = DataFrame({"id": [2]})\n    df3 = DataFrame({"id": [3]})\n    df4 = DataFrame({"id": [4]})\n\n    datasets = [(df1, table_name), (df2, table_name), (df3, table_name), (df4, table_name)]\n\n    with Pool() as pool:\n        pool.map(fake_worker, datasets)\n\n\nif __name__ == \'__main__\':\n    table_name = f"test_run"\n    table_path = f"{os.getcwd()}/{table_name}"\n\n    define_datasets(_table_name=table_name)\n\n    df = DeltaTable(table_uri=table_path).to_pandas().to_string()\n    logging.info(df)\n```\n\n```bash\n2023-07-18 21:28:47 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:28:47 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:28:47 [INFO] Acquired lock, blocking: True\n2023-07-18 21:28:47 [INFO] Acquired Redis Lock...\n2023-07-18 21:28:47 [INFO] Lock acquired. Executing function...\n2023-07-18 21:28:47 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:28:47 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:28:47 [INFO] Releasing lock... 2023-07-18T20:28:47.378630\n2023-07-18 21:28:47 [INFO] Acquired lock, blocking: True\n2023-07-18 21:28:47 [INFO] Acquired Redis Lock...\n2023-07-18 21:28:47 [INFO] Lock acquired. Executing function...\n2023-07-18 21:28:47 [INFO] Releasing lock... 2023-07-18T20:28:47.419373\n2023-07-18 21:28:47 [INFO] Acquired lock, blocking: True\n2023-07-18 21:28:47 [INFO] Acquired Redis Lock...\n2023-07-18 21:28:47 [INFO] Lock acquired. Executing function...\n2023-07-18 21:28:47 [INFO] Releasing lock... 2023-07-18T20:28:47.476411\n2023-07-18 21:28:47 [INFO] Acquired lock, blocking: True\n2023-07-18 21:28:47 [INFO] Acquired Redis Lock...\n2023-07-18 21:28:47 [INFO] Lock acquired. Executing function...\n2023-07-18 21:28:47 [INFO] Releasing lock... 2023-07-18T20:28:47.517992\n   id\n0   1\n1   3\n2   2\n3   4\n```\n\n**Structure**\n\n```bash\ntest_run\n├── 0-a2811af1-e9fa-4984-9824-3956acdbaba8-0.parquet\n├── 1-87889b2d-1971-4e9b-8244-5e0d4a222458-0.parquet\n├── 2-a2f0ac25-df02-43b7-945d-014db522b19f-0.parquet\n├── 3-e57eae65-3cc7-4539-9eb6-b41ba52642bc-0.parquet\n└── _delta_log\n    ├── 00000000000000000000.json\n    ├── 00000000000000000001.json\n    ├── 00000000000000000002.json\n    └── 00000000000000000003.json\n\n1 directory, 8 files\n```\n\n### Concurrent Write With Optimize Example\n```python\n# run.py\nimport logging\nimport os\nfrom multiprocessing import Pool\n\nfrom deltalake import DeltaTable\nfrom pandas import DataFrame\n\nfrom deltalake_redis_lock import write_redis_lock_deltalake, optimize_redis_lock_deltalake\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s [%(levelname)s] %(message)s\',\n    datefmt=\'%Y-%m-%d %H:%M:%S\'\n)\n\ndef fake_worker(args) -> None:\n    df, table_name = args\n    table_path = f"{os.getcwd()}/{table_name}"\n\n    write_redis_lock_deltalake(\n        table_or_uri=table_path,\n        lock_table_name=table_name,\n        mode="append",\n        data=df,\n        overwrite_schema=True,\n    )\n\n    optimize_redis_lock_deltalake(\n        table_or_uri=table_path,\n        lock_table_name=table_name,\n        retention_hours=0,\n        dry_run=False,\n        enforce_retention_duration=False,\n    )\n\n\ndef define_datasets(_table_name: str) -> None:\n    df1 = DataFrame({"id": [1]})\n    df2 = DataFrame({"id": [2]})\n    df3 = DataFrame({"id": [3]})\n    df4 = DataFrame({"id": [4]})\n\n    datasets = [(df1, table_name), (df2, table_name), (df3, table_name), (df4, table_name)]\n\n    with Pool() as pool:\n        pool.map(fake_worker, datasets)\n\n\nif __name__ == \'__main__\':\n    table_name = f"test_run"\n    table_path = f"{os.getcwd()}/{table_name}"\n\n    define_datasets(_table_name=table_name)\n\n    df = DeltaTable(table_uri=table_path).to_pandas().to_string()\n    logging.info(df)\n```\n\n**Output**\n```bash\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Releasing lock... 2023-07-18T20:26:42.681030\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:42 [INFO] Releasing lock... 2023-07-18T20:26:42.689819\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:42 [INFO] Releasing lock... 2023-07-18T20:26:42.750781\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:42 [INFO] Releasing lock... 2023-07-18T20:26:42.760280\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:42 [INFO] Releasing lock... 2023-07-18T20:26:42.866534\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:42 [INFO] Releasing lock... 2023-07-18T20:26:42.882519\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:42 [INFO] Releasing lock... 2023-07-18T20:26:42.985008\n2023-07-18 21:26:42 [INFO] Try to Acquire Redis Lock...\n2023-07-18 21:26:42 [INFO] Acquired lock, blocking: True\n2023-07-18 21:26:42 [INFO] Acquired Redis Lock...\n2023-07-18 21:26:42 [INFO] Lock acquired. Executing function...\n2023-07-18 21:26:43 [INFO] Releasing lock... 2023-07-18T20:26:43.000558\n   id\n0   4\n1   3\n2   1\n3   2\n```\n\n**Structure**\n\n```bash\ntest_run\n└── _delta_log\n│   ├── 00000000000000000000.json\n│   ├── 00000000000000000001.json\n│   ├── 00000000000000000002.json\n│   ├── 00000000000000000003.json\n│   ├── 00000000000000000004.json\n│   ├── 00000000000000000005.json\n│   └── 00000000000000000006.json\n└──part-00001-a13ca1fe-0a52-44c2-b2ce-b7eb95704536-c000.zstd.parquet\n\n1 directory, 8 files\n```\n\nThis can be executed with something like:\n\n```bash\nseq 2 | xargs -I{} -P 2 poetry run python run.py\n```\n\n## Setup From Scratch\n\n### Requirement\n\n* ^python3.9\n* poetry 1.1.13\n* make (GNU Make 3.81)\n\n### Setup\n\n```bash\nmake setup-environment\n```\n\nUpdate package\n```bash\nmake update\n```\n\n### Test\n\n```bash\nexport PYTHONPATH="${PYTHONPATH}:src"\nmake test type=unit\n```\n\n### Docker\n\nThe reason `docker` is used in the source code here, is to be able to build up an encapsulated\nenvironment of the codebase, and do `unit/integration and load tests`.\n\n```bash\nmake build-container-image DOCKER_BUILD="buildx build --platform linux/amd64" CONTEXT=.\n```\n\n```bash\nmake run-container-tests type=unit\n```\n',
    'author': 'Simon Thelin',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/wrapbytes/deltalake-redis-lock',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<3.12',
}


setup(**setup_kwargs)
