#!/usr/bin/env python

import argparse
from datetime import datetime
import json
import re
import requests
import yaml

from toluene.core.time import TerrestrialTimeJ2000

today = datetime.today()

empty_core_header = \
    "#ifndef __TOLUENE_CORE_CONFIG_H__\n" \
    "#define __TOLUENE_CORE_CONFIG_H__\n" \
    f"/* CONFIG VERSION: {today.year}{today.month}{today.day} */\n" \
    "/* This file is automatically generated by the config_builder.py script. */\n" \
    "\n" \
    "#ifdef __cplusplus\n" \
    "extern \"C\" {{\n" \
    "#endif\n" \
    "\n" \
    "{}" \
    "\n" \
    "#ifdef __cplusplus\n" \
    "}}   /* extern \"C\" */\n" \
    "#endif\n" \
    "\n" \
    "#endif /* __TOLUENE_CORE_CONFIG_H__ */\n"

nutation_series_string = \
    "/* Nutation series coefficients */\n" \
    "static const int nutation_series_columns = 21;\n" \
    "static const int nutation_series_rows = {};\n" \
    "static const double nutation_series[] = {{\n" \
    "{}\n" \
    "}};\n"

bias_matrix_string = \
    "/* Bias matrix coefficients */\n" \
    "static const double bias_rotation_matrix[] = {{" \
    "{}" \
    "}};\n"

precession_coefficients_string = \
    "/* Precession coefficients */\n" \
    "static const double ZETA_a[] = {{ {} }};\n" \
    "static const double Z_a[] = {{ {} }};\n" \
    "static const double THETA_a[] = {{ {} }};\n" \
    "static const double PSI_a[] = {{ {} }};\n" \
    "static const double EPSILON_a[] = {{ {} }};\n" \
    "static const double l_[] = {{ {} }};\n" \
    "static const double l_prime[] = {{ {} }};\n" \
    "static const double f_[] = {{ {} }};\n" \
    "static const double d_[] = {{ {} }};\n" \
    "static const double omega[] = {{ {} }};\n" \
    "static const double l_me[] = {{ {} }};\n" \
    "static const double l_v[] = {{ {} }};\n" \
    "static const double l_e[] = {{ {} }};\n" \
    "static const double l_ma[] = {{ {} }};\n" \
    "static const double l_j[] = {{ {} }};\n" \
    "static const double l_s[] = {{ {} }};\n" \
    "static const double l_u[] = {{ {} }};\n" \
    "static const double l_n[] = {{ {} }};\n" \
    "static const double gen_p[] = {{ {} }};\n"

earth_rotation_string = \
    "/* Earth rotation coefficients */\n" \
    "static const int delta_t_length = {};\n" \
    "static const double delta_t_list[] = {{\n" \
    "{}\n" \
    "}};\n" \
    "static const double gmst_coefficients[] = {{ {} }};\n"

polar_motion_string = \
    "/* Polar Motion */\n" \
    "static const double tio_locator_per_century = {};\n" \
    "static const int polar_motion_length = {};\n" \
    "static const double polar_motion_list[] = {{\n" \
    "{}\n" \
    "}};\n"


def main():
    parser = create_arg_parser()
    args = parser.parse_args()
    config_file = args.config_file

    with open(config_file, 'r') as file:
        config = yaml.safe_load(file)
        core_header_contents = build_core_header(config)
        with open("{}/toluene_core_config.h".format(args.output_dir), 'w') as core_header:
            core_header.write(core_header_contents)


def create_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description='Builds config files for the toluene library.')
    parser.add_argument('config_file', type=str, help='The config file with coefficients not to be pulled'
                                                      'from online sources.')
    parser.add_argument('--output_dir', type=str, help='The directory to output the config files to.',
                        default='.')
    return parser


def build_core_header(config: yaml) -> str:
    format_string = ""

    # Build the bias config
    bias_matrix = config['bias']['matrix']
    format_string += bias_matrix_string.format(','.join([str(i) for i in bias_matrix]))
    format_string += "\n"

    # build the precession config
    zeta = config['precession']['zeta']
    z = config['precession']['Z_a']
    theta = config['precession']['theta']
    psi = config['precession']['psi']
    epsilon = config['precession']['epsilon_a']
    l = config['precession']['l_']
    l_prime = config['precession']['l_prime']
    f = config['precession']['F']
    d = config['precession']['D']
    omega = config['precession']['omega']
    l_me = config['precession']['l_me']
    l_v = config['precession']['l_v']
    l_e = config['precession']['l_e']
    l_ma = config['precession']['l_ma']
    l_j = config['precession']['l_j']
    l_s = config['precession']['l_s']
    l_u = config['precession']['l_u']
    l_n = config['precession']['l_n']
    gen_p = config['precession']['general_precession']

    format_string += precession_coefficients_string.format(
        ','.join([str(i) for i in zeta]),
        ','.join([str(i) for i in z]),
        ','.join([str(i) for i in theta]),
        ','.join([str(i) for i in psi]),
        ','.join([str(i) for i in epsilon]),
        ','.join([str(i) for i in l]),
        ','.join([str(i) for i in l_prime]),
        ','.join([str(i) for i in f]),
        ','.join([str(i) for i in d]),
        ','.join([str(i) for i in omega]),
        ','.join([str(i) for i in l_me]),
        ','.join([str(i) for i in l_v]),
        ','.join([str(i) for i in l_e]),
        ','.join([str(i) for i in l_ma]),
        ','.join([str(i) for i in l_j]),
        ','.join([str(i) for i in l_s]),
        ','.join([str(i) for i in l_u]),
        ','.join([str(i) for i in l_n]),
        ','.join([str(i) for i in gen_p]),
    )
    format_string += "\n"

    # Build the nutation config
    nutation_series = config['nutation']['series']
    format_string += nutation_series_string.format(str(len(nutation_series) // 21),
                                                   ','.join([str(i) for i in nutation_series]))
    format_string += "\n"

    # Get earth rotation coefficients
    # This uses the internet so hopefully they never remove/move the delta_t.data file
    delta_t_list = []

    response = requests.get("https://maia.usno.navy.mil/ser7/deltat.data")
    for line in response.text.split('\n'):
        try:
            row = re.split("\s+", line)
            year = int(row[1])
            month = int(row[2])
            day = int(row[3])
            delta_t = float(row[4])
            if year >= 2000:
                delta_t_list.append(TerrestrialTimeJ2000(datetime(year, month, day)).seconds_since())
                delta_t_list.append(delta_t)
        except:
            pass

    gmst_coefficients = config['earth_rotation']['gmst']

    format_string += earth_rotation_string.format(len(delta_t_list) // 2,
                                                  ','.join([str(i) for i in delta_t_list]),
                                                  ','.join([str(i) for i in gmst_coefficients]))
    format_string += "\n"

    # Get polar motion coefficients
    # This uses the internet so hopefully they never remove/move the polar_motion.data file
    polar_motion_variables = []

    response = requests.get(config['polar_motion']['EOP_json_url'])
    data = json.loads(response.text)

    polar_motion_format_string = ""

    for row in data['EOP']['data']['timeSeries']:
        datetime_record = row['time']
        year = int(datetime_record['dateYear'])
        month = int(datetime_record['dateMonth'])
        day = int(datetime_record['dateDay'])
        if year >= 2000:
            polar_motion_data = row['dataEOP']['pole']
            try:
                polar_motion_x = float(polar_motion_data['X'])
                polar_motion_y = float(polar_motion_data['Y'])

                polar_motion_format_string += "    {},{},{},\n".format(
                    TerrestrialTimeJ2000(datetime(year, month, day)).seconds_since(),
                    polar_motion_x,
                    polar_motion_y
                )

            except:
                pass

    polar_motion_format_string = polar_motion_format_string[:-2]

    format_string += polar_motion_string.format(config['polar_motion']['s_prime'],
                                                len(polar_motion_format_string.split('\n')),
                                                polar_motion_format_string)

    return empty_core_header.format(format_string)


if __name__ == '__main__':
    main()
