# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tink/proto/prf_based_deriver.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from tink.proto import tink_pb2 as tink_dot_proto_dot_tink__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\"tink/proto/prf_based_deriver.proto\x12\x12google.crypto.tink\x1a\x15tink/proto/tink.proto\"V\n\x15PrfBasedDeriverParams\x12=\n\x14\x64\x65rived_key_template\x18\x01 \x01(\x0b\x32\x1f.google.crypto.tink.KeyTemplate\"\x90\x01\n\x18PrfBasedDeriverKeyFormat\x12\x39\n\x10prf_key_template\x18\x01 \x01(\x0b\x32\x1f.google.crypto.tink.KeyTemplate\x12\x39\n\x06params\x18\x02 \x01(\x0b\x32).google.crypto.tink.PrfBasedDeriverParams\"\x8e\x01\n\x12PrfBasedDeriverKey\x12\x0f\n\x07version\x18\x01 \x01(\r\x12,\n\x07prf_key\x18\x02 \x01(\x0b\x32\x1b.google.crypto.tink.KeyData\x12\x39\n\x06params\x18\x03 \x01(\x0b\x32).google.crypto.tink.PrfBasedDeriverParamsB\\\n\x1c\x63om.google.crypto.tink.protoP\x01Z:github.com/google/tink/go/proto/prf_based_deriver_go_protob\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'tink.proto.prf_based_deriver_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\034com.google.crypto.tink.protoP\001Z:github.com/google/tink/go/proto/prf_based_deriver_go_proto'
  _PRFBASEDDERIVERPARAMS._serialized_start=81
  _PRFBASEDDERIVERPARAMS._serialized_end=167
  _PRFBASEDDERIVERKEYFORMAT._serialized_start=170
  _PRFBASEDDERIVERKEYFORMAT._serialized_end=314
  _PRFBASEDDERIVERKEY._serialized_start=317
  _PRFBASEDDERIVERKEY._serialized_end=459
# @@protoc_insertion_point(module_scope)
