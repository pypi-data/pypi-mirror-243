# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/91_tgrd.ipynb.

# %% auto 0
__all__ = ['G', 'T', 'P', 'TypeLike', 'GuardFunc', 'istypeq', 'isinst', 'isinstq', 'isof', 'isforwardref', 'isfref',
           'dereference']

# %% ../nbs/91_tgrd.ipynb 4
from types import NoneType
from typing import Type, Tuple, Union, Callable, TypeAlias, TypeGuard, TypeVar, ParamSpec, ForwardRef

# %% ../nbs/91_tgrd.ipynb 5
from .core import isstr, isnone

# %% ../nbs/91_tgrd.ipynb 7
G = TypeVar('G')
T = TypeVar('T')
P = ParamSpec('P')

TypeLike:  TypeAlias = Union[Type, TypeAlias, Type[T]]
GuardFunc: TypeAlias = Callable[P, TypeGuard[TypeLike]]

# %% ../nbs/91_tgrd.ipynb 8
def istypeq(x: T, t: TypeLike) -> TypeGuard[Union[T, NoneType]]:
    '''Check if `x` is of type `t` or `NoneType`'''
    return isinstance(x, (t, NoneType))

def isinst(x: T, t: TypeLike) -> TypeGuard[T]:
    '''Alias for `isinstance`'''
    return isinstance(x, t)

def isinstq(x: T, t: TypeLike) -> TypeGuard[Union[T, NoneType]]:
    '''Alias for `isinstance`'''
    return isinstance(x, (t, NoneType))

def isof(x: T, t: Tuple[TypeLike, ...]) -> TypeGuard[TypeLike]:
    '''Alias for `isinstance`'''
    return isinst(x, t)

# %% ../nbs/91_tgrd.ipynb 10
def isforwardref(x) -> TypeGuard[ForwardRef]:
    '''Check if `x` is a `ForwardRef`
    
    See Also
    --------
    isfref : Alias for `isforwardref`.
    '''
    return isinstance(x, ForwardRef)

def isfref(x) -> TypeGuard[ForwardRef]:
    '''Check if `x` is a `ForwardRef`
    
    See Also
    --------
    isforwardref : Alias for `isfref`.
    '''
    return isforwardref(x)

# %% ../nbs/91_tgrd.ipynb 11
def dereference(
    ref: ForwardRef | str,
    is_argument: bool = False,
    module: str = None,
    *,
    is_class: bool = False,
    globalsns: dict = None, 
    localsns: dict = None, 
    recursive_guard: set = None
) -> type:
    '''Dereference a ForwardRef object.'''
    if not isforwardref(ref) and isstr(ref):
        ref = ForwardRef(ref, is_argument=is_argument, module=module, is_class=is_class)

    recursive_guard = set()     if isnone(recursive_guard) else recursive_guard
    localsns        = locals()  if isnone(localsns)        else localsns
    globalsns       = globals() if isnone(globalsns)       else globalsns
    val = ref._evaluate(globalsns, localsns, recursive_guard)
    return val
