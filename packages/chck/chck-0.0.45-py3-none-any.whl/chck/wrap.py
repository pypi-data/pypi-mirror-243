# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/90_wrap.ipynb.

# %% auto 0
__all__ = ['vanilla', 'isguard', 'guardname', 'guarddocs', 'guardanns', 'setwrapattrs', 'makeguard', 'wrapguard', 'decoguard']

# %% ../nbs/90_wrap.ipynb 4
from typing import Any, Type, Callable, TypeGuard
from functools import wraps

# %% ../nbs/90_wrap.ipynb 5
from .tgrd import G, P

# %% ../nbs/90_wrap.ipynb 7
def guardname(cls: G):
    return f'is{cls.__name__.lower()}'

def guarddocs(cls: G) -> str:
    return f'''Check if `x` is a `{cls.__name__}`.'''

def guardanns(cls: G) -> dict:
    return {'x': 'typing.Any', 'return': TypeGuard[G]}

def setwrapattrs(
    call: Callable[P, TypeGuard[G]], cls: G,
    docsfn: Callable[[type], str] = guarddocs,
    namefn: Callable[[type], str] = guardname,
    annsfn: Callable[[type], str] = guardanns,
) -> Callable[P, TypeGuard[G]]:
    # Update docstring
    call.__doc__ = call.__doc__ or docsfn(cls)    
    # Update name
    call.__name__ = namefn(cls)
    # Update annotations
    call.__annotations__ = annsfn(cls)
    return call

# %% ../nbs/90_wrap.ipynb 9
def makeguard(cls: G) -> Callable[P, TypeGuard[G]]:
    def guard(x: Any) -> TypeGuard[cls]:
        f'''Check if `x` is a `{cls.__name__}`.'''        
        return isinstance(x, cls)
    guard = setwrapattrs(guard, cls)
    return guard

def wrapguard(cls: G, call: Callable[P, TypeGuard[G]]) -> Callable[P, TypeGuard[G]]:
    @wraps(call)
    def wrapper(x: Any, *args: P.args, **kwargs: P.kwargs) -> TypeGuard[G]:
        f'''Check if `x` is a `{cls.__name__}`.'''
        res = None
        if kwargs.get('__call_wrapped__', True): res = call(x)
        if kwargs.get('__pass_result__', False): x = res
        return isinstance(x, cls)
        
    for mthd in (wrapper, call): mthd = setwrapattrs(mthd, cls)
    return wrapper

# %% ../nbs/90_wrap.ipynb 11
def decoguard(cls: G) -> Callable[P, TypeGuard[G]]:
    '''Automatically adds a type guard and docstring to a function.'''
    def decorator(call: Callable[P, TypeGuard[G]]) -> Callable[P, TypeGuard[G]]:
        return wrapguard(cls, call)
    return decorator

# %% ../nbs/90_wrap.ipynb 13
vanilla = makeguard
isguard = decoguard
