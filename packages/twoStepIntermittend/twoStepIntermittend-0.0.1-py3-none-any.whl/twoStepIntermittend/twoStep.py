# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/0_twoStep.ipynb.

# %% auto 0
__all__ = ['twoStepWSAA', 'twoStepWSAA_regForClass']

# %% ../nbs/0_twoStep.ipynb 5
import pandas as pd
import numpy as np
from dddex.baseClasses import BaseWeightsBasedEstimator
from dddex.wSAA import RandomForestWSAA
from dddex.levelSetKDEx_univariate import LevelSetKDEx
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor

# %% ../nbs/0_twoStep.ipynb 7
class twoStepWSAA(BaseWeightsBasedEstimator):

    def __init__(self, regressor, classifier):
        self.regressor = regressor
        self.classifier = classifier

    #---

    def fit(self, X, y):
        yPos = y[y > 0]
        XPos = X[y > 0]
        yBinary = y > 0
        
        self.regressor.fit(XPos, yPos)
        self.classifier.fit(X, yBinary)
        
        self.yTrain = y
        self.XPos = XPos
        self.yPos = yPos
        self.yBinary = yBinary

    #---

    def getWeights(self, X, outputType = 'summarized', scalingList = None):

        indexProbPos = np.where(self.classifier.classes_ == 1)[0]
        probs = self.classifier.predict_proba(X)[:, indexProbPos].flatten()

        if outputType == 'summarized':
            weightsPosList = self.regressor.getWeights(X, outputType = 'summarized', scalingList = scalingList)

            weightsList = []
            for i, weightsData in enumerate(weightsPosList):
                weightsPos = weightsData[0]
                valuesPos = weightsData[1]
                
                prob = probs[i]
                weights = np.concatenate([np.array([1 - prob]), prob * weightsPos])
                values = np.concatenate([np.array([0]), valuesPos])

                weightsList.append((weights, values))
        
        #---

        elif outputType == 'cumulativeDistribution':
            weightsPosList = self.regressor.getWeights(X, outputType = 'cumulativeDistribution', scalingList = scalingList)

            weightsList = []
            for i, weightsData in enumerate(weightsPosList):
                cumProbsPos = weightsData[0]
                valuesPos = weightsData[1]

                prob = probs[i]
                cumProbs = np.concatenate([np.array([1 - prob]), (1 - prob) + prob * cumProbsPos])
                values = np.concatenate([np.array([0]), valuesPos])

                weightsList.append((cumProbs, values))

        #---

        return weightsList        


# %% ../nbs/0_twoStep.ipynb 9
class twoStepWSAA_regForClass(BaseWeightsBasedEstimator):

    def __init__(self, regressor, classifier):
        self.regressor = regressor
        self.classifier = classifier

    #---

    def fit(self, X, y):
        yPos = y[y > 0]
        XPos = X[y > 0]
        yBinary = y > 0
        
        self.regressor.fit(XPos, yPos)
        self.classifier.fit(X, yBinary)
        
        self.yTrain = y
        self.XPos = XPos
        self.yPos = yPos
        self.yBinary = yBinary

    #---

    def getWeights(self, X, outputType = 'summarized', scalingList = None):

        probs = self.classifier.predict(X)

        if outputType == 'summarized':
            weightsPosList = self.regressor.getWeights(X, outputType = 'summarized', scalingList = scalingList)

            weightsList = []
            for i, weightsData in enumerate(weightsPosList):
                weightsPos = weightsData[0]
                valuesPos = weightsData[1]
                
                prob = probs[i]
                weights = np.concatenate([np.array([1 - prob]), prob * weightsPos])
                values = np.concatenate([np.array([0]), valuesPos])

                weightsList.append((weights, values))
        
        #---

        elif outputType == 'cumulativeDistribution':
            weightsPosList = self.regressor.getWeights(X, outputType = 'cumulativeDistribution', scalingList = scalingList)

            weightsList = []
            for i, weightsData in enumerate(weightsPosList):
                cumProbsPos = weightsData[0]
                valuesPos = weightsData[1]

                prob = probs[i]
                cumProbs = np.concatenate([np.array([1 - prob]), (1 - prob) + prob * cumProbsPos])
                values = np.concatenate([np.array([0]), valuesPos])

                weightsList.append((cumProbs, values))

        #---

        return weightsList
