Metadata-Version: 2.1
Name: aismt
Version: 23.11.28
Summary: A command-line interface for AI Smart Task.
Home-page: https://github.com/chatmangpt/aismt
Author: Sean Chatman
Author-email: info@chatmangpt.com
Requires-Python: >=3.11,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: aiofiles (>=23.2.1,<24.0.0)
Requires-Dist: aiohttp (>=3.9.0,<4.0.0)
Requires-Dist: anyio (==3.7.1)
Requires-Dist: astor (>=0.8.1,<0.9.0)
Requires-Dist: autopep8 (>=2.0.4,<3.0.0)
Requires-Dist: chromadb (==0.4.18)
Requires-Dist: coloredlogs (>=15.0.1)
Requires-Dist: duckduckgo-search (>=3.9.6,<4.0.0)
Requires-Dist: email-validator (>=2.1.0.post1,<3.0.0)
Requires-Dist: factory-boy (>=3.3.0,<4.0.0)
Requires-Dist: faker (>=20.1.0,<21.0.0)
Requires-Dist: fastapi[all] (>=0.92.0)
Requires-Dist: gitpython (>=3.1.40,<4.0.0)
Requires-Dist: gunicorn (>=20.1.0)
Requires-Dist: icalendar (>=5.0.11,<6.0.0)
Requires-Dist: icontract (>=2.6.6,<3.0.0)
Requires-Dist: inflection (>=0.5.1,<0.6.0)
Requires-Dist: jinja2 (>=3.1.2,<4.0.0)
Requires-Dist: jinja2-time (>=0.2.0,<0.3.0)
Requires-Dist: jupyter (>=1.0.0,<2.0.0)
Requires-Dist: loguru (>=0.7.2,<0.8.0)
Requires-Dist: matplotlib (>=3.8.2,<4.0.0)
Requires-Dist: munch (>=4.0.0,<5.0.0)
Requires-Dist: openai (>=1.3.5,<2.0.0)
Requires-Dist: pandas (>=2.1.3,<3.0.0)
Requires-Dist: poethepoet (>=0.20.0)
Requires-Dist: pydantic (>=1.10.7)
Requires-Dist: pyperclip (>=1.8.2,<2.0.0)
Requires-Dist: pyppeteer (>=1.0.2,<2.0.0)
Requires-Dist: pyshacl (>=0.25.0,<0.26.0)
Requires-Dist: pytest-bdd (>=7.0.0,<8.0.0)
Requires-Dist: python-dateutil (>=2.8.2,<3.0.0)
Requires-Dist: python-multipart (>=0.0.6,<0.0.7)
Requires-Dist: pytz (>=2023.3.post1,<2024.0)
Requires-Dist: radon (>=6.0.1,<7.0.0)
Requires-Dist: rdflib (>=7.0.0,<8.0.0)
Requires-Dist: redbaron (>=0.9.2,<0.10.0)
Requires-Dist: sismic (>=1.6.6,<2.0.0)
Requires-Dist: sqlmodel (>=0.0.12,<0.0.13)
Requires-Dist: streamlit (>=1.19.0)
Requires-Dist: typer[all] (>=0.9.0)
Requires-Dist: tzlocal (>=5.2,<6.0)
Requires-Dist: uvicorn[standard] (>=0.20.0)
Project-URL: Repository, https://github.com/chatmangpt/aismt
Description-Content-Type: text/markdown

[![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue&logo=visualstudiocode)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/chatmangpt/aismt)

# aismt

A command-line interface for AI Smart Task.

## Using

_Python package_: to add and install this package as a dependency of your project, run `poetry add aismt`.

_Python CLI_: to view this app's CLI commands once it's installed, run `aismt --help`.

_Python application_: to serve this REST API, run `docker compose up app` and open [localhost:8000](http://localhost:8000) in your browser. Within the Dev Container, this is equivalent to running `poe api`.

## Contributing

<details>
<summary>Prerequisites</summary>

<details>
<summary>1. Set up Git to use SSH</summary>

1. [Generate an SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key) and [add the SSH key to your GitHub account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account).
1. Configure SSH to automatically load your SSH keys:
    ```sh
    cat << EOF >> ~/.ssh/config
    Host *
      AddKeysToAgent yes
      IgnoreUnknown UseKeychain
      UseKeychain yes
    EOF
    ```

</details>

<details>
<summary>2. Install Docker</summary>

1. [Install Docker Desktop](https://www.docker.com/get-started).
    - Enable _Use Docker Compose V2_ in Docker Desktop's preferences window.
    - _Linux only_:
        - [Configure Docker to use the BuildKit build system](https://docs.docker.com/build/buildkit/#getting-started). On macOS and Windows, BuildKit is enabled by default in Docker Desktop.
        - Export your user's user id and group id so that [files created in the Dev Container are owned by your user](https://github.com/moby/moby/issues/3206):
            ```sh
            cat << EOF >> ~/.bashrc
            export UID=$(id --user)
            export GID=$(id --group)
            EOF
            ```

</details>

<details>
<summary>3. Install VS Code or PyCharm</summary>

1. [Install VS Code](https://code.visualstudio.com/) and [VS Code's Dev Containers extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers). Alternatively, install [PyCharm](https://www.jetbrains.com/pycharm/download/).
2. _Optional:_ install a [Nerd Font](https://www.nerdfonts.com/font-downloads) such as [FiraCode Nerd Font](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode) and [configure VS Code](https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions) or [configure PyCharm](https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions) to use it.

</details>

</details>

<details open>
<summary>Development environments</summary>

The following development environments are supported:

1. ⭐️ _GitHub Codespaces_: click on _Code_ and select _Create codespace_ to start a Dev Container with [GitHub Codespaces](https://github.com/features/codespaces).
1. ⭐️ _Dev Container (with container volume)_: click on [Open in Dev Containers](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/chatmangpt/aismt) to clone this repository in a container volume and create a Dev Container with VS Code.
1. _Dev Container_: clone this repository, open it with VS Code, and run <kbd>Ctrl/⌘</kbd> + <kbd>⇧</kbd> + <kbd>P</kbd> → _Dev Containers: Reopen in Container_.
1. _PyCharm_: clone this repository, open it with PyCharm, and [configure Docker Compose as a remote interpreter](https://www.jetbrains.com/help/pycharm/using-docker-compose-as-a-remote-interpreter.html#docker-compose-remote) with the `dev` service.
1. _Terminal_: clone this repository, open it with your terminal, and run `docker compose up --detach dev` to start a Dev Container in the background, and then run `docker compose exec dev zsh` to open a shell prompt in the Dev Container.

</details>

<details>
<summary>Developing</summary>

- Run `poe` from within the development environment to print a list of [Poe the Poet](https://github.com/nat-n/poethepoet) tasks available to run on this project.
- Run `poetry add {package}` from within the development environment to install a run time dependency and add it to `pyproject.toml` and `poetry.lock`. Add `--group test` or `--group dev` to install a CI or development dependency, respectively.
- Run `poetry update` from within the development environment to upgrade all dependencies to the latest versions allowed by `pyproject.toml`.

</details>

