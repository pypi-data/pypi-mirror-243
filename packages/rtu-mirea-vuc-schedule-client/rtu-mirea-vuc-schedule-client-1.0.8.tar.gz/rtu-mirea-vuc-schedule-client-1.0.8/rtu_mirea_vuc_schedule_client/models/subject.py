# coding: utf-8

"""
    rtu mirea vuc schedule

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from rtu_mirea_vuc_schedule_client.models.lesson import Lesson
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Subject(BaseModel):
    """
    Subject
    """
    name: Optional[StrictStr] = None
    auditory: Optional[StrictStr] = None
    teacher: Optional[StrictStr] = None
    lesson: Optional[Lesson] = None
    __properties: ClassVar[List[str]] = ["name", "auditory", "teacher", "lesson"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Subject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lesson
        if self.lesson:
            _dict['lesson'] = self.lesson.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if auditory (nullable) is None
        # and model_fields_set contains the field
        if self.auditory is None and "auditory" in self.model_fields_set:
            _dict['auditory'] = None

        # set to None if teacher (nullable) is None
        # and model_fields_set contains the field
        if self.teacher is None and "teacher" in self.model_fields_set:
            _dict['teacher'] = None

        # set to None if lesson (nullable) is None
        # and model_fields_set contains the field
        if self.lesson is None and "lesson" in self.model_fields_set:
            _dict['lesson'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of Subject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "auditory": obj.get("auditory"),
            "teacher": obj.get("teacher"),
            "lesson": Lesson.from_dict(obj.get("lesson")) if obj.get("lesson") is not None else None
        })
        return _obj


