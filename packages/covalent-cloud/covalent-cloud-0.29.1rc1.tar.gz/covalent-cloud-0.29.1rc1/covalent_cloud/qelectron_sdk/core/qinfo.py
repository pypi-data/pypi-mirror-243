# Copyright 2023 Agnostiq Inc.

"""QNode and QElectron information containers."""

from typing import Any, Dict, Optional, Sequence, Union

from pydantic import BaseModel  # pylint: disable=no-name-in-module

DeviceShots = Union[None, int, Sequence[int], Sequence[Union[int, Sequence[int]]]]


class QNodeSpecs(BaseModel):
    """
    A container for the specifications of a QNode generated by `qml.specs`.
    """

    gate_sizes: Dict[int, int]
    gate_types: Dict[str, int]
    num_operations: int
    num_observables: int
    num_diagonalizing_gates: int
    num_used_wires: int
    depth: int
    num_trainable_params: Optional[int] = None
    num_device_wires: int
    device_name: str
    diff_method: Optional[str] = None
    expansion_strategy: str
    gradient_options: Dict[str, int]
    interface: Optional[str] = None
    gradient_fn: Any = None  # can be string or `qml.gradients.gradient_transform`
    num_gradient_executions: Any = 0
    num_parameter_shift_executions: Optional[int] = None


class QElectronInfo(BaseModel):
    """
    A container for global and QNode device settings.
    """

    name: str
    description: Optional[str] = None
    device_shots: DeviceShots  # optional default for execution devices
    device_shots_type: Any = None
    device_wires: int  # this can not be reliably inferred from tapes alone
    pennylane_active_return: bool  # client-side status of `pennylane.active_return()`
