# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .pooling import Pooling


class HuggingFaceEmbedding(pydantic.BaseModel):
    """
    Base class for embeddings.
    """

    model_name: typing.Optional[str] = pydantic.Field(
        description="The name of the embedding model."
    )
    embed_batch_size: typing.Optional[int] = pydantic.Field(
        description="The batch size for embedding calls."
    )
    callback_manager: typing.Optional[typing.Dict[str, typing.Any]]
    tokenizer_name: str = pydantic.Field(description="Tokenizer name from HuggingFace.")
    max_length: typing.Optional[int] = pydantic.Field(
        description="Maximum length of input."
    )
    pooling: typing.Optional[Pooling] = pydantic.Field(description="Pooling strategy.")
    normalize: typing.Optional[bool] = pydantic.Field(
        description="Normalize embeddings or not."
    )
    query_instruction: typing.Optional[str] = pydantic.Field(
        description="Instruction to prepend to query text."
    )
    text_instruction: typing.Optional[str] = pydantic.Field(
        description="Instruction to prepend to text."
    )
    cache_folder: typing.Optional[str] = pydantic.Field(
        description="Cache folder for huggingface files."
    )
    class_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
