"use strict";(self.webpackChunkjupyterlab_gridwidth=self.webpackChunkjupyterlab_gridwidth||[]).push([[568],{568:(t,e,o)=>{o.r(e),o.d(e,{default:()=>m});var d=o(778),n=o(308),i=o(122),l=o(190),s=o(960);const a="jupyterlab-gridwidth:plugin",r=["1-2","1-3","2-3","1-4","2-4","3-4","1-5","2-5","3-5","4-5","1-6","2-6","3-6","4-6","5-6"],c={id:a,autoStart:!0,requires:[n.ICommandPalette,i.INotebookTracker,l.ISettingRegistry],activate:(t,e,o,d)=>{let n;console.log("extension jupyterlab-gridwidth is activating");const i=r.map((t=>`gridwidth-${t}`));for(const d of r){const[l,a]=d.split("-");n=`gridwidth:toggle-${l}-${a}`,t.commands.addCommand(n,{label:`Toogle Cell to ${l}/${a} of Full Width`,execute:()=>(0,s.apply_on_cells)(o,s.Scope.Active,(t=>{(0,s.md_toggle_multi)(t,"tags",`gridwidth-${d}`,i)}))}),e.addItem({command:n,category:"gridwidth"}),t.commands.addKeyBinding({command:n,keys:[`Alt ${l}`,`Alt ${a}`],selector:".jp-Notebook"})}n="gridwidth:cancel",t.commands.addCommand(n,{label:"Restore Full Cell Width",execute:()=>(0,s.apply_on_cells)(o,s.Scope.Active,(t=>{(0,s.md_toggle_multi)(t,"tags","",i)}))}),e.addItem({command:n,category:"gridwidth"}),t.commands.addKeyBinding({command:n,keys:["Alt 0"],selector:".jp-Notebook"}),o.widgetAdded.connect(((e,o)=>{let n;function i(o){var d;const i=o.get("show_toolbar_button").composite;console.debug(`gridwidth extension, show_toolbar_button from settings is ${i}`);const l=null===(d=e.currentWidget)||void 0===d?void 0:d.toolbar;if(l)if(i){if(n)return void console.debug("gridwidth: button already on");console.debug("gridwidth: adding button"),n=new g(t,e).button,l.insertItem(10,"gridWidth",n)}else{if(void 0===n)return void console.debug("gridwidth: button already off");console.debug("gridwidth: disposing button"),n.dispose(),n=void 0}else console.log("gridwidth: oops, too early")}Promise.all([t.restored,d.load(a)]).then((([t,e])=>{console.debug("gridwidth: triggering & arming loadSetting"),i(e),e.changed.connect(i)}))}))}};class g{constructor(t,e){this.menuOpen=!1,this.preventOpen=!1,this.button=this.createButton(t,e)}createButton(t,e){const o=new d.Menu({commands:t.commands});o.title.label="Cell Width",r.forEach((t=>{const e=`gridwidth:toggle-${t}`;o.addItem({command:e})})),o.addItem({type:"separator"}),o.addItem({command:"gridwidth:cancel"}),o.aboutToClose.connect((()=>{this.menuOpen=!1,this.preventOpen=!0,setTimeout((()=>{this.preventOpen=!1}),0)}));const i=new n.ToolbarButton({iconClass:"fa fa-arrows-h",onClick:()=>{if(this.menuOpen)o.close();else if(!this.preventOpen){const t=i.node.getBoundingClientRect();o.open(t.left,t.bottom),this.menuOpen=!0}},tooltip:"Toogle Cell Width"});return i}}const m=c}}]);