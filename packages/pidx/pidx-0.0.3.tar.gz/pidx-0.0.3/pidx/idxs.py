# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_idxs.ipynb.

# %% auto 0
__all__ = ['getcatidx', 'dfdsiloc', 'dfdsloc', 'getaidx', 'getcats', 'getbiloc', 'cat2bidx', 'cateqidx', 'getcatiloc',
           'cats2bidx', 'catseqidx', 'getcatsiloc', 'geticat', 'idxiloc', 'lociloc', 'getiloc', 'getloc']

# %% ../nbs/20_idxs.ipynb 6
#| export


# %% ../nbs/20_idxs.ipynb 8
from typing import TypeGuard, Optional

# %% ../nbs/20_idxs.ipynb 11
#| export

# %% ../nbs/20_idxs.ipynb 13
try: import numpy as np, pandas as pd
except ImportError: ...

# %% ../nbs/20_idxs.ipynb 15
#| export


# %% ../nbs/20_idxs.ipynb 17
#| export


# %% ../nbs/20_idxs.ipynb 19
from atyp import (
    DatasetQ, 
    DataFrame, DataFrameQ, IndexLike, IndexQ, BoolIndex,
    NPArray, NumStr, LoggerQ, BoolQ, IndexLikeQ, CatIndexQ, BoolIndexQ
)

from asto import asarng
from atup import argtup
from chck import isint, isiter, isints, isnone, iscatidx, isboolidx, isidxlike
from asto import slice2list
from excs import HushedErrors

# %% ../nbs/20_idxs.ipynb 21
from .mock import dummydf
from .util import dfdsidx, wrapidx, filtidx
from .bool import mergebools
from .safe import safeloc, safeiloc

# %% ../nbs/20_idxs.ipynb 27
def getcatidx(df: DataFrameQ = None, cidx: CatIndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> CatIndexQ:
    '''
    Retrieve the categorical index from the specified index, DataFrame, or DataSet.

    Parameters
    ----------
    df : DataFrameQ, optional
        The DataFrame whose index is to be retrieved and checked.
    
    cidx : IndexQ, optional
        The index to be checked if it's a categorical index.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index is to be retrieved and checked.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Examples
    --------
    >>> df = dummydf()
    >>> getcatidx(df)
    CategoricalIndex(
        ['b', 'a', 'c', 'b', 'a', 'a', 'b', 'a', 'b', 'b'], 
        categories=['a', 'b', 'c'], ordered=False, dtype='category')


    Returns
    -------
    IndexQ
        The categorical index, if available, from the given sources.

    Notes
    -----
    - The function first checks if `cidx` is a categorical index.
    - If not, it retrieves the index from the DataFrame or DataSet and converts it to a categorical index.
    '''
    if isnone(cidx) or not iscatidx(cidx): cidx = dfdsidx(df, ds)
    if iscatidx(cidx): return cidx
    return cidx.astype('category')

# %% ../nbs/20_idxs.ipynb 29
def dfdsiloc(df: DataFrameQ = None, idx: IndexLikeQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> DataFrame:
    '''
    Get rows of a DataFrame by integer location based on the provided index, DataFrame, or Dataset.

    Parameters
    ----------
    idx : IndexLike
        The integer locations to select rows from the DataFrame.

    df : DataFrameQ, optional
        The DataFrame to perform the operation on.

    ds : DatasetQ, optional
        The Dataset whose DataFrame is to be used.
        
    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    DataFrame
        A DataFrame that contains rows at the specified integer locations.

    Examples
    --------
    >>> df = dummydf()
    >>> dfdsiloc(df, (2, ))
    x    2
    y    0
    z    2
    Name: a, dtype: int64
    
    >>> dfdsiloc(df, [2, ])
    	x	y	z
    a	2	0	2


    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
    >>> dfdsiloc(df, [0, 2])
       A  B
    0  1  4
    2  3  6

    >>> dfdsiloc(df, 'a') # TypeError: Cannot index by location index with a non-integer key
    >>> ValueError: invalid literal for int() with base 10: 'a'


    Notes
    -----
    - This function is used when you want to retrieve entire rows based on their positions in the DataFrame.
    '''
    idx = wrapidx(idx)
    return safeiloc(idx, df, ds)

# %% ../nbs/20_idxs.ipynb 32
def dfdsloc(
    df: DataFrameQ = None, 
    idx: IndexLikeQ = None, 
    didx: IndexLikeQ = None, 
    ds: DatasetQ = None, 
    logger: LoggerQ = None
) -> DataFrame:    
    '''
    Get rows of a DataFrame by location based on the provided index, DataFrame, or Dataset.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.

    idx : IndexLike
        Index or a list of indices whose integer locations are to be found.

    didx : IndexLike
        Reference index or a list of indices whose integer locations to be checked again for filtering.

    ds: DatasetQ, optional
        Dataset whose DataFrame is to be used.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    NPArray
        An array of integer locations corresponding to the given index in the DataFrame.

    Examples
    --------
    >>> df = dummydf()
    >>> dfdsloc(df, 'c')    
        x	y	z
    c	0	1	2    
    
    >>> dfdsloc(df, ['a'])    
        x	y	z
    a	2	0	2
    a	2	0	2
    a	1	0	0

    >>> dfdsloc(df, ['z'])
        x	y	z

    Notes
    -----
    - The function filters out indices not present in the DataFrame's index.
    - It returns the integer locations of the filtered indices within the DataFrame.
    '''
    idx = wrapidx(idx)
    if isnone(didx): didx = dfdsidx(df, ds)
    idx = filtidx(idx, df, didx, ds)
    return safeloc(idx, df, ds)

# %% ../nbs/20_idxs.ipynb 36
def getaidx(df: DataFrame = None, idx: IndexLikeQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> IndexQ:
    '''
    Retrieve the DataFrame's index by integer location.

    Parameters
    ----------
    df : DataFrame
        The DataFrame whose index is to be accessed.
    
    idx : IndexLike
        The integer locations to select index values from the DataFrame.
    
    ds : DatasetQ, optional
        The DataSet to be considered if provided.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    IndexQ
        The index values at the specified integer locations.

    Examples
    --------
    >>> df = dummydf()
    >>> getaidx(df, 1), getaidx(df, 2), getaidx(df, [1]), getaidx(df, [7, 4])
    (1, 2, array([1]), array([7, 4]))

    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['x', 'y', 'z'])
    >>> getaidx(df, [0, 2])
    Index(['x', 'z'], dtype='object')
    
    Notes
    -----
    - This function is for when you're interested in the index values at certain positions, not the DataFrame rows.
    '''
    arange = asarng(dfdsidx(df, ds))
    iloc = arange[idx]
    return iloc

# %% ../nbs/20_idxs.ipynb 38
def getcats(df: DataFrameQ = None, cidx: CatIndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> IndexQ:
    '''
    Retrieve the categories of a categorical index from the specified index, DataFrame, or DataSet.

    Parameters
    ----------
    df : DataFrameQ, optional
        The DataFrame whose index's categories are to be retrieved.

    cidx : CatIndexQ, optional
        The index to retrieve categories from if it's a categorical index.
        
    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    IndexQ
        The categories of the categorical index, if available.

    Examples
    --------
    >>> df = dummydf()
    >>> getcats(df), getcats(df, None), getcats(df, [1])
    (Index(['a', 'b', 'c'], dtype='object'),
     Index(['a', 'b', 'c'], dtype='object'),
     Index(['a', 'b', 'c'], dtype='object'))

    Notes
    -----
    - This function utilizes `getcatidx` to first ensure the index is categorical.
    '''
    return getattr(getcatidx(df, cidx, ds), 'categories', None)

# %% ../nbs/20_idxs.ipynb 40
def getbiloc(bidx: BoolIndexQ, other: IndexQ = None) -> BoolIndex:
    '''
    Get integer locations for a boolean index.

    Parameters
    ----------
    bidx : BoolIndex
        The boolean index to find integer locations for.
        
    other : IndexQ, optional
        Another index to validate the length of the boolean index against.

    Returns
    -------
    BoolIndex
        An array of integer locations where the boolean index is True.

    Examples
    --------
    >>> getbiloc([True, False, True]), getbiloc([True, False, True], [1, 2, 3]), getbiloc([True, False, True], [1, 2, 3, 4])
    (array([0, 2]), array([0, 2]), array([], dtype=float64))

    Notes
    -----
    - This function checks if the provided `bidx` is a valid boolean index and optionally compares its length against another index.
    '''
    return np.where(bidx)[0] if isboolidx(bidx, other) else np.empty(0)


# %% ../nbs/20_idxs.ipynb 42
def cat2bidx(df: DataFrame, cat: NumStr, cidx: CatIndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> BoolIndex:
    '''
    Convert a categorical index value to a boolean index in a DataFrame.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cat : NumStr
        The category to convert to a boolean index.

    cidx : CatIndexQ, optional
        The categorical index to be converted.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    BoolIndex
        A boolean index where True indicates the presence of the specified category.

    Examples
    --------
    >>> df = dummydf()
    >>> cat2bidx(df, 'a'), cat2bidx(df, 'b'), cat2bidx(df, 'f'), cat2bidx(df, 100), 
    (array([False, False,  True, False,  True, False, False, False,  True,
        False]),
     array([False,  True, False, False, False,  True, False, False, False,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - The function uses `getcatidx` to retrieve the categorical index and then identifies the locations of the specified category.
    '''
    try: return getcatidx(df, cidx, ds, logger).get_loc(cat)
    except KeyError: return np.zeros_like(dfdsidx(df, ds), dtype=bool)


# %% ../nbs/20_idxs.ipynb 43
def cateqidx(df: DataFrame, cat: NumStr, cidx: IndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> BoolIndex:
    '''
    Check where a categorical index has a specified category.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cat : NumStr
        The category to check for in the categorical index.

    cidx : IndexQ, optional
        The categorical index to be checked.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    BoolIndex
        A boolean index indicating the presence of the specified category.

    Examples
    --------
    >>> df = dummydf()
    >>> cateqidx(df, 'a'), cateqidx(df, 'b'), cateqidx(df, 'f'), cateqidx(df, 100), 
    (array([False, False,  True, False,  True, False, False, False,  True,
        False]),
     array([False,  True, False, False, False,  True, False, False, False,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - This function returns a boolean index for a single category, indicating where it is present in the categorical index.
    '''
    return getcatidx(df, cidx, ds, logger) == cat

# %% ../nbs/20_idxs.ipynb 46
def getcatiloc(df: DataFrame, cat: NumStr, cidx: CatIndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> IndexLike:
    '''
    Retrieve integer locations of a specific category in a DataFrame's index.

    Parameters
    ----------
    df : DataFrame
        The DataFrame to operate on.

    cat : NumStr
        The category whose index locations are to be found.

    cidx : CatIndexQ, optional
        The categorical index to be searched.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    IndexLike
        An array of integer locations corresponding to the specified category.

    Examples
    --------
    >>> df = dummydf()
    >>> getcatiloc(df, 'a'), getcatiloc(df, 'b'), getcatiloc(df, 'f'), getcatiloc(df, 100)
    (array([2, 4, 8]),
     array([1, 5, 9]),
     array([], dtype=int64),
     array([], dtype=int64))


    Notes
    -----
    - This function combines `cat2bidx` and `getbiloc` to convert a category to a boolean index and then find its integer locations.
    '''
    bidx = cat2bidx(df, cat, cidx, ds, logger)
    iloc = getbiloc(bidx, dfdsidx(df, ds))
    return iloc

# %% ../nbs/20_idxs.ipynb 48
def cats2bidx(df: DataFrame, cats: NumStr | IndexLike, cidx: CatIndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None):
    '''
    Get a boolean index representing the presence of specified categories in a categorical index.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cats : NumStr | IndexLike
        The categories to be converted to a boolean index.

    cidx : CatIndexQ, optional
        The categorical index to be checked.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    BoolIndex
        A boolean index where True indicates the presence of the specified categories.

    Examples
    --------
    >>> df = dummydf()    
    >>> cats2bidx(df, 'a'), cats2bidx(df, 'b'), cats2bidx(df, 'f'), cats2bidx(df, 100)
    >>> cats2bidx(df, ['a', 'b']), cats2bidx(df, ['b', 'a']), cats2bidx(df, ['a', 'f']), cats2bidx(df, ['b', 100]), cats2bidx(df, ['z', 100])
    (array([False,  True,  True, False,  True,  True, False, False,  True,
            True]),
     array([False,  True,  True, False,  True,  True, False, False,  True,
            True]),
     array([False, False,  True, False,  True, False, False, False,  True,
            False]),
     array([False,  True, False, False, False,  True, False, False, False,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - This function handles multiple categories and merges their boolean indexes into one.
    - Useful for filtering data based on multiple category values.
    '''
    idxlen = len(argtup(cats))
    if idxlen == 1 and not isidxlike(cats):
        cats = list((cats, ))
    bidxs = [cateqidx(df, cat, cidx, ds, logger) for cat in cats]
    bidxs = mergebools(bidxs, df, ds, )
    return bidxs

# %% ../nbs/20_idxs.ipynb 49
def catseqidx(df: DataFrame, cats: NumStr | IndexLike, cidx: IndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> BoolIndex:
    '''
    Check where a categorical index has a specified category.

    Parameters
    ----------
    df : DataFrame
        The DataFrame containing the categorical index.

    cats : NumStr | IndexLike
        The categories to check for in the categorical index.
        
    cidx : IndexQ, optional
        The categorical index to be checked.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    BoolIndex
        A boolean index indicating the presence of the specified category.

    Examples
    --------
    >>> df = dummydf()
    >>> catseqidx(df, 'a'), catseqidx(df, ['a']), catseqidx(df, ['a', 'b']), catseqidx(df, ['f'])
    (array([False, False,  True, False,  True, False, False, False,  True,
            False]),
     array([False, False,  True, False,  True, False, False, False,  True,
            False]),
     array([False,  True,  True, False,  True,  True, False, False,  True,
            True]),
     array([False, False, False, False, False, False, False, False, False,
            False]))

    Notes
    -----
    - This function returns a boolean index for a single category, indicating where it is present in the categorical index.
    '''
    idxlen = len(argtup(cats))
    if idxlen == 1 and not isidxlike(cats):
        cats = list((cats, ))
    return getcatidx(df, cidx, ds, logger).isin(cats)

# %% ../nbs/20_idxs.ipynb 54
def getcatsiloc(df: DataFrame, cats: NumStr | IndexLike, cidx: CatIndexQ = None, ds: DatasetQ = None, logger: LoggerQ = None) -> IndexLike:
    '''
    Retrieve integer locations of specific categories in a DataFrame's index.

    Parameters
    ----------
    df : DataFrame
        The DataFrame to operate on.
        
    cats : NumStr | IndexLike
        The categories whose index locations are to be found.

    cidx : CatIndexQ, optional
        The categorical index to be searched.

    ds : DatasetQ, optional
        The Dataset whose DataFrame's index's categories are to be retrieved.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    IndexLike
        An array of integer locations corresponding to the specified categories.

    Examples
    --------
    >>> df = dummydf()
    >>> getcatsiloc(df, ['a', 'f']), getcatsiloc(df, ['a', 'b']), getcatsiloc(df, ['f', 100])
    (array([2, 4, 8]), array([1, 2, 4, 5, 8, 9]), array([], dtype=int64))
    
    Notes
    -----
    - This function is an extension of `getcatiloc`, capable of handling multiple categories.
    - It is useful for obtaining the positions of rows that belong to multiple categories.
    '''
    bidx = cats2bidx(df, cats, cidx, ds, logger)
    iloc = getbiloc(bidx, dfdsidx(df, ds))
    return iloc

# %% ../nbs/20_idxs.ipynb 58
def geticat(
    df: DataFrameQ = None, idx: IndexLikeQ = None, ds: DatasetQ = None, logger: LoggerQ = None,
    unique: BoolQ = True, categories: CatIndexQ = None
) -> IndexLike:
    '''
    Retrieve unique row indices corresponding to a category or a set of categories.

    Parameters
    ----------    
    df : DataFrameQ, optional
        DataFrame to operate on.

    idx : IndexLike
        A category index, a list of category indices, or a slice object representing category indices.

    ds : DatasetQ, optional
        Dataset to operate on.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    unique : BoolQ, optional
        If True, returns unique indices. Default is True.
        
    categories : optional
        Predefined categories to use. If None, categories are extracted from the DataFrame or DataSet.

    Returns
    -------
    IndexLike
        An array or list of indices corresponding to the specified categories.

    Examples
    --------
    >>> df = dummydf()
    >>> geticat(df, 1), geticat(df, [1, 2])
    (['b'], ['b', 'c'])
    >>> geticat(df, 'a'), geticat(df, ['a'])
    (['a'], ['a'])


    Notes
    -----
    - The function first converts `idx` to a list of indices if it is a slice.
    - It then checks if these indices are within the range of available categories and retrieves them accordingly.
    - If `unique` is True, it returns a sorted list of unique categories.
    '''
    # the categorical index of the df
    cidx = getcatidx(df, None, ds, logger)

    # the categories of the df
    ncats = len(categories := getcats(df, categories or cidx, ds, logger))

    # recall that slice(0, 3, 1) --> [0, 1, 2] so indexing will be the same
    if isinstance(idx, slice): idx = slice2list(idx)

    # get the n-th category or # get the catgories at iloc idx
    if (isint(idx) and idx < ncats) or (isints(idx) and max(idx) < ncats):
        cats = categories[idx]
    # non-integer(s) index
    else:
        bidx = cats2bidx(df, idx, cidx, ds, logger)
        cats = cidx[bidx]

    if unique and isiter(cats):
        cats = sorted(np.unique(cats))
    return cats

# %% ../nbs/20_idxs.ipynb 61
def idxiloc(df: DataFrame, idx: IndexLike, ds: DatasetQ = None,  logger: LoggerQ = None,) -> NPArray:
    '''
    Convert an index to its integer locations within a DataFrame.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.

    idx : IndexLike
        Index or a list of indices whose integer locations are to be found.

    ds : DatasetQ, optional
        Dataset to operate on.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    NPArray
        An array of integer locations corresponding to the given index in the DataFrame.

    Examples
    --------
    >>> df = dummydf()
    >>> idxiloc(df, 0), idxiloc(df, 1), idxiloc(df, [1])
    (array([], dtype=int64), array([], dtype=int64), array([], dtype=int64))
    >>> idxiloc(df, 'a'), idxiloc(df, ['a']), idxiloc(df, ['a', 'z']), idxiloc(df, [100, 'z'])
    (array([2, 4, 8]), array([2, 4, 8]), array([2, 4, 8]), array([], dtype=int64))



    Notes
    -----
    - The function filters out indices not present in the DataFrame's index.
    - It returns the integer locations of the filtered indices within the DataFrame.
    '''
    dfsub = dfdsloc(df, idx, dfidx := dfdsidx(df, ds), ds ,logger)
    idx = dfidx.isin(dfsub.index)
    iloc = asarng(df)[idx]
    if logger: logger.debug(f"iloc: {iloc}")
    return iloc

# %% ../nbs/20_idxs.ipynb 64
def lociloc(
    df: DataFrame, idx: IndexLike, 
    ds: DatasetQ = None, logger: LoggerQ = None,
) -> NPArray:
    '''
    Retrieve integer locations for given index values within a DataFrame.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.
    
    idx : IndexLike
        Index or a list of indices whose integer locations are to be found.
    
    ds : DatasetQ, optional
        Dataset to operate on.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    NPArray
        An array of integer locations corresponding to the given index in the DataFrame.

    Examples
    --------
    >>> df = dummydf()
    >>> idxiloc(df, 'a'), idxiloc(df, ['a', ]), lociloc(df, 'a'), lociloc(df, ['a', ])
    (array([2, 4, 8]), array([2, 4, 8]), array([2, 4, 8]), array([2, 4, 8]))

    Notes
    -----
    - Handles both single and multiple index values.
    - It uses different strategies for single values and list of indices to find their integer locations.
    '''
    idxlen = len(argtup(idx))
    if idxlen == 1 and not isidxlike(idx):        
        bidx = getbiloc(cat2bidx(df, idx, ds=ds, logger=logger))
        iloc = asarng(df)[bidx]
    else:
        iloc = df.index.get_indexer_non_unique(idx)[0]
        iloc = np.array([n for n in iloc if n != -1])
        if len(iloc) == 0: iloc = np.empty(0)
    if logger: logger.debug(f"iloc: {iloc}")
    return iloc

# %% ../nbs/20_idxs.ipynb 67
def getiloc(df: DataFrame, idx: IndexLike, ds: DatasetQ = None, logger: LoggerQ = None) -> list:
    '''
    Retrieve rows from a DataFrame or DataSet based on index locations.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.

    idx : IndexLike
        Index or a list of indices whose corresponding DataFrame rows are to be retrieved.

    ds : DatasetQ, optional
        DataSet to operate on.

    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    list
        A list containing the DataFrame rows corresponding to the given index locations.

    Examples
    --------
    >>> df = dummydf()
    >>> getiloc(df, [1, 2, 3])
        x	y	z
    b	0	0	2
    a	2	0	2
    c	2	2	0
    

    Notes
    -----
    - Utilizes `getaidx` to retrieve the index values at specified locations and then `dfdsiloc` to get the rows.
    '''
    iloc = getaidx(df, idx, ds, logger)
    return dfdsiloc(df, iloc, ds, logger)


# %% ../nbs/20_idxs.ipynb 70
def getloc(df: DataFrame, idx: IndexLike, ds: DatasetQ = None, logger: LoggerQ = None) -> list:
    '''
    Retrieve rows from a DataFrame or DataSet based on a given index or a set of indices.

    Parameters
    ----------
    df : DataFrame
        DataFrame to operate on.
    idx : IndexLike
        Index or a list of indices whose corresponding DataFrame rows are to be retrieved.
    ds : DatasetQ, optional
        DataSet to operate on.
    logger : LoggerQ, optional
        Logger for logging any relevant information or errors.

    Returns
    -------
    list
        A list containing the DataFrame rows corresponding to the given indices.

    Examples
    --------
    >>> df = dummydf()
    >>> getloc(df, ['a'])
        x	y	z
    a	2	0	2
    a	2	0	2
    a	1	0	0

    Notes
    -----
    - Attempts to retrieve rows using `idxiloc` and `lociloc`.
    - If indices are not found, raises an error through `HushedErrors`.
    '''
    errs = HushedErrors()
    try:
        # use dataframe loc, but this may give repeated values
        iloc = idxiloc(df, idx, logger=logger)
        return dfdsiloc(df, iloc, ds, logger)   
    except KeyError as err:
        errs.add(err)

    try:
        iloc = lociloc(df, idx, logger=logger)
        return dfdsiloc(df, iloc, ds, logger)
    except KeyError as err:
        errs.add(err)

    errs.msg(f'idx: {idx} not found in df: {df} or ds: {ds}.')
    errs.call()


# %% ../nbs/20_idxs.ipynb 74
#| export
