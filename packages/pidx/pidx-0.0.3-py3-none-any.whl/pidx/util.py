# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_util.ipynb.

# %% auto 0
__all__ = ['dfds', 'dfdsidx', 'getdfdsloc', 'getdfdsiloc', 'wrapidx', 'filtidx']

# %% ../nbs/02_util.ipynb 6
#| export


# %% ../nbs/02_util.ipynb 8
#| export


# %% ../nbs/02_util.ipynb 11
#| export

# %% ../nbs/02_util.ipynb 13
try: import numpy as np, pandas as pd
except ImportError: ...

# %% ../nbs/02_util.ipynb 15
#| export


# %% ../nbs/02_util.ipynb 17
#| export


# %% ../nbs/02_util.ipynb 19
from atyp import DataFrameQ, DatasetQ, IndexQ, IndexLike, IndexLikeQ
from chck import isidxlike, istuple
from atup import argtup

# %% ../nbs/02_util.ipynb 21
from .mock import dummydf

# %% ../nbs/02_util.ipynb 25
def dfds(df: DataFrameQ = None, ds: DatasetQ = None) -> DataFrameQ:
    '''Get the df from either `df` or `ds.df`'''
    return getattr(ds, 'df', df)

def dfdsidx(df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Get the df's index from either `df` or `ds.df`'''
    return getattr(dfds(df, ds), 'index', None)

def getdfdsloc(df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Get the df's `LocIndexer` from either `df` or `ds.df`'''
    return getattr(dfds(df, ds), 'loc', None)

def getdfdsiloc(df: DataFrameQ = None, ds: DatasetQ = None) -> IndexQ:
    '''Get the df's `iLocIndexer` from either `df` or `ds.df`'''
    return getattr(dfds(df, ds), 'iloc', None)

# %% ../nbs/02_util.ipynb 27
def wrapidx(idx: IndexLikeQ = None) -> IndexLike:
    '''Wrap idx in a tuple if it's not already a tuple or an index-like object'''
    idxlen = len(argtup(idx))
    if idxlen == 1 and not (isidxlike(idx) or istuple(idx)):
        idx = list((idx, ))
    return idx

def filtidx(vals: IndexLikeQ = None, df: DataFrameQ = None, didx: IndexLikeQ = None, ds: DatasetQ = None) -> IndexLike:
    '''Filter vals by didx or df's index'''
    vals = wrapidx(vals)    
    if didx is None: didx = dfdsidx(df := dfds(df, ds))
    return type(vals)(filter(lambda x: x in didx, vals))

# %% ../nbs/02_util.ipynb 29
#| export
