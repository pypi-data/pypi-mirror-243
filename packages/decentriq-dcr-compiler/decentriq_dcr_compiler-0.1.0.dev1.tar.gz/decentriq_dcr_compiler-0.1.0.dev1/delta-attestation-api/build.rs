use std::fs::File;
use std::io::Write;
use std::path::Path;

fn main() {
    // Proto bindings generation
    let mut config = prost_build::Config::default();
    config.out_dir("src/proto");
    config.type_attribute(
        ".attestation",
        "#[derive(::serde::Deserialize, ::serde::Serialize)]",
    );
    config.message_attribute(".attestation", "#[derive(Eq, Hash)]");
    config.type_attribute(".attestation.Fatquote.fatquote", "#[derive(Eq, Hash)]");
    config.type_attribute(".attestation.AttestationSpecification.attestation_specification", "#[derive(Eq, Hash)]");
    config
        .compile_protos(
            &["src/build-deps/proto/attestation.proto"],
            &["src/build-deps/proto"],
        )
        .unwrap();
    println!("cargo:rerun-if-changed=src/build-deps/proto/attestation.proto");
    
    // touch .autogenerated-files
    assert!(std::process::Command::new("env")
        .args(&["touch", "src/proto/.autogenerated-files"])
        .spawn()
        .unwrap()
        .wait()
        .unwrap()
        .success());

    let mod_content = b"\
        pub mod attestation;\n\
    ";
    let dest_path = Path::new(".").join("src/proto/mod.rs");
    let mut f = File::create(&dest_path).expect("Failed to create proto/mod.rs");
    f.write_all(mod_content)
        .expect("Failed to write proto/mod.rs");
}
