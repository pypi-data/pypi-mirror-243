use std::process::Command;
use std::path::PathBuf;

fn main() {
    // Proto bindings generation
    let mut config = prost_build::Config::default();
    assert!(Command::new("env")
        .args(&["mkdir", "-p", "src/proto"])
        .spawn()
        .unwrap()
        .wait()
        .unwrap()
        .success());
    config.out_dir("src/proto");
    config.type_attribute(
        ".data_room",
        "#[derive(::serde::Deserialize, ::serde::Serialize)]",
    );
    config.message_attribute(".data_room", "#[derive(Eq, Hash)]");
    config.type_attribute(
        ".data_room.GovernanceProtocol.policy",
        "#[derive(Eq, Hash)]",
    );
    config.type_attribute(
        ".data_room.ConfigurationElement.element",
        "#[derive(Eq, Hash)]",
    );
    config.type_attribute(
        ".data_room.ConfigurationModification.modification",
        "#[derive(Eq, Hash)]",
    );
    config.type_attribute(".data_room.ComputeNode.node", "#[derive(Eq, Hash)]");
    config.type_attribute(".data_room.RateLimitingConfig.method", "#[derive(Eq, Hash)]");
    config.type_attribute(".data_room.Permission.permission", "#[derive(Eq, Hash)]");
    config.extern_path(".attestation", "::delta_attestation_api");
    config.protoc_arg("--experimental_allow_proto3_optional");
    config
        .compile_protos(
            &["src/build-deps/proto/data_room.proto"],
            &[
                PathBuf::from("src/build-deps/proto"),
                PathBuf::from("../delta-attestation-api/src/build-deps/proto"),
            ],
        )
        .unwrap();
    println!("cargo:rerun-if-changed=src/build-deps/proto/data_room.proto");

    // touch .autogenerated-files
    assert!(std::process::Command::new("env")
        .args(&["touch", "src/proto/.autogenerated-files"])
        .spawn()
        .unwrap()
        .wait()
        .unwrap()
        .success());
}



// use std::process::Command;
// use std::path::PathBuf;

// fn main() {
//     // Proto bindings generation
//     let mut config = prost_build::Config::default();
//     assert!(Command::new("env")
//         .args(&["mkdir", "-p", "src/proto"])
//         .spawn()
//         .unwrap()
//         .wait()
//         .unwrap()
//         .success());
//     config.out_dir("src/proto");
//     config.type_attribute(
//         ".data_room",
//         "#[derive(::serde::Deserialize, ::serde::Serialize]",
//     );
    // config.message_attribute(".data_room", "#[derive(Eq, Hash)]");
    // config.type_attribute(
    //     ".data_room.GovernanceProtocol.policy",
    //     "#[derive(Eq, Hash)]",
    // );
    // config.type_attribute(
    //     ".data_room.ConfigurationElement.element",
    //     "#[derive(Eq, Hash)]",
    // );
    // config.type_attribute(
    //     ".data_room.ConfigurationModification.modification",
    //     "#[derive(Eq, Hash)]",
    // );
    // config.type_attribute(".data_room.ComputeNode.node", "#[derive(Eq, Hash)]");
    // config.type_attribute(".data_room.Permission.permission", "#[derive(Eq, Hash)]");
//     config.extern_path(".attestation", "::delta_attestation_api");
//     config.protoc_arg("--experimental_allow_proto3_optional");
//     config
//         .compile_protos(
//             &["src/build-deps/proto/data_room.proto"],
//             &[
//                 PathBuf::from("src/build-deps/proto"),
//                 PathBuf::from("../delta-attestation-api/src/build-deps/proto"),
//             ],
//         )
//         .unwrap();
//     println!("cargo:rerun-if-changed=src/build-deps/proto/data_room.proto");

//     // touch .autogenerated-files
//     assert!(std::process::Command::new("env")
//         .args(&["touch", "src/proto/.autogenerated-files"])
//         .spawn()
//         .unwrap()
//         .wait()
//         .unwrap()
//         .success());
// }
