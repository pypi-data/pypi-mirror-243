use std::fs::File;
use std::io::Write;
use std::path::Path;
use std::path::PathBuf;

fn main() {
    // Proto bindings generation
    let mut config = prost_build::Config::default();
    assert!(std::process::Command::new("env")
        .args(&["mkdir", "-p", "src/proto"])
        .spawn()
        .unwrap()
        .wait()
        .unwrap()
        .success());
    config.out_dir("src/proto");
    config.protoc_arg("--experimental_allow_proto3_optional");
    config.type_attribute(
        "DataRoomStatus",
        "#[derive(::serde::Deserialize, ::serde::Serialize)]",
    );
    config.extern_path(".attestation", "::delta_attestation");
    config.extern_path(".data_room", "::delta_data_room_api");
    config.extern_path(".identity_endorsement", "::delta_identity_endorsement_api");
    config.btree_map(&["."]);
    config
        .compile_protos(
            &["src/build-deps/proto/gcg.proto"],
            &[
                PathBuf::from("src/build-deps/proto"),
                PathBuf::from("../delta-attestation-api/src/build-deps/proto"),
                PathBuf::from("../delta-data-room-api/src/build-deps/proto"),
                PathBuf::from("../delta-identity-endorsement-api/src/build-deps/proto"),
            ],
        )
        .unwrap();
    println!("cargo:rerun-if-changed=src/build-deps/proto/gcg.proto");

    // touch .autogenerated-files
    assert!(std::process::Command::new("env")
        .args(&["touch", "src/proto/.autogenerated-files"])
        .spawn()
        .unwrap()
        .wait()
        .unwrap()
        .success());

    let mod_content = b"\
        mod gcg;\n\
        \n\
        pub use gcg::*;\n\
    ";
    let dest_path = Path::new(".").join("src/proto/mod.rs");
    let mut f = File::create(&dest_path).expect("Failed to create proto/mod.rs");
    f.write_all(mod_content)
        .expect("Failed to write proto/mod.rs");
}
